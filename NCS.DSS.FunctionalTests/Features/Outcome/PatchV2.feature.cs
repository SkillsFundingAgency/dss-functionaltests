// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Outcome
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PatchV2")]
    [NUnit.Framework.CategoryAttribute("postV2")]
    [NUnit.Framework.CategoryAttribute("patchV2")]
    public partial class PatchV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PatchV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PatchV2", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV2",
                        "patchV2"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table1.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 10
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table2.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 14
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "Channel",
                        "2"});
            table3.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table3.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 18
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "DateandTimeOfSession",
                        "2018-01-21T14:45:00Z"});
            table4.AddRow(new string[] {
                        "VenuePostCode",
                        "NN1 2NN"});
#line 24
 testRunner.And("I post a session with the following details:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table5.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table5.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table5.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table5.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table5.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table5.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table5.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 28
 testRunner.And("I post an ActionPlan with the following details:", ((string)(null)), table5, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid Patch OutcomeClaimedDate with ClaimedPriorityGroup")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("Cat1")]
        public virtual void ValidPatchOutcomeClaimedDateWithClaimedPriorityGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid Patch OutcomeClaimedDate with ClaimedPriorityGroup", null, new string[] {
                        "outcomes",
                        "smoke",
                        "Cat1"});
#line 40
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table6.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
#line 41
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-08-20T21:45:00Z"});
            table7.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "5"});
#line 45
  testRunner.When("I patch the following:", ((string)(null)), table7, "When ");
#line 49
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
  testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
  testRunner.And("there should be a record in the outcomes ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
  testRunner.And("there should be a record in the outcomes-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid Patch remove value for OutcomeClaimedDate")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        [NUnit.Framework.CategoryAttribute("Cat1")]
        public virtual void ValidPatchRemoveValueForOutcomeClaimedDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid Patch remove value for OutcomeClaimedDate", null, new string[] {
                        "outcomes",
                        "Cat1"});
#line 55
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table8.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-08-20T21:45:00Z"});
            table8.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-08-20T21:45:00Z"});
            table8.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "5"});
#line 56
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
#line 62
  testRunner.When("I patch the following via a different touchpoint", ((string)(null)), table9, "When ");
#line 65
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
  testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
  testRunner.And("the response body should have different LastUpdatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-08-20T21:45:00Z"});
            table10.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table10.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
            table10.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "5"});
#line 68
  testRunner.And("the response body should contain:", ((string)(null)), table10, "And ");
#line 74
  testRunner.And("there should be a record in the outcomes ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
  testRunner.And("there should be a record in the outcomes-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid Patch remove value for OutcomeClaimedDate and OutcomeEffectiveDate")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void ValidPatchRemoveValueForOutcomeClaimedDateAndOutcomeEffectiveDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid Patch remove value for OutcomeClaimedDate and OutcomeEffectiveDate", null, new string[] {
                        "outcomes"});
#line 78
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table11.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-08-20T21:45:00Z"});
            table11.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-08-20T21:45:00Z"});
            table11.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "5"});
#line 79
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
            table12.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        ""});
#line 85
  testRunner.When("I patch the following:", ((string)(null)), table12, "When ");
#line 89
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        ""});
            table13.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table13.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
            table13.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "5"});
#line 90
  testRunner.And("the response body should contain:", ((string)(null)), table13, "And ");
#line 96
  testRunner.And("there should be a record in the outcomes ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
  testRunner.And("there should be a record in the outcomes-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid Patch add values for OutcomeClaimedDate and OutcomeEffectiveDate")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void ValidPatchAddValuesForOutcomeClaimedDateAndOutcomeEffectiveDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid Patch add values for OutcomeClaimedDate and OutcomeEffectiveDate", null, new string[] {
                        "outcomes"});
#line 100
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table14.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "5"});
#line 101
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-08-20T21:45:00Z"});
            table15.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-08-20T21:46:00Z"});
#line 105
  testRunner.When("I patch the following:", ((string)(null)), table15, "When ");
#line 109
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-08-20T21:45:00Z"});
            table16.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table16.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-08-20T21:46:00Z"});
            table16.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "5"});
#line 110
  testRunner.And("the response body should contain:", ((string)(null)), table16, "And ");
#line 116
  testRunner.And("there should be a record in the outcomes ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
  testRunner.And("there should be a record in the outcomes-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch OutcomeClaimedDate without ClaimedPriorityGroup")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void PatchOutcomeClaimedDateWithoutClaimedPriorityGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch OutcomeClaimedDate without ClaimedPriorityGroup", null, new string[] {
                        "outcomes"});
#line 120
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table17.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
#line 121
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table17, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
#line 125
  testRunner.When("I patch the following:", ((string)(null)), table18, "When ");
#line 128
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid OutcomeType")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void PatchInvalidOutcomeType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid OutcomeType", null, new string[] {
                        "outcomes"});
#line 131
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table19.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
#line 132
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "OutcomeType",
                        "7"});
#line 136
  testRunner.When("I patch the following:", ((string)(null)), table20, "When ");
#line 139
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Outcome effective date earlier than Session.DateandTimeOfSession")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void PatchOutcomeEffectiveDateEarlierThanSession_DateandTimeOfSession()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Outcome effective date earlier than Session.DateandTimeOfSession", null, new string[] {
                        "outcomes"});
#line 144
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table21.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
#line 145
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table21, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2017-07-20T21:45:00Z"});
#line 149
  testRunner.When("I patch the following:", ((string)(null)), table22, "When ");
#line 152
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Outcome effective date less than Outcome claimed date")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void PatchOutcomeEffectiveDateLessThanOutcomeClaimedDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Outcome effective date less than Outcome claimed date", null, new string[] {
                        "outcomes"});
#line 155
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table23.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
#line 156
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table23, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-19T21:45:00Z"});
            table24.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "5"});
#line 160
  testRunner.When("I patch the following:", ((string)(null)), table24, "When ");
#line 164
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Outcome effective date greater than Session.DateandTimeOfSession + 12 month" +
            "s")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void PatchOutcomeEffectiveDateGreaterThanSession_DateandTimeOfSession12Months()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Outcome effective date greater than Session.DateandTimeOfSession + 12 month" +
                    "s", null, new string[] {
                        "outcomes"});
#line 167
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "OutcomeType",
                        "1"});
            table25.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
#line 168
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table25, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2019-01-22T22:45:00Z"});
#line 172
  testRunner.When("I patch the following:", ((string)(null)), table26, "When ");
#line 175
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Outcome effective date greater than Session.DateandTimeOfSession + 13 month" +
            "s")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void PatchOutcomeEffectiveDateGreaterThanSession_DateandTimeOfSession13Months()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Outcome effective date greater than Session.DateandTimeOfSession + 13 month" +
                    "s", null, new string[] {
                        "outcomes"});
#line 178
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table27.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table27.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
#line 179
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table27, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2019-02-22T22:45:00Z"});
#line 183
  testRunner.When("I patch the following:", ((string)(null)), table28, "When ");
#line 186
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer is terminated with reason 1 - Customer Choice, patch to Outcome is recei" +
            "ved")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void CustomerIsTerminatedWithReason1_CustomerChoicePatchToOutcomeIsReceived()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer is terminated with reason 1 - Customer Choice, patch to Outcome is recei" +
                    "ved", null, new string[] {
                        "outcomes"});
#line 202
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table29.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table29.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table29.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table29.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 203
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table29, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table30.AddRow(new string[] {
                        "DateOfTermination",
                        "2018-07-20T21:45:00Z"});
            table30.AddRow(new string[] {
                        "ReasonForTermination",
                        "1"});
#line 209
  testRunner.When("I patch \"Customers\" with the following details:", ((string)(null)), table30, "When ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        ""});
            table31.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
#line 213
  testRunner.And("I patch the following:", ((string)(null)), table31, "And ");
#line 217
  testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer is terminated with reason 2 - Deceased, patch to Outcome is received")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void CustomerIsTerminatedWithReason2_DeceasedPatchToOutcomeIsReceived()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer is terminated with reason 2 - Deceased, patch to Outcome is received", null, new string[] {
                        "outcomes"});
#line 220
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table32.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table32.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table32.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table32.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 221
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table32, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table33.AddRow(new string[] {
                        "DateOfTermination",
                        "2018-07-20T21:45:00Z"});
            table33.AddRow(new string[] {
                        "ReasonForTermination",
                        "2"});
#line 227
  testRunner.When("I patch \"Customers\" with the following details:", ((string)(null)), table33, "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table34.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        ""});
            table34.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
#line 231
  testRunner.And("I patch the following:", ((string)(null)), table34, "And ");
#line 235
  testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer is terminated with reason 99 - Other, patch to  Claimed date and Effecti" +
            "ve date is received")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void CustomerIsTerminatedWithReason99_OtherPatchToClaimedDateAndEffectiveDateIsReceived()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer is terminated with reason 99 - Other, patch to  Claimed date and Effecti" +
                    "ve date is received", null, new string[] {
                        "outcomes"});
#line 238
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table35.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table35.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table35.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table35.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 239
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table35, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table36.AddRow(new string[] {
                        "DateOfTermination",
                        "2018-07-20T21:45:00Z"});
            table36.AddRow(new string[] {
                        "ReasonForTermination",
                        "99"});
#line 245
  testRunner.When("I patch \"Customers\" with the following details:", ((string)(null)), table36, "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table37.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        ""});
            table37.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
#line 249
  testRunner.And("I patch the following:", ((string)(null)), table37, "And ");
#line 253
  testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer is terminated with reason 3 - Duplicate, patch to Claimed date and Effec" +
            "tive date is received")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void CustomerIsTerminatedWithReason3_DuplicatePatchToClaimedDateAndEffectiveDateIsReceived()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer is terminated with reason 3 - Duplicate, patch to Claimed date and Effec" +
                    "tive date is received", null, new string[] {
                        "outcomes"});
#line 256
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table38.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table38.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table38.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table38.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 257
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table38, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table39.AddRow(new string[] {
                        "DateOfTermination",
                        "2018-07-20T21:45:00Z"});
            table39.AddRow(new string[] {
                        "ReasonForTermination",
                        "3"});
#line 263
  testRunner.When("I patch \"Customers\" with the following details:", ((string)(null)), table39, "When ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table40.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        ""});
            table40.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
#line 267
  testRunner.And("I patch the following:", ((string)(null)), table40, "And ");
#line 271
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table41.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table41.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
            table41.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        ""});
#line 272
  testRunner.And("the response body should contain:", ((string)(null)), table41, "And ");
#line 277
  testRunner.And("there should be a record in the outcomes ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
  testRunner.And("there should be a record in the outcomes-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer is terminated with reason 3 - Duplicate, patch to Claimed date is receiv" +
            "ed")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void CustomerIsTerminatedWithReason3_DuplicatePatchToClaimedDateIsReceived()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer is terminated with reason 3 - Duplicate, patch to Claimed date is receiv" +
                    "ed", null, new string[] {
                        "outcomes"});
#line 281
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table42.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table42.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table42.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table42.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 282
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table42, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table43.AddRow(new string[] {
                        "DateOfTermination",
                        "2018-07-20T21:45:00Z"});
            table43.AddRow(new string[] {
                        "ReasonForTermination",
                        "3"});
#line 288
  testRunner.When("I patch \"Customers\" with the following details:", ((string)(null)), table43, "When ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table44.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
#line 292
  testRunner.And("I patch the following:", ((string)(null)), table44, "And ");
#line 295
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table45.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table45.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
#line 296
  testRunner.And("the response body should contain:", ((string)(null)), table45, "And ");
#line 300
  testRunner.And("there should be a record in the outcomes ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 301
  testRunner.And("there should be a record in the outcomes-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer is terminated with reason 3 - Duplicate, patch to Effective date is rece" +
            "ived")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void CustomerIsTerminatedWithReason3_DuplicatePatchToEffectiveDateIsReceived()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer is terminated with reason 3 - Duplicate, patch to Effective date is rece" +
                    "ived", null, new string[] {
                        "outcomes"});
#line 304
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table46.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table46.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table46.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table46.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 305
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table46, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table47.AddRow(new string[] {
                        "DateOfTermination",
                        "2018-07-20T21:45:00Z"});
            table47.AddRow(new string[] {
                        "ReasonForTermination",
                        "3"});
#line 311
  testRunner.When("I patch \"Customers\" with the following details:", ((string)(null)), table47, "When ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table48.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        ""});
#line 315
  testRunner.And("I patch the following:", ((string)(null)), table48, "And ");
#line 318
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer is terminated with reason 3 - Duplicate, patch to ClaimedPriorityGroup i" +
            "s received")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void CustomerIsTerminatedWithReason3_DuplicatePatchToClaimedPriorityGroupIsReceived()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer is terminated with reason 3 - Duplicate, patch to ClaimedPriorityGroup i" +
                    "s received", null, new string[] {
                        "outcomes"});
#line 321
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table49.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table49.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table49.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table49.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 322
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table49, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table50.AddRow(new string[] {
                        "DateOfTermination",
                        "2018-07-20T21:45:00Z"});
            table50.AddRow(new string[] {
                        "ReasonForTermination",
                        "3"});
#line 328
  testRunner.When("I patch \"Customers\" with the following details:", ((string)(null)), table50, "When ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table51.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "1"});
#line 332
  testRunner.And("I patch the following:", ((string)(null)), table51, "And ");
#line 335
  testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 336
  testRunner.And("the error message should be \"Duplicate Customer: This resource is read only. You " +
                    "may only remove values for Outcome Claimed and Effective date\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer is terminated with reason 3 - Duplicate, patch to OutcomeType is receive" +
            "d")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void CustomerIsTerminatedWithReason3_DuplicatePatchToOutcomeTypeIsReceived()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer is terminated with reason 3 - Duplicate, patch to OutcomeType is receive" +
                    "d", null, new string[] {
                        "outcomes"});
#line 339
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table52.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table52.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table52.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table52.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 340
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table52, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table53.AddRow(new string[] {
                        "DateOfTermination",
                        "2018-07-20T21:45:00Z"});
            table53.AddRow(new string[] {
                        "ReasonForTermination",
                        "3"});
#line 346
  testRunner.When("I patch \"Customers\" with the following details:", ((string)(null)), table53, "When ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table54.AddRow(new string[] {
                        "OutcomeType",
                        "1"});
#line 350
  testRunner.And("I patch the following:", ((string)(null)), table54, "And ");
#line 353
  testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 354
  testRunner.And("the error message should be \"Duplicate Customer: This resource is read only. You " +
                    "may only remove values for Outcome Claimed and Effective date\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer is terminated with reason 3 - Duplicate, patch Dates and invalid element" +
            ": OutcomeType is received")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void CustomerIsTerminatedWithReason3_DuplicatePatchDatesAndInvalidElementOutcomeTypeIsReceived()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer is terminated with reason 3 - Duplicate, patch Dates and invalid element" +
                    ": OutcomeType is received", null, new string[] {
                        "outcomes"});
#line 357
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table55.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table55.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table55.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table55.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 358
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table55, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table56.AddRow(new string[] {
                        "DateOfTermination",
                        "2018-07-20T21:45:00Z"});
            table56.AddRow(new string[] {
                        "ReasonForTermination",
                        "3"});
#line 364
  testRunner.When("I patch \"Customers\" with the following details:", ((string)(null)), table56, "When ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table57.AddRow(new string[] {
                        "OutcomeType",
                        "1"});
            table57.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        ""});
            table57.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
#line 368
  testRunner.And("I patch the following:", ((string)(null)), table57, "And ");
#line 373
  testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 374
  testRunner.And("the error message should be \"Duplicate Customer: This resource is read only. You " +
                    "may only remove values for Outcome Claimed and Effective date\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer is terminated with reason 3 - Duplicate, patch Dates and invalid element" +
            ": ClaimedPriorityGroup is received")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void CustomerIsTerminatedWithReason3_DuplicatePatchDatesAndInvalidElementClaimedPriorityGroupIsReceived()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer is terminated with reason 3 - Duplicate, patch Dates and invalid element" +
                    ": ClaimedPriorityGroup is received", null, new string[] {
                        "outcomes"});
#line 377
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table58.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table58.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table58.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table58.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 378
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table58, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table59.AddRow(new string[] {
                        "DateOfTermination",
                        "2018-07-20T21:45:00Z"});
            table59.AddRow(new string[] {
                        "ReasonForTermination",
                        "3"});
#line 384
  testRunner.When("I patch \"Customers\" with the following details:", ((string)(null)), table59, "When ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table60.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "1"});
            table60.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        ""});
            table60.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
#line 388
  testRunner.And("I patch the following:", ((string)(null)), table60, "And ");
#line 393
  testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 394
  testRunner.And("the error message should be \"Duplicate Customer: This resource is read only. You " +
                    "may only remove values for Outcome Claimed and Effective date\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer is terminated with reason 3 - Duplicate, patch Dates and invalid element" +
            ": LastModifiedDate is received")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void CustomerIsTerminatedWithReason3_DuplicatePatchDatesAndInvalidElementLastModifiedDateIsReceived()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer is terminated with reason 3 - Duplicate, patch Dates and invalid element" +
                    ": LastModifiedDate is received", null, new string[] {
                        "outcomes"});
#line 397
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table61.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table61.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table61.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table61.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 398
  testRunner.Given("I post an outcome with the following details:", ((string)(null)), table61, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table62.AddRow(new string[] {
                        "DateOfTermination",
                        "2018-07-20T21:45:00Z"});
            table62.AddRow(new string[] {
                        "ReasonForTermination",
                        "3"});
#line 404
  testRunner.When("I patch \"Customers\" with the following details:", ((string)(null)), table62, "When ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table63.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-07-20T21:45:00Z"});
            table63.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        ""});
            table63.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
#line 408
  testRunner.And("I patch the following:", ((string)(null)), table63, "And ");
#line 413
  testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 414
  testRunner.And("the error message should be \"Duplicate Customer: This resource is read only. You " +
                    "may only remove values for Outcome Claimed and Effective date\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch to outcome received from another touchpoint")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void PatchToOutcomeReceivedFromAnotherTouchpoint()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch to outcome received from another touchpoint", null, new string[] {
                        "outcomes"});
#line 417
    this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table64.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table64.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table64.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table64.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
            table64.AddRow(new string[] {
                        "TouchpointId",
                        "1234567890"});
#line 419
     testRunner.Given("I post an outcome with the following details:", ((string)(null)), table64, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table65.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
#line 426
  testRunner.When("I patch the following via a different touchpoint", ((string)(null)), table65, "When ");
#line 429
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table66.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table66.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        ""});
            table66.AddRow(new string[] {
                        "TouchpointId",
                        "9000000001"});
            table66.AddRow(new string[] {
                        "LastModifiedTouchpointId",
                        "9111111111"});
#line 430
  testRunner.And("the response body should contain:", ((string)(null)), table66, "And ");
#line 436
  testRunner.And("there should be a record in the outcomes ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 437
  testRunner.And("there should be a record in the outcomes-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TouchpointId is patched to a new value in requeset body")]
        [NUnit.Framework.CategoryAttribute("outcomes")]
        public virtual void TouchpointIdIsPatchedToANewValueInRequesetBody()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TouchpointId is patched to a new value in requeset body", null, new string[] {
                        "outcomes"});
#line 440
    this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table67.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table67.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table67.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table67.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
#line 442
     testRunner.Given("I post an outcome with the following details:", ((string)(null)), table67, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table68.AddRow(new string[] {
                        "TouchpointId",
                        "1234567890"});
#line 448
     testRunner.When("I patch the following:", ((string)(null)), table68, "When ");
#line 451
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table69.AddRow(new string[] {
                        "OutcomeType",
                        "3"});
            table69.AddRow(new string[] {
                        "OutcomeEffectiveDate",
                        "2018-07-20T21:45:00Z"});
            table69.AddRow(new string[] {
                        "OutcomeClaimedDate",
                        "2018-07-20T21:45:00Z"});
            table69.AddRow(new string[] {
                        "ClaimedPriorityGroup",
                        "99"});
            table69.AddRow(new string[] {
                        "TouchpointId",
                        "1234567890"});
            table69.AddRow(new string[] {
                        "LastModifiedTouchpointId",
                        "9000000001"});
#line 452
  testRunner.And("the response body should contain:", ((string)(null)), table69, "And ");
#line 460
  testRunner.And("there should be a record in the outcomes ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 461
  testRunner.And("there should be a record in the outcomes-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

