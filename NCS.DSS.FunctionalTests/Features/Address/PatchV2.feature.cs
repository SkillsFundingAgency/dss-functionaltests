// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Address
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressPatchV2")]
    public partial class AddressPatchV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Address", "AddressPatchV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table272.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table272.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table272, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address1 (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PatchAddress1V2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses",
                    "smoke",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address1 (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table273.AddRow(new string[] {
                            "Address1",
                            "1"});
                table273.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table273.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table273.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table273.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table273.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table273.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table273.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table273.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table273.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table273.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 11
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table273, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table274.AddRow(new string[] {
                            "Address1",
                            "2"});
#line 25
 testRunner.When("I patch the following Address V2:", ((string)(null)), table274, "When ");
#line hidden
#line 28
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table275.AddRow(new string[] {
                            "Address1",
                            "2"});
                table275.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table275.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table275.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table275.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table275.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table275.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table275.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table275.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table275.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table275.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 29
 testRunner.And("the response body should contain:", ((string)(null)), table275, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address2 (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress2V2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address2 (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table276.AddRow(new string[] {
                            "Address1",
                            "1"});
                table276.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table276.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table276.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table276.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table276.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table276.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table276.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table276.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table276.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table276.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 47
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table276, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table277.AddRow(new string[] {
                            "Address2",
                            "Changed"});
#line 61
 testRunner.When("I patch the following Address V2:", ((string)(null)), table277, "When ");
#line hidden
#line 64
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table278.AddRow(new string[] {
                            "Address1",
                            "1"});
                table278.AddRow(new string[] {
                            "Address2",
                            "Changed"});
                table278.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table278.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table278.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table278.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table278.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table278.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table278.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table278.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table278.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 65
 testRunner.And("the response body should contain:", ((string)(null)), table278, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address3 (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress3V2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address3 (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table279.AddRow(new string[] {
                            "Address1",
                            "1"});
                table279.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table279.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table279.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table279.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table279.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table279.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table279.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table279.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table279.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table279.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 83
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table279, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table280.AddRow(new string[] {
                            "Address3",
                            "Changed"});
#line 97
 testRunner.When("I patch the following Address V2:", ((string)(null)), table280, "When ");
#line hidden
#line 100
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table281.AddRow(new string[] {
                            "Address1",
                            "1"});
                table281.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table281.AddRow(new string[] {
                            "Address3",
                            "Changed"});
                table281.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table281.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table281.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table281.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table281.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table281.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table281.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table281.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 101
 testRunner.And("the response body should contain:", ((string)(null)), table281, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address4 (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress4V2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address4 (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table282.AddRow(new string[] {
                            "Address1",
                            "1"});
                table282.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table282.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table282.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table282.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table282.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table282.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table282.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table282.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table282.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table282.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 119
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table282, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table283.AddRow(new string[] {
                            "Address4",
                            "Changed"});
#line 133
 testRunner.When("I patch the following Address V2:", ((string)(null)), table283, "When ");
#line hidden
#line 136
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table284.AddRow(new string[] {
                            "Address1",
                            "1"});
                table284.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table284.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table284.AddRow(new string[] {
                            "Address4",
                            "Changed"});
                table284.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table284.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table284.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table284.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table284.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table284.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table284.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 137
 testRunner.And("the response body should contain:", ((string)(null)), table284, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address5 (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress5V2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address5 (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table285.AddRow(new string[] {
                            "Address1",
                            "1"});
                table285.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table285.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table285.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table285.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table285.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table285.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table285.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table285.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table285.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table285.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 155
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table285, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table286.AddRow(new string[] {
                            "Address5",
                            "Changed"});
#line 169
 testRunner.When("I patch the following Address V2:", ((string)(null)), table286, "When ");
#line hidden
#line 172
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table287.AddRow(new string[] {
                            "Address1",
                            "1"});
                table287.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table287.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table287.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table287.AddRow(new string[] {
                            "Address5",
                            "Changed"});
                table287.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table287.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table287.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table287.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table287.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table287.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 173
 testRunner.And("the response body should contain:", ((string)(null)), table287, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PostCode (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchPostCodeV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PostCode (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 190
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table288.AddRow(new string[] {
                            "Address1",
                            "1"});
                table288.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table288.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table288.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table288.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table288.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table288.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table288.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table288.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table288.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table288.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 191
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table288, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table289.AddRow(new string[] {
                            "PostCode",
                            "B168FN"});
#line 205
 testRunner.When("I patch the following Address V2:", ((string)(null)), table289, "When ");
#line hidden
#line 208
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table290.AddRow(new string[] {
                            "Address1",
                            "1"});
                table290.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table290.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table290.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table290.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table290.AddRow(new string[] {
                            "PostCode",
                            "B168FN"});
                table290.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table290.AddRow(new string[] {
                            "Longitude",
                            "-1.91864"});
                table290.AddRow(new string[] {
                            "Latitude",
                            "52.47667"});
                table290.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table290.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 209
 testRunner.And("the response body should contain:", ((string)(null)), table290, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch AlternativePostCode (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAlternativePostCodeV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch AlternativePostCode (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 226
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table291.AddRow(new string[] {
                            "Address1",
                            "1"});
                table291.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table291.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table291.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table291.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table291.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table291.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table291.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table291.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table291.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table291.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 227
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table291, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table292.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WW"});
#line 241
 testRunner.When("I patch the following Address V2:", ((string)(null)), table292, "When ");
#line hidden
#line 244
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table293.AddRow(new string[] {
                            "Address1",
                            "1"});
                table293.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table293.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table293.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table293.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table293.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table293.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WW"});
                table293.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table293.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table293.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table293.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 245
 testRunner.And("the response body should contain:", ((string)(null)), table293, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Longitude (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchLongitudeV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Longitude (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 262
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table294.AddRow(new string[] {
                            "Address1",
                            "1"});
                table294.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table294.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table294.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table294.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table294.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table294.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table294.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table294.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table294.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table294.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 263
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table294, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table295.AddRow(new string[] {
                            "Longitude",
                            "-98.50813"});
#line 277
 testRunner.When("I patch the following Address V2:", ((string)(null)), table295, "When ");
#line hidden
#line 280
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table296.AddRow(new string[] {
                            "Address1",
                            "1"});
                table296.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table296.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table296.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table296.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table296.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table296.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table296.AddRow(new string[] {
                            "Longitude",
                            "-98.50813"});
                table296.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table296.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table296.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 281
 testRunner.And("the response body should contain:", ((string)(null)), table296, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Latitude (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchLatitudeV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Latitude (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 298
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table297.AddRow(new string[] {
                            "Address1",
                            "1"});
                table297.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table297.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table297.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table297.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table297.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table297.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table297.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table297.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table297.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table297.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 299
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table297, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table298.AddRow(new string[] {
                            "Latitude",
                            "52.40122"});
#line 313
 testRunner.When("I patch the following Address V2:", ((string)(null)), table298, "When ");
#line hidden
#line 316
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table299.AddRow(new string[] {
                            "Address1",
                            "1"});
                table299.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table299.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table299.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table299.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table299.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table299.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table299.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table299.AddRow(new string[] {
                            "Latitude",
                            "52.40122"});
                table299.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table299.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 317
 testRunner.And("the response body should contain:", ((string)(null)), table299, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EffectiveFrom (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchEffectiveFromV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EffectiveFrom (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 334
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table300 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table300.AddRow(new string[] {
                            "Address1",
                            "1"});
                table300.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table300.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table300.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table300.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table300.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table300.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table300.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table300.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table300.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table300.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 335
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table300, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table301 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table301.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:02:00Z"});
#line 349
 testRunner.When("I patch the following Address V2:", ((string)(null)), table301, "When ");
#line hidden
#line 352
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table302.AddRow(new string[] {
                            "Address1",
                            "1"});
                table302.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table302.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table302.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table302.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table302.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table302.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table302.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table302.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table302.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:02:00Z"});
                table302.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 353
 testRunner.And("the response body should contain:", ((string)(null)), table302, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EffectiveTo (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchEffectiveToV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EffectiveTo (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 370
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table303 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table303.AddRow(new string[] {
                            "Address1",
                            "1"});
                table303.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table303.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table303.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table303.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table303.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table303.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table303.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table303.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table303.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table303.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 371
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table303, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table304 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table304.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:13:00Z"});
#line 384
 testRunner.When("I patch the following Address V2:", ((string)(null)), table304, "When ");
#line hidden
#line 387
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table305 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table305.AddRow(new string[] {
                            "Address1",
                            "1"});
                table305.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table305.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table305.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table305.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table305.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table305.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table305.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table305.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table305.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table305.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:13:00Z"});
#line 388
 testRunner.And("the response body should contain:", ((string)(null)), table305, "And ");
#line hidden
#line 401
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 402
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 403
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
