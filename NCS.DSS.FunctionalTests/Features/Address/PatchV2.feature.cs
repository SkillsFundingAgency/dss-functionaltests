// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Address
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressPatchV2")]
    public partial class AddressPatchV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Address", "AddressPatchV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table125.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table125.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
            table125.AddRow(new string[] {
                        "PriorityGroups",
                        "1,3"});
#line 4
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table125, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address1 (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PatchAddress1V2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses",
                    "smoke",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address1 (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table126.AddRow(new string[] {
                            "Address1",
                            "1"});
                table126.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table126.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table126.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table126.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table126.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table126.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table126.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table126.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table126.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table126.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 12
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table126, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table127.AddRow(new string[] {
                            "Address1",
                            "2"});
                table127.AddRow(new string[] {
                            "Address2",
                            "Changed2"});
                table127.AddRow(new string[] {
                            "Address3",
                            "Changed3"});
                table127.AddRow(new string[] {
                            "Address4",
                            "Changed4"});
                table127.AddRow(new string[] {
                            "Address5",
                            "Changed5"});
#line 25
 testRunner.When("I patch the following Address V2:", ((string)(null)), table127, "When ");
#line hidden
#line 32
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table128.AddRow(new string[] {
                            "Address1",
                            "2"});
                table128.AddRow(new string[] {
                            "Address2",
                            "Changed2"});
                table128.AddRow(new string[] {
                            "Address3",
                            "Changed3"});
                table128.AddRow(new string[] {
                            "Address4",
                            "Changed4"});
                table128.AddRow(new string[] {
                            "Address5",
                            "Changed5"});
                table128.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table128.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table128.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table128.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table128.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table128.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 33
 testRunner.And("the response body should contain:", ((string)(null)), table128, "And ");
#line hidden
#line 46
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PostCode (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchPostCodeV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PostCode (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table129.AddRow(new string[] {
                            "Address1",
                            "1"});
                table129.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table129.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table129.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table129.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table129.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table129.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table129.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table129.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table129.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table129.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 53
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table129, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table130.AddRow(new string[] {
                            "PostCode",
                            "NW22WW"});
#line 66
 testRunner.When("I patch the following Address V2:", ((string)(null)), table130, "When ");
#line hidden
#line 69
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table131.AddRow(new string[] {
                            "Address1",
                            "1"});
                table131.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table131.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table131.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table131.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table131.AddRow(new string[] {
                            "PostCode",
                            "NW22WW"});
                table131.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table131.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table131.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table131.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table131.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 70
 testRunner.And("the response body should contain:", ((string)(null)), table131, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch AlternativePostCode (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAlternativePostCodeV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch AlternativePostCode (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table132.AddRow(new string[] {
                            "Address1",
                            "1"});
                table132.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table132.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table132.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table132.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table132.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table132.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table132.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table132.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table132.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table132.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 86
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table132, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table133.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WW"});
#line 99
 testRunner.When("I patch the following Address V2:", ((string)(null)), table133, "When ");
#line hidden
#line 102
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table134.AddRow(new string[] {
                            "Address1",
                            "1"});
                table134.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table134.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table134.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table134.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table134.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table134.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WW"});
                table134.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table134.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table134.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table134.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 103
 testRunner.And("the response body should contain:", ((string)(null)), table134, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Longitude (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchLongitudeV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Longitude (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table135.AddRow(new string[] {
                            "Address1",
                            "1"});
                table135.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table135.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table135.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table135.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table135.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table135.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table135.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table135.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table135.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table135.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 119
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table135, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table136.AddRow(new string[] {
                            "Longitude",
                            "-98.50813"});
#line 132
 testRunner.When("I patch the following Address V2:", ((string)(null)), table136, "When ");
#line hidden
#line 135
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table137.AddRow(new string[] {
                            "Address1",
                            "1"});
                table137.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table137.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table137.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table137.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table137.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table137.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table137.AddRow(new string[] {
                            "Longitude",
                            "-98.50813"});
                table137.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table137.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table137.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 136
 testRunner.And("the response body should contain:", ((string)(null)), table137, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Latitude (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchLatitudeV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Latitude (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table138.AddRow(new string[] {
                            "Address1",
                            "1"});
                table138.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table138.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table138.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table138.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table138.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table138.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table138.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table138.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table138.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table138.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 152
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table138, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table139.AddRow(new string[] {
                            "Latitude",
                            "52.40122"});
#line 165
 testRunner.When("I patch the following Address V2:", ((string)(null)), table139, "When ");
#line hidden
#line 168
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table140.AddRow(new string[] {
                            "Address1",
                            "1"});
                table140.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table140.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table140.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table140.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table140.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table140.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table140.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table140.AddRow(new string[] {
                            "Latitude",
                            "52.40122"});
                table140.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table140.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 169
 testRunner.And("the response body should contain:", ((string)(null)), table140, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EffectiveFrom (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchEffectiveFromV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EffectiveFrom (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 184
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table141.AddRow(new string[] {
                            "Address1",
                            "1"});
                table141.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table141.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table141.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table141.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table141.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table141.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table141.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table141.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table141.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table141.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 185
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table141, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table142.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:02:00Z"});
#line 198
 testRunner.When("I patch the following Address V2:", ((string)(null)), table142, "When ");
#line hidden
#line 201
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table143.AddRow(new string[] {
                            "Address1",
                            "1"});
                table143.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table143.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table143.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table143.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table143.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table143.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table143.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table143.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table143.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:02:00Z"});
                table143.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 202
 testRunner.And("the response body should contain:", ((string)(null)), table143, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EffectiveTo (V2)")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchEffectiveToV2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EffectiveTo (V2)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 217
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table144.AddRow(new string[] {
                            "Address1",
                            "1"});
                table144.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table144.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table144.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table144.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table144.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table144.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table144.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table144.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table144.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table144.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 218
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table144, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table145.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:13:00Z"});
#line 231
 testRunner.When("I patch the following Address V2:", ((string)(null)), table145, "When ");
#line hidden
#line 234
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table146.AddRow(new string[] {
                            "Address1",
                            "1"});
                table146.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table146.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table146.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table146.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table146.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table146.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table146.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table146.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table146.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table146.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:13:00Z"});
#line 235
 testRunner.And("the response body should contain:", ((string)(null)), table146, "And ");
#line hidden
#line 248
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 250
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
