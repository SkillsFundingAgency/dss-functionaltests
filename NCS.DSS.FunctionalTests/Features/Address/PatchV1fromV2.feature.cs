// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Address
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PatchV1fromV2")]
    [NUnit.Framework.CategoryAttribute("postV1")]
    [NUnit.Framework.CategoryAttribute("patchV2")]
    public partial class PatchV1FromV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PatchV1fromV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PatchV1fromV2", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV1",
                        "patchV2"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
 #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table1.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 9
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address1")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address1", null, new string[] {
                        "addresses"});
#line 15
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Address1",
                        "1"});
            table2.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table2.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table2.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table2.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table2.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table2.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table2.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table2.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table2.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table2.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table2.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 16
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Address1",
                        "2"});
#line 30
  testRunner.When("I patch the following:", ((string)(null)), table3, "When ");
#line 33
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Address1",
                        "2"});
            table4.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table4.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table4.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table4.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table4.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table4.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table4.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table4.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table4.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table4.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
#line 34
  testRunner.And("the response body should contain:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address1 with SubcontractorId")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PatchAddress1WithSubcontractorId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address1 with SubcontractorId", null, new string[] {
                        "addresses",
                        "subcontractorId"});
#line 50
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Address1",
                        "1"});
            table5.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table5.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table5.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table5.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table5.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table5.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table5.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table5.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table5.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table5.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table5.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 51
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Address1",
                        "2"});
#line 65
  testRunner.When("I patch the following:", ((string)(null)), table6, "When ");
#line 68
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Address1",
                        "2"});
            table7.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table7.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table7.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table7.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table7.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table7.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table7.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table7.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table7.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table7.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
#line 69
  testRunner.And("the response body should contain:", ((string)(null)), table7, "And ");
#line 82
  testRunner.And("the response body should contain the SubContractorId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address2")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address2", null, new string[] {
                        "addresses"});
#line 87
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "Address1",
                        "1"});
            table8.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table8.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table8.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table8.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table8.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table8.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table8.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table8.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table8.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table8.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table8.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 88
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "Address2",
                        "Changed"});
#line 102
   testRunner.When("I patch the following:", ((string)(null)), table9, "When ");
#line 105
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "Address1",
                        "1"});
            table10.AddRow(new string[] {
                        "Address2",
                        "Changed"});
            table10.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table10.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table10.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table10.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table10.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table10.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table10.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table10.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table10.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
#line 106
  testRunner.And("the response body should contain:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address3")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address3", null, new string[] {
                        "addresses"});
#line 121
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "Address1",
                        "1"});
            table11.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table11.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table11.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table11.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table11.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table11.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table11.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table11.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table11.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table11.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table11.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 122
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "Address3",
                        "Changed"});
#line 136
   testRunner.When("I patch the following:", ((string)(null)), table12, "When ");
#line 139
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "Address1",
                        "1"});
            table13.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table13.AddRow(new string[] {
                        "Address3",
                        "Changed"});
            table13.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table13.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table13.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table13.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table13.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table13.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table13.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table13.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
#line 140
  testRunner.And("the response body should contain:", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address4")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress4()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address4", null, new string[] {
                        "addresses"});
#line 155
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "Address1",
                        "1"});
            table14.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table14.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table14.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table14.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table14.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table14.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table14.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table14.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table14.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table14.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table14.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 156
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "Address4",
                        "Changed"});
#line 170
   testRunner.When("I patch the following:", ((string)(null)), table15, "When ");
#line 173
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "Address1",
                        "1"});
            table16.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table16.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table16.AddRow(new string[] {
                        "Address4",
                        "Changed"});
            table16.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table16.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table16.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table16.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table16.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table16.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table16.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
#line 174
  testRunner.And("the response body should contain:", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address5")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address5", null, new string[] {
                        "addresses"});
#line 190
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "Address1",
                        "1"});
            table17.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table17.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table17.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table17.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table17.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table17.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table17.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table17.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table17.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table17.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table17.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 191
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table17, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "Address5",
                        "Changed"});
#line 205
   testRunner.When("I patch the following:", ((string)(null)), table18, "When ");
#line 208
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "Address1",
                        "1"});
            table19.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table19.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table19.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table19.AddRow(new string[] {
                        "Address5",
                        "Changed"});
            table19.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table19.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table19.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table19.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table19.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table19.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
#line 209
  testRunner.And("the response body should contain:", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PostCode")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchPostCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PostCode", null, new string[] {
                        "addresses"});
#line 224
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "Address1",
                        "1"});
            table20.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table20.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table20.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table20.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table20.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table20.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table20.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table20.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table20.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table20.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table20.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 225
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "PostCode",
                        "NW11WW"});
#line 239
   testRunner.When("I patch the following:", ((string)(null)), table21, "When ");
#line 242
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "Address1",
                        "1"});
            table22.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table22.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table22.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table22.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table22.AddRow(new string[] {
                        "PostCode",
                        "NW11WW"});
            table22.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table22.AddRow(new string[] {
                        "Longitude",
                        "-0.13426"});
            table22.AddRow(new string[] {
                        "Latitude",
                        "51.53494"});
            table22.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table22.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
#line 243
  testRunner.And("the response body should contain:", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch AlternativePostCode")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAlternativePostCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch AlternativePostCode", null, new string[] {
                        "addresses"});
#line 258
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "Address1",
                        "1"});
            table23.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table23.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table23.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table23.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table23.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table23.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table23.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table23.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table23.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table23.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table23.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 259
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table23, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WW"});
#line 273
   testRunner.When("I patch the following:", ((string)(null)), table24, "When ");
#line 276
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "Address1",
                        "1"});
            table25.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table25.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table25.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table25.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table25.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table25.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WW"});
            table25.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table25.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table25.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table25.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
#line 277
  testRunner.And("the response body should contain:", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Longitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchLongitude()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Longitude", null, new string[] {
                        "addresses"});
#line 292
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "Address1",
                        "1"});
            table26.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table26.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table26.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table26.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table26.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table26.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table26.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table26.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table26.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table26.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table26.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 293
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table26, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table27.AddRow(new string[] {
                        "Longitude",
                        "-98.50813"});
#line 307
   testRunner.When("I patch the following:", ((string)(null)), table27, "When ");
#line 310
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "Address1",
                        "1"});
            table28.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table28.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table28.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table28.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table28.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table28.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table28.AddRow(new string[] {
                        "Longitude",
                        "-98.50813"});
            table28.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table28.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table28.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
#line 311
  testRunner.And("the response body should contain:", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Latitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchLatitude()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Latitude", null, new string[] {
                        "addresses"});
#line 327
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table29.AddRow(new string[] {
                        "Address1",
                        "1"});
            table29.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table29.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table29.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table29.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table29.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table29.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table29.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table29.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table29.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table29.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table29.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 328
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table29, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table30.AddRow(new string[] {
                        "Latitude",
                        "52.40122"});
#line 342
   testRunner.When("I patch the following:", ((string)(null)), table30, "When ");
#line 345
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "Address1",
                        "1"});
            table31.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table31.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table31.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table31.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table31.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table31.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table31.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table31.AddRow(new string[] {
                        "Latitude",
                        "52.40122"});
            table31.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table31.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
#line 346
  testRunner.And("the response body should contain:", ((string)(null)), table31, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EffectiveFrom")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchEffectiveFrom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EffectiveFrom", null, new string[] {
                        "addresses"});
#line 361
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table32.AddRow(new string[] {
                        "Address1",
                        "1"});
            table32.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table32.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table32.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table32.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table32.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table32.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table32.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table32.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table32.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table32.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table32.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 362
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table32, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table33.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:02:00Z"});
#line 376
   testRunner.When("I patch the following:", ((string)(null)), table33, "When ");
#line 379
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table34.AddRow(new string[] {
                        "Address1",
                        "1"});
            table34.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table34.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table34.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table34.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table34.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table34.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table34.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table34.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table34.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:02:00Z"});
            table34.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
#line 380
  testRunner.And("the response body should contain:", ((string)(null)), table34, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EffectiveTo")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchEffectiveTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EffectiveTo", null, new string[] {
                        "addresses"});
#line 395
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table35.AddRow(new string[] {
                        "Address1",
                        "1"});
            table35.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table35.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table35.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table35.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table35.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table35.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table35.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table35.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table35.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table35.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table35.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 396
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table35, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table36.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:13:00Z"});
#line 410
   testRunner.When("I patch the following:", ((string)(null)), table36, "When ");
#line 413
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table37.AddRow(new string[] {
                        "Address1",
                        "1"});
            table37.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table37.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table37.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table37.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table37.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table37.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table37.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table37.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table37.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table37.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:13:00Z"});
#line 414
  testRunner.And("the response body should contain:", ((string)(null)), table37, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

