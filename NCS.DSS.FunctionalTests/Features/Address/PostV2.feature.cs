// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Address
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressPostV2")]
    public partial class AddressPostV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Address", "AddressPostV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table253.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table253.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table253, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid address")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostValidAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table254.AddRow(new string[] {
                            "Address1",
                            "1"});
                table254.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table254.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table254.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table254.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table254.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table254.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table254.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table254.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table254.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table254.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table254.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 11
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table254, "Given ");
#line hidden
#line 25
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table255.AddRow(new string[] {
                            "Address1",
                            "1"});
                table255.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table255.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table255.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table255.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table255.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table255.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table255.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table255.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table255.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table255.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table255.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 26
 testRunner.And("the response body should contain:", ((string)(null)), table255, "And ");
#line hidden
#line 41
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid address with Subcontractor Id")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PostValidAddressWithSubcontractorId()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid address with Subcontractor Id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table256.AddRow(new string[] {
                            "Address1",
                            "1"});
                table256.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table256.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table256.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table256.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table256.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table256.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table256.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table256.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table256.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table256.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table256.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 47
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table256, "Given ");
#line hidden
#line 61
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table257.AddRow(new string[] {
                            "Address1",
                            "1"});
                table257.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table257.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table257.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table257.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table257.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table257.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table257.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table257.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table257.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table257.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table257.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 62
 testRunner.And("the response body should contain:", ((string)(null)), table257, "And ");
#line hidden
#line 78
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with only mandatory Fields")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithOnlyMandatoryFields()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with only mandatory Fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table258.AddRow(new string[] {
                            "Address1",
                            "1"});
                table258.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
#line 84
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table258, "Given ");
#line hidden
#line 88
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table259.AddRow(new string[] {
                            "Address1",
                            "1"});
                table259.AddRow(new string[] {
                            "Address2",
                            ""});
                table259.AddRow(new string[] {
                            "Address3",
                            ""});
                table259.AddRow(new string[] {
                            "Address4",
                            ""});
                table259.AddRow(new string[] {
                            "Address5",
                            ""});
                table259.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table259.AddRow(new string[] {
                            "AlternativePostCode",
                            ""});
                table259.AddRow(new string[] {
                            "Longitude",
                            ""});
                table259.AddRow(new string[] {
                            "Latitude",
                            ""});
                table259.AddRow(new string[] {
                            "EffectiveFrom",
                            ""});
                table259.AddRow(new string[] {
                            "EffectiveTo",
                            ""});
#line 89
 testRunner.And("the response body should contain:", ((string)(null)), table259, "And ");
#line hidden
#line 102
 testRunner.And("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with maximum Field lengths")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithMaximumFieldLengths()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with maximum Field lengths", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table260.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table260.AddRow(new string[] {
                            "Address3",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table260.AddRow(new string[] {
                            "Address4",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table260.AddRow(new string[] {
                            "Address5",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table260.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table260.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table260.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table260.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table260.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table260.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table260.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 107
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table260, "Given ");
#line hidden
#line 120
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table261.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table261.AddRow(new string[] {
                            "Address3",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table261.AddRow(new string[] {
                            "Address4",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table261.AddRow(new string[] {
                            "Address5",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table261.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table261.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table261.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table261.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table261.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table261.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table261.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 121
 testRunner.And("the response body should contain:", ((string)(null)), table261, "And ");
#line hidden
#line 134
 testRunner.And("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table262.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table262.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 139
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table262, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table263.AddRow(new string[] {
                            "Address1",
                            "1"});
                table263.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
#line 143
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table263, "Given ");
#line hidden
#line 147
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
 testRunner.And("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode has no space")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeHasNoSpace()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode has no space", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 152
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table264.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table264.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 153
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table264, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table265.AddRow(new string[] {
                            "Address1",
                            "1"});
                table265.AddRow(new string[] {
                            "PostCode",
                            "nn12tx"});
#line 157
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table265, "Given ");
#line hidden
#line 161
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table266.AddRow(new string[] {
                            "Address1",
                            "1"});
                table266.AddRow(new string[] {
                            "PostCode",
                            "nn12tx"});
#line 162
 testRunner.And("the response body should contain:", ((string)(null)), table266, "And ");
#line hidden
#line 166
 testRunner.And("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode has space")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeHasSpace()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode has space", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 170
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table267.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table267.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 171
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table267, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table268.AddRow(new string[] {
                            "Address1",
                            "1"});
                table268.AddRow(new string[] {
                            "PostCode",
                            "nn1 2tx"});
#line 175
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table268, "Given ");
#line hidden
#line 179
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table269.AddRow(new string[] {
                            "Address1",
                            "1"});
                table269.AddRow(new string[] {
                            "PostCode",
                            "nn1 2tx"});
#line 180
 testRunner.And("the response body should contain:", ((string)(null)), table269, "And ");
#line hidden
#line 184
 testRunner.And("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with postcode that maps incorrectly without the CountrySet parameter" +
            " in the geocoding request")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithPostcodeThatMapsIncorrectlyWithoutTheCountrySetParameterInTheGeocodingRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with postcode that maps incorrectly without the CountrySet parameter" +
                    " in the geocoding request", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 188
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table270.AddRow(new string[] {
                            "Address1",
                            "1"});
                table270.AddRow(new string[] {
                            "PostCode",
                            "S41 8SE"});
#line 189
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table270, "Given ");
#line hidden
#line 193
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table271.AddRow(new string[] {
                            "Address1",
                            "1"});
                table271.AddRow(new string[] {
                            "PostCode",
                            "S41 8SE"});
                table271.AddRow(new string[] {
                            "Longitude",
                            "-1.43018"});
                table271.AddRow(new string[] {
                            "Latitude",
                            "53.25289"});
#line 194
 testRunner.And("the response body should contain:", ((string)(null)), table271, "And ");
#line hidden
#line 200
 testRunner.And("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode cannot be geocoded")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeCannotBeGeocoded()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode cannot be geocoded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 204
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table272.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table272.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 205
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table272, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table273.AddRow(new string[] {
                            "Address1",
                            "1"});
                table273.AddRow(new string[] {
                            "PostCode",
                            "ze11 1ef"});
#line 209
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table273, "Given ");
#line hidden
#line 213
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table274.AddRow(new string[] {
                            "Address1",
                            "1"});
                table274.AddRow(new string[] {
                            "PostCode",
                            "ze11 1ef"});
                table274.AddRow(new string[] {
                            "Longitude",
                            ""});
                table274.AddRow(new string[] {
                            "Latitude",
                            ""});
#line 214
 testRunner.And("the response body should contain:", ((string)(null)), table274, "And ");
#line hidden
#line 220
 testRunner.And("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with Address1 Field missing")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithAddress1FieldMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with Address1 Field missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 224
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table275.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table275.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table275.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table275.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table275.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table275.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table275.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table275.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table275.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table275.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table275.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 225
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table275, "Given ");
#line hidden
#line 238
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with Address1 Field over character limit")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithAddress1FieldOverCharacterLimit()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with Address1 Field over character limit", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 241
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table276.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghijA"});
                table276.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table276.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table276.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table276.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table276.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table276.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table276.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table276.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table276.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table276.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table276.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 242
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table276, "Given ");
#line hidden
#line 256
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Address1")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidAddress1()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Address1", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 259
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table277.AddRow(new string[] {
                            "Address1",
                            "1#"});
                table277.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table277.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table277.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table277.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table277.AddRow(new string[] {
                            "PostCode",
                            "AA999AAA"});
                table277.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table277.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table277.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table277.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table277.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table277.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 260
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table277, "Given ");
#line hidden
#line 274
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with PostCode Field missing")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithPostCodeFieldMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with PostCode Field missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 277
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table278.AddRow(new string[] {
                            "Address1",
                            "1"});
                table278.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table278.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table278.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table278.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table278.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table278.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table278.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table278.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table278.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table278.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 278
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table278, "Given ");
#line hidden
#line 291
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid PostCode")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidPostCode()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid PostCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 294
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table279.AddRow(new string[] {
                            "Address1",
                            "1"});
                table279.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table279.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table279.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table279.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table279.AddRow(new string[] {
                            "PostCode",
                            "AA999AAAA"});
                table279.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table279.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table279.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table279.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table279.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table279.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 295
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table279, "Given ");
#line hidden
#line 309
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Longitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidLongitude()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Longitude", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 312
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table280.AddRow(new string[] {
                            "Address1",
                            "1"});
                table280.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table280.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table280.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table280.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table280.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table280.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table280.AddRow(new string[] {
                            "Longitude",
                            "-981.50812"});
                table280.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table280.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table280.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table280.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 313
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table280, "Given ");
#line hidden
#line 327
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Latitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidLatitude()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Latitude", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 330
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table281.AddRow(new string[] {
                            "Address1",
                            "1"});
                table281.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table281.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table281.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table281.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table281.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table281.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table281.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table281.AddRow(new string[] {
                            "Latitude",
                            "521.40100"});
                table281.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table281.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table281.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 331
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table281, "Given ");
#line hidden
#line 345
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Address with invalid EffectiveFrom date")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostValidAddressWithInvalidEffectiveFromDate()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Address with invalid EffectiveFrom date", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 348
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table282.AddRow(new string[] {
                            "Address1",
                            "1"});
                table282.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table282.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table282.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table282.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table282.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table282.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table282.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table282.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table282.AddRow(new string[] {
                            "EffectiveFrom",
                            "2033-06-19T09:01:00Z"});
                table282.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table282.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 349
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table282, "Given ");
#line hidden
#line 363
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
