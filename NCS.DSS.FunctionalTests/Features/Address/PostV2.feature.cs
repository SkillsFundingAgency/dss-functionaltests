// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Address
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressPostV2")]
    public partial class AddressPostV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Address", "AddressPostV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table321 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table321.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table321.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table321, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid address")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostValidAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 11
 testRunner.Given("I want to set the scenario touchPointId header to 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table322 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table322.AddRow(new string[] {
                            "Address1",
                            "1"});
                table322.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table322.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table322.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table322.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table322.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table322.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table322.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table322.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table322.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table322.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table322.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 12
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table322, "Given ");
#line hidden
#line 26
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table323 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table323.AddRow(new string[] {
                            "Address1",
                            "1"});
                table323.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table323.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table323.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table323.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table323.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table323.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table323.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table323.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table323.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table323.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table323.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 27
 testRunner.And("the response body should contain:", ((string)(null)), table323, "And ");
#line hidden
#line 41
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.Given("I fetch a addresses cosmos document from addresses database using key AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.Then("the cosmos document should have property CreatedBy with value 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid address with Subcontractor Id")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PostValidAddressWithSubcontractorId()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid address with Subcontractor Id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 50
 testRunner.Given("I want to set the scenario touchPointId header to 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table324 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table324.AddRow(new string[] {
                            "Address1",
                            "1"});
                table324.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table324.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table324.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table324.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table324.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table324.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table324.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table324.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table324.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table324.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table324.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 51
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table324, "Given ");
#line hidden
#line 65
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table325 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table325.AddRow(new string[] {
                            "Address1",
                            "1"});
                table325.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table325.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table325.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table325.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table325.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table325.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table325.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table325.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table325.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table325.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table325.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 66
 testRunner.And("the response body should contain:", ((string)(null)), table325, "And ");
#line hidden
#line 81
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
 testRunner.Given("I fetch a addresses cosmos document from addresses database using key AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 85
 testRunner.Then("the cosmos document should have property CreatedBy with value 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with only mandatory Fields")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithOnlyMandatoryFields()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with only mandatory Fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table326.AddRow(new string[] {
                            "Address1",
                            "1"});
                table326.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
#line 89
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table326, "Given ");
#line hidden
#line 93
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table327.AddRow(new string[] {
                            "Address1",
                            "1"});
                table327.AddRow(new string[] {
                            "Address2",
                            ""});
                table327.AddRow(new string[] {
                            "Address3",
                            ""});
                table327.AddRow(new string[] {
                            "Address4",
                            ""});
                table327.AddRow(new string[] {
                            "Address5",
                            ""});
                table327.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table327.AddRow(new string[] {
                            "AlternativePostCode",
                            ""});
                table327.AddRow(new string[] {
                            "Longitude",
                            ""});
                table327.AddRow(new string[] {
                            "Latitude",
                            ""});
                table327.AddRow(new string[] {
                            "EffectiveFrom",
                            ""});
                table327.AddRow(new string[] {
                            "EffectiveTo",
                            ""});
#line 94
 testRunner.And("the response body should contain:", ((string)(null)), table327, "And ");
#line hidden
#line 107
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with maximum Field lengths")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithMaximumFieldLengths()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with maximum Field lengths", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table328.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table328.AddRow(new string[] {
                            "Address3",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table328.AddRow(new string[] {
                            "Address4",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table328.AddRow(new string[] {
                            "Address5",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table328.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table328.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table328.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table328.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table328.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table328.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table328.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 112
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table328, "Given ");
#line hidden
#line 125
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table329.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table329.AddRow(new string[] {
                            "Address3",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table329.AddRow(new string[] {
                            "Address4",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table329.AddRow(new string[] {
                            "Address5",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table329.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table329.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table329.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table329.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table329.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table329.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table329.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 126
 testRunner.And("the response body should contain:", ((string)(null)), table329, "And ");
#line hidden
#line 139
 testRunner.Given("I wait for 10 Seconds|", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 140
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table330.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table330.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 144
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table330, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table331.AddRow(new string[] {
                            "Address1",
                            "1"});
                table331.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
#line 148
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table331, "Given ");
#line hidden
#line 152
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 153
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 154
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode has no space")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeHasNoSpace()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode has no space", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 157
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table332.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table332.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 158
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table332, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table333.AddRow(new string[] {
                            "Address1",
                            "1"});
                table333.AddRow(new string[] {
                            "PostCode",
                            "nn12tx"});
#line 162
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table333, "Given ");
#line hidden
#line 166
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table334.AddRow(new string[] {
                            "Address1",
                            "1"});
                table334.AddRow(new string[] {
                            "PostCode",
                            "nn12tx"});
#line 167
 testRunner.And("the response body should contain:", ((string)(null)), table334, "And ");
#line hidden
#line 171
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 172
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode has space")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeHasSpace()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode has space", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 175
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table335.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table335.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 176
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table335, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table336.AddRow(new string[] {
                            "Address1",
                            "1"});
                table336.AddRow(new string[] {
                            "PostCode",
                            "nn1 2tx"});
#line 180
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table336, "Given ");
#line hidden
#line 184
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table337.AddRow(new string[] {
                            "Address1",
                            "1"});
                table337.AddRow(new string[] {
                            "PostCode",
                            "nn1 2tx"});
#line 185
 testRunner.And("the response body should contain:", ((string)(null)), table337, "And ");
#line hidden
#line 189
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 190
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with postcode that maps incorrectly without the CountrySet parameter" +
            " in the geocoding request")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithPostcodeThatMapsIncorrectlyWithoutTheCountrySetParameterInTheGeocodingRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with postcode that maps incorrectly without the CountrySet parameter" +
                    " in the geocoding request", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 193
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table338.AddRow(new string[] {
                            "Address1",
                            "1"});
                table338.AddRow(new string[] {
                            "PostCode",
                            "S41 8SE"});
#line 194
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table338, "Given ");
#line hidden
#line 198
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table339.AddRow(new string[] {
                            "Address1",
                            "1"});
                table339.AddRow(new string[] {
                            "PostCode",
                            "S41 8SE"});
                table339.AddRow(new string[] {
                            "Longitude",
                            "-1.43018"});
                table339.AddRow(new string[] {
                            "Latitude",
                            "53.25289"});
#line 199
 testRunner.And("the response body should contain:", ((string)(null)), table339, "And ");
#line hidden
#line 205
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 206
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode cannot be geocoded")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeCannotBeGeocoded()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode cannot be geocoded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 209
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table340.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table340.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 210
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table340, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table341.AddRow(new string[] {
                            "Address1",
                            "1"});
                table341.AddRow(new string[] {
                            "PostCode",
                            "ze11 1ef"});
#line 214
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table341, "Given ");
#line hidden
#line 218
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table342 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table342.AddRow(new string[] {
                            "Address1",
                            "1"});
                table342.AddRow(new string[] {
                            "PostCode",
                            "ze11 1ef"});
                table342.AddRow(new string[] {
                            "Longitude",
                            ""});
                table342.AddRow(new string[] {
                            "Latitude",
                            ""});
#line 219
 testRunner.And("the response body should contain:", ((string)(null)), table342, "And ");
#line hidden
#line 225
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 226
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with Address1 Field missing")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithAddress1FieldMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with Address1 Field missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 229
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table343 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table343.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table343.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table343.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table343.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table343.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table343.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table343.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table343.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table343.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table343.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table343.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 230
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table343, "Given ");
#line hidden
#line 243
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with Address1 Field over character limit")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithAddress1FieldOverCharacterLimit()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with Address1 Field over character limit", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 246
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table344 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table344.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghijA"});
                table344.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table344.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table344.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table344.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table344.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table344.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table344.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table344.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table344.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table344.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table344.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 247
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table344, "Given ");
#line hidden
#line 261
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Address1")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidAddress1()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Address1", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 264
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table345 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table345.AddRow(new string[] {
                            "Address1",
                            "1#"});
                table345.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table345.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table345.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table345.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table345.AddRow(new string[] {
                            "PostCode",
                            "AA999AAA"});
                table345.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table345.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table345.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table345.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table345.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table345.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 265
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table345, "Given ");
#line hidden
#line 279
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with PostCode Field missing")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithPostCodeFieldMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with PostCode Field missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table346 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table346.AddRow(new string[] {
                            "Address1",
                            "1"});
                table346.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table346.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table346.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table346.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table346.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table346.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table346.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table346.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table346.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table346.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 283
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table346, "Given ");
#line hidden
#line 296
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid PostCode")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidPostCode()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid PostCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 299
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table347 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table347.AddRow(new string[] {
                            "Address1",
                            "1"});
                table347.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table347.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table347.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table347.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table347.AddRow(new string[] {
                            "PostCode",
                            "AA999AAAA"});
                table347.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table347.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table347.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table347.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table347.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table347.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 300
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table347, "Given ");
#line hidden
#line 314
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Longitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidLongitude()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Longitude", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 317
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table348 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table348.AddRow(new string[] {
                            "Address1",
                            "1"});
                table348.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table348.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table348.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table348.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table348.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table348.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table348.AddRow(new string[] {
                            "Longitude",
                            "-981.50812"});
                table348.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table348.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table348.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table348.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 318
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table348, "Given ");
#line hidden
#line 332
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Latitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidLatitude()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Latitude", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 335
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table349 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table349.AddRow(new string[] {
                            "Address1",
                            "1"});
                table349.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table349.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table349.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table349.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table349.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table349.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table349.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table349.AddRow(new string[] {
                            "Latitude",
                            "521.40100"});
                table349.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table349.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table349.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 336
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table349, "Given ");
#line hidden
#line 350
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Address with invalid EffectiveFrom date")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostValidAddressWithInvalidEffectiveFromDate()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Address with invalid EffectiveFrom date", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 353
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table350 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table350.AddRow(new string[] {
                            "Address1",
                            "1"});
                table350.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table350.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table350.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table350.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table350.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table350.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table350.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table350.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table350.AddRow(new string[] {
                            "EffectiveFrom",
                            "2033-06-19T09:01:00Z"});
                table350.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table350.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 354
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table350, "Given ");
#line hidden
#line 368
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
