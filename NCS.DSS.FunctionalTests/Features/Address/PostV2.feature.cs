// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Address
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressPostV2")]
    public partial class AddressPostV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Address", "AddressPostV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table159.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table159.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
            table159.AddRow(new string[] {
                        "PriorityGroups",
                        "1,3"});
#line 4
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table159, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid address")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostValidAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 12
 testRunner.Given("I want to set the scenario touchPointId header to 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table160.AddRow(new string[] {
                            "Address1",
                            "1"});
                table160.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table160.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table160.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table160.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table160.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table160.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table160.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table160.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table160.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table160.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table160.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 13
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table160, "Given ");
#line hidden
#line 27
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table161.AddRow(new string[] {
                            "Address1",
                            "1"});
                table161.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table161.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table161.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table161.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table161.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table161.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table161.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table161.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table161.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table161.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table161.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 28
 testRunner.And("the response body should contain:", ((string)(null)), table161, "And ");
#line hidden
#line 42
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
 testRunner.Given("I fetch a addresses cosmos document from addresses database using key AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
 testRunner.Then("the cosmos document should have property CreatedBy with value 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid address with Subcontractor Id")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PostValidAddressWithSubcontractorId()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid address with Subcontractor Id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 51
 testRunner.Given("I want to set the scenario touchPointId header to 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table162.AddRow(new string[] {
                            "Address1",
                            "1"});
                table162.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table162.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table162.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table162.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table162.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table162.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table162.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table162.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table162.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table162.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table162.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 52
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table162, "Given ");
#line hidden
#line 66
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table163.AddRow(new string[] {
                            "Address1",
                            "1"});
                table163.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table163.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table163.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table163.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table163.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table163.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table163.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table163.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table163.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table163.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table163.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 67
 testRunner.And("the response body should contain:", ((string)(null)), table163, "And ");
#line hidden
#line 82
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 84
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
 testRunner.Given("I fetch a addresses cosmos document from addresses database using key AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
 testRunner.Then("the cosmos document should have property CreatedBy with value 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with only mandatory Fields")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithOnlyMandatoryFields()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with only mandatory Fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table164.AddRow(new string[] {
                            "Address1",
                            "1"});
                table164.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
#line 90
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table164, "Given ");
#line hidden
#line 94
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table165.AddRow(new string[] {
                            "Address1",
                            "1"});
                table165.AddRow(new string[] {
                            "Address2",
                            ""});
                table165.AddRow(new string[] {
                            "Address3",
                            ""});
                table165.AddRow(new string[] {
                            "Address4",
                            ""});
                table165.AddRow(new string[] {
                            "Address5",
                            ""});
                table165.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table165.AddRow(new string[] {
                            "AlternativePostCode",
                            ""});
                table165.AddRow(new string[] {
                            "Longitude",
                            ""});
                table165.AddRow(new string[] {
                            "Latitude",
                            ""});
                table165.AddRow(new string[] {
                            "EffectiveFrom",
                            ""});
                table165.AddRow(new string[] {
                            "EffectiveTo",
                            ""});
#line 95
 testRunner.And("the response body should contain:", ((string)(null)), table165, "And ");
#line hidden
#line 108
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with maximum Field lengths")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithMaximumFieldLengths()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with maximum Field lengths", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table166.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table166.AddRow(new string[] {
                            "Address3",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table166.AddRow(new string[] {
                            "Address4",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table166.AddRow(new string[] {
                            "Address5",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table166.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table166.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table166.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table166.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table166.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table166.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table166.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 113
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table166, "Given ");
#line hidden
#line 126
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table167.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table167.AddRow(new string[] {
                            "Address3",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table167.AddRow(new string[] {
                            "Address4",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table167.AddRow(new string[] {
                            "Address5",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table167.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table167.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table167.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table167.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table167.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table167.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table167.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 127
 testRunner.And("the response body should contain:", ((string)(null)), table167, "And ");
#line hidden
#line 140
 testRunner.Given("I wait for 10 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table168.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table168.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table168.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 145
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table168, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table169.AddRow(new string[] {
                            "Address1",
                            "1"});
                table169.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
#line 150
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table169, "Given ");
#line hidden
#line 154
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 155
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 156
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode has no space")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeHasNoSpace()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode has no space", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 159
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table170.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table170.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table170.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 160
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table170, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table171.AddRow(new string[] {
                            "Address1",
                            "1"});
                table171.AddRow(new string[] {
                            "PostCode",
                            "nn12tx"});
#line 165
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table171, "Given ");
#line hidden
#line 169
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table172.AddRow(new string[] {
                            "Address1",
                            "1"});
                table172.AddRow(new string[] {
                            "PostCode",
                            "nn12tx"});
#line 170
 testRunner.And("the response body should contain:", ((string)(null)), table172, "And ");
#line hidden
#line 174
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 175
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode has space")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeHasSpace()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode has space", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 178
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table173.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table173.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table173.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 179
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table173, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table174.AddRow(new string[] {
                            "Address1",
                            "1"});
                table174.AddRow(new string[] {
                            "PostCode",
                            "nn1 2tx"});
#line 184
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table174, "Given ");
#line hidden
#line 188
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table175.AddRow(new string[] {
                            "Address1",
                            "1"});
                table175.AddRow(new string[] {
                            "PostCode",
                            "nn1 2tx"});
#line 189
 testRunner.And("the response body should contain:", ((string)(null)), table175, "And ");
#line hidden
#line 193
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 194
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with postcode that maps incorrectly without the CountrySet parameter" +
            " in the geocoding request")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithPostcodeThatMapsIncorrectlyWithoutTheCountrySetParameterInTheGeocodingRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with postcode that maps incorrectly without the CountrySet parameter" +
                    " in the geocoding request", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 197
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table176.AddRow(new string[] {
                            "Address1",
                            "1"});
                table176.AddRow(new string[] {
                            "PostCode",
                            "S41 8SE"});
#line 198
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table176, "Given ");
#line hidden
#line 202
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table177.AddRow(new string[] {
                            "Address1",
                            "1"});
                table177.AddRow(new string[] {
                            "PostCode",
                            "S41 8SE"});
                table177.AddRow(new string[] {
                            "Longitude",
                            "-1.43018"});
                table177.AddRow(new string[] {
                            "Latitude",
                            "53.25289"});
#line 203
 testRunner.And("the response body should contain:", ((string)(null)), table177, "And ");
#line hidden
#line 209
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 210
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode cannot be geocoded")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeCannotBeGeocoded()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode cannot be geocoded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table178.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table178.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table178.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 214
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table178, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table179.AddRow(new string[] {
                            "Address1",
                            "1"});
                table179.AddRow(new string[] {
                            "PostCode",
                            "ze11 1ef"});
#line 219
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table179, "Given ");
#line hidden
#line 223
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table180.AddRow(new string[] {
                            "Address1",
                            "1"});
                table180.AddRow(new string[] {
                            "PostCode",
                            "ze11 1ef"});
                table180.AddRow(new string[] {
                            "Longitude",
                            ""});
                table180.AddRow(new string[] {
                            "Latitude",
                            ""});
#line 224
 testRunner.And("the response body should contain:", ((string)(null)), table180, "And ");
#line hidden
#line 230
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 231
 testRunner.Then("there should be a record in the dss-addresses table with AddressId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with Address1 Field missing")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithAddress1FieldMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with Address1 Field missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table181.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table181.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table181.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table181.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table181.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table181.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table181.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table181.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table181.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table181.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table181.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 235
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table181, "Given ");
#line hidden
#line 248
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with Address1 Field over character limit")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithAddress1FieldOverCharacterLimit()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with Address1 Field over character limit", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 251
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table182.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghijA"});
                table182.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table182.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table182.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table182.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table182.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table182.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table182.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table182.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table182.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table182.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table182.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 252
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table182, "Given ");
#line hidden
#line 266
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Address1")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidAddress1()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Address1", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 269
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table183.AddRow(new string[] {
                            "Address1",
                            "1#"});
                table183.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table183.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table183.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table183.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table183.AddRow(new string[] {
                            "PostCode",
                            "AA999AAA"});
                table183.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table183.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table183.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table183.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table183.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table183.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 270
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table183, "Given ");
#line hidden
#line 284
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with PostCode Field missing")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithPostCodeFieldMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with PostCode Field missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 287
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table184.AddRow(new string[] {
                            "Address1",
                            "1"});
                table184.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table184.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table184.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table184.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table184.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table184.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table184.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table184.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table184.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table184.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 288
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table184, "Given ");
#line hidden
#line 301
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid PostCode")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidPostCode()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid PostCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 304
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table185.AddRow(new string[] {
                            "Address1",
                            "1"});
                table185.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table185.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table185.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table185.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table185.AddRow(new string[] {
                            "PostCode",
                            "AA999AAAA"});
                table185.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table185.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table185.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table185.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table185.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table185.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 305
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table185, "Given ");
#line hidden
#line 319
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Longitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidLongitude()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Longitude", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 322
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table186.AddRow(new string[] {
                            "Address1",
                            "1"});
                table186.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table186.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table186.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table186.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table186.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table186.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table186.AddRow(new string[] {
                            "Longitude",
                            "-981.50812"});
                table186.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table186.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table186.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table186.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 323
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table186, "Given ");
#line hidden
#line 337
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Latitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidLatitude()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Latitude", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 340
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table187.AddRow(new string[] {
                            "Address1",
                            "1"});
                table187.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table187.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table187.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table187.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table187.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table187.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table187.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table187.AddRow(new string[] {
                            "Latitude",
                            "521.40100"});
                table187.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table187.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table187.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 341
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table187, "Given ");
#line hidden
#line 355
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Address with invalid EffectiveFrom date")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostValidAddressWithInvalidEffectiveFromDate()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Address with invalid EffectiveFrom date", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 358
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table188.AddRow(new string[] {
                            "Address1",
                            "1"});
                table188.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table188.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table188.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table188.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table188.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table188.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table188.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table188.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table188.AddRow(new string[] {
                            "EffectiveFrom",
                            "2033-06-19T09:01:00Z"});
                table188.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table188.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 359
 testRunner.Given("I post an Address with the following details V2:", ((string)(null)), table188, "Given ");
#line hidden
#line 373
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
