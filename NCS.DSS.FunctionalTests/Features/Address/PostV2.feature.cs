// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Address
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PostV2")]
    [NUnit.Framework.CategoryAttribute("postV2")]
    public partial class PostV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PostV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PostV2", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV2"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
 #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table1.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 8
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid address")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostValidAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid address", null, new string[] {
                        "addresses",
                        "smoke"});
#line 14
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Address1",
                        "1"});
            table2.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table2.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table2.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table2.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table2.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table2.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table2.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table2.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table2.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table2.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table2.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 15
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table2, "Given ");
#line 29
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Address1",
                        "1"});
            table3.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table3.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table3.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table3.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table3.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table3.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table3.AddRow(new string[] {
                        "Longitude",
                        "-0.13426"});
            table3.AddRow(new string[] {
                        "Latitude",
                        "51.53494"});
            table3.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table3.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table3.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 30
  testRunner.And("the response body should contain:", ((string)(null)), table3, "And ");
#line 44
     testRunner.And("the \"addresses\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
  testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
  testRunner.And("there should be a record in the addresses ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
  testRunner.And("there should be a record in the addresses-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid address with Subcontractor Id")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PostValidAddressWithSubcontractorId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid address with Subcontractor Id", null, new string[] {
                        "addresses",
                        "subcontractorId"});
#line 51
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Address1",
                        "1"});
            table4.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table4.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table4.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table4.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table4.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table4.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table4.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table4.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table4.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table4.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table4.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 52
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table4, "Given ");
#line 66
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Address1",
                        "1"});
            table5.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table5.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table5.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table5.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table5.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table5.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table5.AddRow(new string[] {
                        "Longitude",
                        "-0.13426"});
            table5.AddRow(new string[] {
                        "Latitude",
                        "51.53494"});
            table5.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table5.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table5.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 67
  testRunner.And("the response body should contain:", ((string)(null)), table5, "And ");
#line 81
  testRunner.And("the response body should contain the SubContractorId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
     testRunner.And("the \"addresses\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
  testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
  testRunner.And("there should be a record in the addresses ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
  testRunner.And("there should be a record in the addresses-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with only mandatory Fields")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithOnlyMandatoryFields()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with only mandatory Fields", null, new string[] {
                        "addresses"});
#line 89
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Address1",
                        "1"});
            table6.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
#line 90
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table6, "Given ");
#line 94
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Address1",
                        "1"});
            table7.AddRow(new string[] {
                        "Address2",
                        "null"});
            table7.AddRow(new string[] {
                        "Address3",
                        "null"});
            table7.AddRow(new string[] {
                        "Address4",
                        "null"});
            table7.AddRow(new string[] {
                        "Address5",
                        "null"});
            table7.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table7.AddRow(new string[] {
                        "AlternativePostCode",
                        "null"});
            table7.AddRow(new string[] {
                        "Longitude",
                        "-0.13426"});
            table7.AddRow(new string[] {
                        "Latitude",
                        "51.53494"});
            table7.AddRow(new string[] {
                        "EffectiveFrom",
                        "null"});
            table7.AddRow(new string[] {
                        "EffectiveTo",
                        "null"});
#line 95
  testRunner.And("the response body should contain:", ((string)(null)), table7, "And ");
#line 108
  testRunner.And("there should be a record in the addresses ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
  testRunner.And("there should be a record in the addresses-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with maximum Field lengths")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithMaximumFieldLengths()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with maximum Field lengths", null, new string[] {
                        "addresses"});
#line 113
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "Address1",
                        "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                            "bcdefghijAbcdefghij"});
            table8.AddRow(new string[] {
                        "Address3",
                        "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                            "bcdefghijAbcdefghij"});
            table8.AddRow(new string[] {
                        "Address4",
                        "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                            "bcdefghijAbcdefghij"});
            table8.AddRow(new string[] {
                        "Address5",
                        "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                            "bcdefghijAbcdefghij"});
            table8.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table8.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table8.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table8.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table8.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table8.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table8.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 114
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table8, "Given ");
#line 127
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "Address1",
                        "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                            "bcdefghijAbcdefghij"});
            table9.AddRow(new string[] {
                        "Address3",
                        "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                            "bcdefghijAbcdefghij"});
            table9.AddRow(new string[] {
                        "Address4",
                        "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                            "bcdefghijAbcdefghij"});
            table9.AddRow(new string[] {
                        "Address5",
                        "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                            "bcdefghijAbcdefghij"});
            table9.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table9.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table9.AddRow(new string[] {
                        "Longitude",
                        "-0.13426"});
            table9.AddRow(new string[] {
                        "Latitude",
                        "51.53494"});
            table9.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table9.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table9.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 128
  testRunner.And("the response body should contain:", ((string)(null)), table9, "And ");
#line 141
  testRunner.And("there should be a record in the addresses ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
  testRunner.And("there should be a record in the addresses-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address", null, new string[] {
                        "addresses"});
#line 147
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "Address1",
                        "1"});
            table10.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
#line 152
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table10, "Given ");
#line 156
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 157
  testRunner.And("there should be a record in the addresses ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
  testRunner.And("there should be a record in the addresses-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode has no space")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeHasNoSpace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode has no space", null, new string[] {
                        "addresses"});
#line 161
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "Address1",
                        "1"});
            table11.AddRow(new string[] {
                        "PostCode",
                        "nn12tx"});
#line 166
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table11, "Given ");
#line 170
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table12.AddRow(new string[] {
                        "Address1",
                        "1"});
            table12.AddRow(new string[] {
                        "PostCode",
                        "nn12tx"});
            table12.AddRow(new string[] {
                        "Longitude",
                        "-1.00181"});
            table12.AddRow(new string[] {
                        "Latitude",
                        "52.12814"});
#line 171
  testRunner.And("the response body should contain:", ((string)(null)), table12, "And ");
#line 177
  testRunner.And("there should be a record in the addresses ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
  testRunner.And("there should be a record in the addresses-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode has space")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeHasSpace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode has space", null, new string[] {
                        "addresses"});
#line 181
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "Address1",
                        "1"});
            table13.AddRow(new string[] {
                        "PostCode",
                        "nn1 2tx"});
#line 186
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table13, "Given ");
#line 190
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table14.AddRow(new string[] {
                        "Address1",
                        "1"});
            table14.AddRow(new string[] {
                        "PostCode",
                        "nn1 2tx"});
            table14.AddRow(new string[] {
                        "Longitude",
                        "-1.00181"});
            table14.AddRow(new string[] {
                        "Latitude",
                        "52.12814"});
#line 191
     testRunner.And("the response body should contain:", ((string)(null)), table14, "And ");
#line 197
  testRunner.And("there should be a record in the addresses ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
  testRunner.And("there should be a record in the addresses-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with postcode that maps incorrectly without the CountrySet parameter" +
            " in the geocoding request")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithPostcodeThatMapsIncorrectlyWithoutTheCountrySetParameterInTheGeocodingRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with postcode that maps incorrectly without the CountrySet parameter" +
                    " in the geocoding request", null, new string[] {
                        "addresses"});
#line 202
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "Address1",
                        "1"});
            table15.AddRow(new string[] {
                        "PostCode",
                        "S41 8SE"});
#line 207
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table15, "Given ");
#line 210
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table16.AddRow(new string[] {
                        "Address1",
                        "1"});
            table16.AddRow(new string[] {
                        "PostCode",
                        "S41 8SE"});
            table16.AddRow(new string[] {
                        "Longitude",
                        "-1.43018"});
            table16.AddRow(new string[] {
                        "Latitude",
                        "53.25289"});
#line 212
     testRunner.And("the response body should contain:", ((string)(null)), table16, "And ");
#line 217
  testRunner.And("there should be a record in the addresses ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
  testRunner.And("there should be a record in the addresses-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with geocoding where postcode cannot be geocoded")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithGeocodingWherePostcodeCannotBeGeocoded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with geocoding where postcode cannot be geocoded", null, new string[] {
                        "addresses"});
#line 223
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "Address1",
                        "1"});
            table17.AddRow(new string[] {
                        "PostCode",
                        "ze11 1ef"});
#line 228
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table17, "Given ");
#line 232
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table18.AddRow(new string[] {
                        "Address1",
                        "1"});
            table18.AddRow(new string[] {
                        "PostCode",
                        "ze11 1ef"});
            table18.AddRow(new string[] {
                        "Longitude",
                        ""});
            table18.AddRow(new string[] {
                        "Latitude",
                        ""});
#line 233
     testRunner.And("the response body should contain:", ((string)(null)), table18, "And ");
#line 239
  testRunner.And("there should be a record in the addresses ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
  testRunner.And("there should be a record in the addresses-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with Address1 Field missing")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithAddress1FieldMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with Address1 Field missing", null, new string[] {
                        "addresses"});
#line 245
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table19.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table19.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table19.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table19.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table19.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table19.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table19.AddRow(new string[] {
                        "Latitude",
                        "52.40121"});
            table19.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table19.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table19.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 246
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table19, "Given ");
#line 259
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with Address1 Field over character limit")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithAddress1FieldOverCharacterLimit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with Address1 Field over character limit", null, new string[] {
                        "addresses"});
#line 262
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "Address1",
                        "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                            "bcdefghijAbcdefghijA"});
            table20.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table20.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table20.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table20.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table20.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table20.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table20.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table20.AddRow(new string[] {
                        "Latitude",
                        "52.40100"});
            table20.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table20.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table20.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 263
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table20, "Given ");
#line 277
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Address1")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidAddress1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Address1", null, new string[] {
                        "addresses"});
#line 280
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "Address1",
                        "1#"});
            table21.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table21.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table21.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table21.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table21.AddRow(new string[] {
                        "PostCode",
                        "AA999AAA"});
            table21.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table21.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table21.AddRow(new string[] {
                        "Latitude",
                        "52.40100"});
            table21.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table21.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table21.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 281
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table21, "Given ");
#line 295
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with PostCode Field missing")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithPostCodeFieldMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with PostCode Field missing", null, new string[] {
                        "addresses"});
#line 298
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "Address1",
                        "1"});
            table22.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table22.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table22.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table22.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table22.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table22.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table22.AddRow(new string[] {
                        "Latitude",
                        "52.40100"});
            table22.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table22.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table22.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 299
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table22, "Given ");
#line 312
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid PostCode")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidPostCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid PostCode", null, new string[] {
                        "addresses"});
#line 315
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "Address1",
                        "1"});
            table23.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table23.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table23.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table23.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table23.AddRow(new string[] {
                        "PostCode",
                        "AA999AAAA"});
            table23.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table23.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table23.AddRow(new string[] {
                        "Latitude",
                        "52.40100"});
            table23.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table23.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table23.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 316
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table23, "Given ");
#line 330
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Longitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidLongitude()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Longitude", null, new string[] {
                        "addresses"});
#line 333
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "Address1",
                        "1"});
            table24.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table24.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table24.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table24.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table24.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table24.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table24.AddRow(new string[] {
                        "Longitude",
                        "-981.50812"});
            table24.AddRow(new string[] {
                        "Latitude",
                        "52.40100"});
            table24.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table24.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table24.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 334
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table24, "Given ");
#line 348
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Latitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidLatitude()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Latitude", null, new string[] {
                        "addresses"});
#line 352
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "Address1",
                        "1"});
            table25.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table25.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table25.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table25.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table25.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table25.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table25.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table25.AddRow(new string[] {
                        "Latitude",
                        "521.40100"});
            table25.AddRow(new string[] {
                        "EffectiveFrom",
                        "2018-06-19T09:01:00Z"});
            table25.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table25.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 353
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table25, "Given ");
#line 367
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Address with invalid EffectiveFrom date")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostValidAddressWithInvalidEffectiveFromDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Address with invalid EffectiveFrom date", null, new string[] {
                        "addresses"});
#line 370
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "Address1",
                        "1"});
            table26.AddRow(new string[] {
                        "Address2",
                        "The Street"});
            table26.AddRow(new string[] {
                        "Address3",
                        "The Town"});
            table26.AddRow(new string[] {
                        "Address4",
                        "The Area"});
            table26.AddRow(new string[] {
                        "Address5",
                        "The County"});
            table26.AddRow(new string[] {
                        "PostCode",
                        "NW11WN"});
            table26.AddRow(new string[] {
                        "AlternativePostCode",
                        "NW22WN"});
            table26.AddRow(new string[] {
                        "Longitude",
                        "-98.50812"});
            table26.AddRow(new string[] {
                        "Latitude",
                        "52.40100"});
            table26.AddRow(new string[] {
                        "EffectiveFrom",
                        "2033-06-19T09:01:00Z"});
            table26.AddRow(new string[] {
                        "EffectiveTo",
                        "2018-06-21T13:12:00Z"});
            table26.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-09-19T09:01:00Z"});
#line 371
  testRunner.Given("I post an Address with the following details:", ((string)(null)), table26, "Given ");
#line 385
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

