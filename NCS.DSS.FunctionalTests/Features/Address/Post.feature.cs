// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Address
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressPostV1")]
    public partial class AddressPostV1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Post.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Address", "AddressPostV1", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table238.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table238.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table238, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid address")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostValidAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table239.AddRow(new string[] {
                            "Address1",
                            "1"});
                table239.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table239.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table239.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table239.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table239.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table239.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table239.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table239.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table239.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table239.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table239.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 11
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table239, "Given ");
#line hidden
#line 25
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table240.AddRow(new string[] {
                            "Address1",
                            "1"});
                table240.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table240.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table240.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table240.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table240.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table240.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table240.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table240.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table240.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table240.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table240.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 26
 testRunner.And("the response body should contain:", ((string)(null)), table240, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with only mandatory Fields")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithOnlyMandatoryFields()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with only mandatory Fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table241.AddRow(new string[] {
                            "Address1",
                            "1"});
                table241.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
#line 45
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table241, "Given ");
#line hidden
#line 49
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table242.AddRow(new string[] {
                            "Address1",
                            "1"});
                table242.AddRow(new string[] {
                            "Address2",
                            ""});
                table242.AddRow(new string[] {
                            "Address3",
                            ""});
                table242.AddRow(new string[] {
                            "Address4",
                            ""});
                table242.AddRow(new string[] {
                            "Address5",
                            ""});
                table242.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table242.AddRow(new string[] {
                            "AlternativePostCode",
                            ""});
                table242.AddRow(new string[] {
                            "Longitude",
                            ""});
                table242.AddRow(new string[] {
                            "Latitude",
                            ""});
                table242.AddRow(new string[] {
                            "EffectiveFrom",
                            ""});
                table242.AddRow(new string[] {
                            "EffectiveTo",
                            ""});
#line 50
 testRunner.And("the response body should contain:", ((string)(null)), table242, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with maximum Field lengths")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithMaximumFieldLengths()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with maximum Field lengths", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table243.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table243.AddRow(new string[] {
                            "Address3",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table243.AddRow(new string[] {
                            "Address4",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table243.AddRow(new string[] {
                            "Address5",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table243.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table243.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table243.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table243.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table243.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table243.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table243.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 66
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table243, "Given ");
#line hidden
#line 79
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table244.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table244.AddRow(new string[] {
                            "Address3",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table244.AddRow(new string[] {
                            "Address4",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table244.AddRow(new string[] {
                            "Address5",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table244.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table244.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table244.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table244.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table244.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table244.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table244.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 80
 testRunner.And("the response body should contain:", ((string)(null)), table244, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with Address1 Field missing")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithAddress1FieldMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with Address1 Field missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table245.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table245.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table245.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table245.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table245.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table245.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table245.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table245.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table245.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table245.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table245.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 96
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table245, "Given ");
#line hidden
#line 109
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with Address1 Field over character limit")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithAddress1FieldOverCharacterLimit()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with Address1 Field over character limit", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table246.AddRow(new string[] {
                            "Address1",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghijA"});
                table246.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table246.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table246.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table246.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table246.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table246.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table246.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table246.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table246.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table246.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table246.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 114
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table246, "Given ");
#line hidden
#line 128
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Address1")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidAddress1()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Address1", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table247.AddRow(new string[] {
                            "Address1",
                            "1#"});
                table247.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table247.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table247.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table247.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table247.AddRow(new string[] {
                            "PostCode",
                            "AA999AAA"});
                table247.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table247.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table247.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table247.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table247.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table247.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 133
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table247, "Given ");
#line hidden
#line 147
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with PostCode Field missing")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithPostCodeFieldMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with PostCode Field missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table248.AddRow(new string[] {
                            "Address1",
                            "1"});
                table248.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table248.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table248.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table248.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table248.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table248.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table248.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table248.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table248.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table248.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 152
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table248, "Given ");
#line hidden
#line 165
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid PostCode")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidPostCode()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid PostCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 169
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table249.AddRow(new string[] {
                            "Address1",
                            "1"});
                table249.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table249.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table249.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table249.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table249.AddRow(new string[] {
                            "PostCode",
                            "AA999AAAA"});
                table249.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table249.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table249.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table249.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table249.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table249.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 170
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table249, "Given ");
#line hidden
#line 184
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Longitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidLongitude()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Longitude", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 188
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table250.AddRow(new string[] {
                            "Address1",
                            "1"});
                table250.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table250.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table250.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table250.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table250.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table250.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table250.AddRow(new string[] {
                            "Longitude",
                            "-981.50812"});
                table250.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table250.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table250.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table250.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 189
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table250, "Given ");
#line hidden
#line 203
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Address with invalid Latitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostAddressWithInvalidLatitude()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Address with invalid Latitude", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table251.AddRow(new string[] {
                            "Address1",
                            "1"});
                table251.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table251.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table251.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table251.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table251.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table251.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table251.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table251.AddRow(new string[] {
                            "Latitude",
                            "521.40100"});
                table251.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table251.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table251.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 208
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table251, "Given ");
#line hidden
#line 222
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Address with invalid EffectiveFrom date")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PostValidAddressWithInvalidEffectiveFromDate()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Address with invalid EffectiveFrom date", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 226
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table252.AddRow(new string[] {
                            "Address1",
                            "1"});
                table252.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table252.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table252.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table252.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table252.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table252.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table252.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table252.AddRow(new string[] {
                            "Latitude",
                            "52.40100"});
                table252.AddRow(new string[] {
                            "EffectiveFrom",
                            "2033-06-19T09:01:00Z"});
                table252.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table252.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 227
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table252, "Given ");
#line hidden
#line 241
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
