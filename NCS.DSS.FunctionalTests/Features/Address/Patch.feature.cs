// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Address
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressPatchV1")]
    public partial class AddressPatchV1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Address", "AddressPatchV1", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table238.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table238.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table238, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address1")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchAddress1()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address1", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table239.AddRow(new string[] {
                            "Address1",
                            "1"});
                table239.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table239.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table239.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table239.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table239.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table239.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table239.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table239.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table239.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table239.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table239.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 11
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table239, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table240.AddRow(new string[] {
                            "Address1",
                            "2"});
#line 25
 testRunner.When("I patch the following Address:", ((string)(null)), table240, "When ");
#line hidden
#line 28
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table241.AddRow(new string[] {
                            "Address1",
                            "2"});
                table241.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table241.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table241.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table241.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table241.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table241.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table241.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table241.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table241.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table241.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 29
 testRunner.And("the response body should contain:", ((string)(null)), table241, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address2")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress2()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table242.AddRow(new string[] {
                            "Address1",
                            "1"});
                table242.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table242.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table242.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table242.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table242.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table242.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table242.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table242.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table242.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table242.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table242.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 45
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table242, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table243.AddRow(new string[] {
                            "Address2",
                            "Changed"});
#line 59
 testRunner.When("I patch the following Address:", ((string)(null)), table243, "When ");
#line hidden
#line 62
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table244.AddRow(new string[] {
                            "Address1",
                            "1"});
                table244.AddRow(new string[] {
                            "Address2",
                            "Changed"});
                table244.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table244.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table244.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table244.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table244.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table244.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table244.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table244.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table244.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 63
 testRunner.And("the response body should contain:", ((string)(null)), table244, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address3")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress3()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address3", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table245.AddRow(new string[] {
                            "Address1",
                            "1"});
                table245.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table245.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table245.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table245.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table245.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table245.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table245.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table245.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table245.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table245.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table245.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 79
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table245, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table246.AddRow(new string[] {
                            "Address3",
                            "Changed"});
#line 93
 testRunner.When("I patch the following Address:", ((string)(null)), table246, "When ");
#line hidden
#line 96
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table247.AddRow(new string[] {
                            "Address1",
                            "1"});
                table247.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table247.AddRow(new string[] {
                            "Address3",
                            "Changed"});
                table247.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table247.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table247.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table247.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table247.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table247.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table247.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table247.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 97
 testRunner.And("the response body should contain:", ((string)(null)), table247, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address4")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress4()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address4", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table248.AddRow(new string[] {
                            "Address1",
                            "1"});
                table248.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table248.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table248.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table248.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table248.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table248.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table248.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table248.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table248.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table248.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table248.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 113
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table248, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table249.AddRow(new string[] {
                            "Address4",
                            "Changed"});
#line 127
 testRunner.When("I patch the following Address:", ((string)(null)), table249, "When ");
#line hidden
#line 130
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table250.AddRow(new string[] {
                            "Address1",
                            "1"});
                table250.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table250.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table250.AddRow(new string[] {
                            "Address4",
                            "Changed"});
                table250.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table250.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table250.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table250.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table250.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table250.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table250.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 131
 testRunner.And("the response body should contain:", ((string)(null)), table250, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Address5")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAddress5()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Address5", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table251.AddRow(new string[] {
                            "Address1",
                            "1"});
                table251.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table251.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table251.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table251.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table251.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table251.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table251.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table251.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table251.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table251.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table251.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 147
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table251, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table252.AddRow(new string[] {
                            "Address5",
                            "Changed"});
#line 161
 testRunner.When("I patch the following Address:", ((string)(null)), table252, "When ");
#line hidden
#line 164
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table253.AddRow(new string[] {
                            "Address1",
                            "1"});
                table253.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table253.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table253.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table253.AddRow(new string[] {
                            "Address5",
                            "Changed"});
                table253.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table253.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table253.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table253.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table253.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table253.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 165
 testRunner.And("the response body should contain:", ((string)(null)), table253, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PostCode")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchPostCode()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PostCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 180
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table254.AddRow(new string[] {
                            "Address1",
                            "1"});
                table254.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table254.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table254.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table254.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table254.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table254.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table254.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table254.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table254.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table254.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table254.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 181
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table254, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table255.AddRow(new string[] {
                            "PostCode",
                            "NW11WW"});
#line 195
 testRunner.When("I patch the following Address:", ((string)(null)), table255, "When ");
#line hidden
#line 198
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table256.AddRow(new string[] {
                            "Address1",
                            "1"});
                table256.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table256.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table256.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table256.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table256.AddRow(new string[] {
                            "PostCode",
                            "NW11WW"});
                table256.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table256.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table256.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table256.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table256.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 199
 testRunner.And("the response body should contain:", ((string)(null)), table256, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch AlternativePostCode")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchAlternativePostCode()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch AlternativePostCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 214
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table257.AddRow(new string[] {
                            "Address1",
                            "1"});
                table257.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table257.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table257.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table257.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table257.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table257.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table257.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table257.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table257.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table257.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table257.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 215
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table257, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table258.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WW"});
#line 229
 testRunner.When("I patch the following Address:", ((string)(null)), table258, "When ");
#line hidden
#line 232
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table259.AddRow(new string[] {
                            "Address1",
                            "1"});
                table259.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table259.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table259.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table259.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table259.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table259.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WW"});
                table259.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table259.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table259.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table259.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 233
 testRunner.And("the response body should contain:", ((string)(null)), table259, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Longitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchLongitude()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Longitude", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 248
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table260.AddRow(new string[] {
                            "Address1",
                            "1"});
                table260.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table260.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table260.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table260.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table260.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table260.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table260.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table260.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table260.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table260.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table260.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 249
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table260, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table261.AddRow(new string[] {
                            "Longitude",
                            "-98.50813"});
#line 263
 testRunner.When("I patch the following Address:", ((string)(null)), table261, "When ");
#line hidden
#line 266
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table262.AddRow(new string[] {
                            "Address1",
                            "1"});
                table262.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table262.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table262.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table262.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table262.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table262.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table262.AddRow(new string[] {
                            "Longitude",
                            "-98.50813"});
                table262.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table262.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table262.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 267
 testRunner.And("the response body should contain:", ((string)(null)), table262, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Latitude")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchLatitude()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Latitude", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table263.AddRow(new string[] {
                            "Address1",
                            "1"});
                table263.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table263.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table263.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table263.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table263.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table263.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table263.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table263.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table263.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table263.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table263.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 283
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table263, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table264.AddRow(new string[] {
                            "Latitude",
                            "52.40122"});
#line 297
 testRunner.When("I patch the following Address:", ((string)(null)), table264, "When ");
#line hidden
#line 300
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table265.AddRow(new string[] {
                            "Address1",
                            "1"});
                table265.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table265.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table265.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table265.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table265.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table265.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table265.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table265.AddRow(new string[] {
                            "Latitude",
                            "52.40122"});
                table265.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table265.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 301
 testRunner.And("the response body should contain:", ((string)(null)), table265, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EffectiveFrom")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchEffectiveFrom()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EffectiveFrom", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 316
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table266.AddRow(new string[] {
                            "Address1",
                            "1"});
                table266.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table266.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table266.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table266.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table266.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table266.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table266.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table266.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table266.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table266.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table266.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 317
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table266, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table267.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:02:00Z"});
#line 331
 testRunner.When("I patch the following Address:", ((string)(null)), table267, "When ");
#line hidden
#line 334
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table268.AddRow(new string[] {
                            "Address1",
                            "1"});
                table268.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table268.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table268.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table268.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table268.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table268.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table268.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table268.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table268.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:02:00Z"});
                table268.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
#line 335
 testRunner.And("the response body should contain:", ((string)(null)), table268, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EffectiveTo")]
        [NUnit.Framework.CategoryAttribute("addresses")]
        public virtual void PatchEffectiveTo()
        {
            string[] tagsOfScenario = new string[] {
                    "addresses"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EffectiveTo", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 350
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table269.AddRow(new string[] {
                            "Address1",
                            "1"});
                table269.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table269.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table269.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table269.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table269.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table269.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table269.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table269.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table269.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table269.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:12:00Z"});
                table269.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-09-19T09:01:00Z"});
#line 351
 testRunner.Given("I post an Address with the following details:", ((string)(null)), table269, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table270.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:13:00Z"});
#line 365
 testRunner.When("I patch the following Address:", ((string)(null)), table270, "When ");
#line hidden
#line 368
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table271.AddRow(new string[] {
                            "Address1",
                            "1"});
                table271.AddRow(new string[] {
                            "Address2",
                            "The Street"});
                table271.AddRow(new string[] {
                            "Address3",
                            "The Town"});
                table271.AddRow(new string[] {
                            "Address4",
                            "The Area"});
                table271.AddRow(new string[] {
                            "Address5",
                            "The County"});
                table271.AddRow(new string[] {
                            "PostCode",
                            "NW11WN"});
                table271.AddRow(new string[] {
                            "AlternativePostCode",
                            "NW22WN"});
                table271.AddRow(new string[] {
                            "Longitude",
                            "-98.50812"});
                table271.AddRow(new string[] {
                            "Latitude",
                            "52.40121"});
                table271.AddRow(new string[] {
                            "EffectiveFrom",
                            "2018-06-19T09:01:00Z"});
                table271.AddRow(new string[] {
                            "EffectiveTo",
                            "2018-06-21T13:13:00Z"});
#line 369
 testRunner.And("the response body should contain:", ((string)(null)), table271, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
