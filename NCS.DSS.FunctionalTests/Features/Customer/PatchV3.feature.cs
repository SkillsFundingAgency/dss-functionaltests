// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Customer
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CustomerPatchV3")]
    public partial class CustomerPatchV3Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV3.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Customer", "CustomerPatchV3", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateOfRegistration")]
        [NUnit.Framework.CategoryAttribute("customers")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDateOfRegistration()
        {
            string[] tagsOfScenario = new string[] {
                    "customers",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateOfRegistration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table453 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table453.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table453.AddRow(new string[] {
                            "Title",
                            "1"});
                table453.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table453.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table453.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table453.AddRow(new string[] {
                            "Gender",
                            "1"});
                table453.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table453.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table453.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table453.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table453.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table453.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table453.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 5
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table453, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table454 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table454.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-28T16:11:00Z"});
#line 20
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table454, "When ");
#line hidden
#line 23
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table455 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table455.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-28T16:11:00Z"});
                table455.AddRow(new string[] {
                            "Title",
                            "1"});
                table455.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table455.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table455.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table455.AddRow(new string[] {
                            "Gender",
                            "1"});
                table455.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table455.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table455.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table455.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table455.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table455.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 25
 testRunner.And("the response body should contain:", ((string)(null)), table455, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Title")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchTitle()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Title", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table456 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table456.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table456.AddRow(new string[] {
                            "Title",
                            "1"});
                table456.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table456.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table456.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table456.AddRow(new string[] {
                            "Gender",
                            "1"});
                table456.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table456.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table456.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table456.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table456.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table456.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table456.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 42
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table456, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table457 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table457.AddRow(new string[] {
                            "Title",
                            "2"});
#line 57
 testRunner.When("I patch the following Customer With a different touchpoint V3:", ((string)(null)), table457, "When ");
#line hidden
#line 60
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table458 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table458.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table458.AddRow(new string[] {
                            "Title",
                            "2"});
                table458.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table458.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table458.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table458.AddRow(new string[] {
                            "Gender",
                            "1"});
                table458.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table458.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table458.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table458.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table458.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table458.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 63
 testRunner.And("the response body should contain:", ((string)(null)), table458, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch GivenName")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchGivenName()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch GivenName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table459 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table459.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table459.AddRow(new string[] {
                            "Title",
                            "1"});
                table459.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table459.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table459.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table459.AddRow(new string[] {
                            "Gender",
                            "1"});
                table459.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table459.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table459.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table459.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table459.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table459.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table459.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 82
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table459, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table460 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table460.AddRow(new string[] {
                            "GivenName",
                            "Bill"});
#line 97
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table460, "When ");
#line hidden
#line 100
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table461 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table461.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table461.AddRow(new string[] {
                            "Title",
                            "1"});
                table461.AddRow(new string[] {
                            "GivenName",
                            "Bill"});
                table461.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table461.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table461.AddRow(new string[] {
                            "Gender",
                            "1"});
                table461.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table461.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table461.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table461.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table461.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table461.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 101
 testRunner.And("the response body should contain:", ((string)(null)), table461, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch FamilyName")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchFamilyName()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch FamilyName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table462 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table462.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table462.AddRow(new string[] {
                            "Title",
                            "1"});
                table462.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table462.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table462.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table462.AddRow(new string[] {
                            "Gender",
                            "1"});
                table462.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table462.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table462.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table462.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table462.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table462.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table462.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 118
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table462, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table463 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table463.AddRow(new string[] {
                            "FamilyName",
                            "Update"});
#line 133
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table463, "When ");
#line hidden
#line 136
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table464 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table464.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table464.AddRow(new string[] {
                            "Title",
                            "1"});
                table464.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table464.AddRow(new string[] {
                            "FamilyName",
                            "Update"});
                table464.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table464.AddRow(new string[] {
                            "Gender",
                            "1"});
                table464.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table464.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table464.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table464.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table464.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table464.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 137
 testRunner.And("the response body should contain:", ((string)(null)), table464, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateofBirth")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchDateofBirth()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateofBirth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table465 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table465.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table465.AddRow(new string[] {
                            "Title",
                            "1"});
                table465.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table465.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table465.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table465.AddRow(new string[] {
                            "Gender",
                            "1"});
                table465.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table465.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table465.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table465.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table465.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table465.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table465.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 154
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table465, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table466 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table466.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-27T13:45:00Z"});
#line 169
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table466, "When ");
#line hidden
#line 172
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table467 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table467.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table467.AddRow(new string[] {
                            "Title",
                            "1"});
                table467.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table467.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table467.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-27T13:45:00Z"});
                table467.AddRow(new string[] {
                            "Gender",
                            "1"});
                table467.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table467.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table467.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table467.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table467.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table467.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 173
 testRunner.And("the response body should contain:", ((string)(null)), table467, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Gender")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchGender()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Gender", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table468 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table468.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table468.AddRow(new string[] {
                            "Title",
                            "1"});
                table468.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table468.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table468.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table468.AddRow(new string[] {
                            "Gender",
                            "1"});
                table468.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table468.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table468.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table468.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table468.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table468.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table468.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 190
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table468, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table469 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table469.AddRow(new string[] {
                            "Gender",
                            "2"});
#line 205
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table469, "When ");
#line hidden
#line 208
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table470 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table470.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table470.AddRow(new string[] {
                            "Title",
                            "1"});
                table470.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table470.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table470.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table470.AddRow(new string[] {
                            "Gender",
                            "2"});
                table470.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table470.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table470.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table470.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table470.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table470.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 209
 testRunner.And("the response body should contain:", ((string)(null)), table470, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch UniqueLearnerNumber")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchUniqueLearnerNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch UniqueLearnerNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 225
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table471 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table471.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table471.AddRow(new string[] {
                            "Title",
                            "1"});
                table471.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table471.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table471.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table471.AddRow(new string[] {
                            "Gender",
                            "1"});
                table471.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table471.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table471.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table471.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table471.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table471.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table471.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 226
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table471, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table472 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table472.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543211"});
#line 241
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table472, "When ");
#line hidden
#line 244
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table473 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table473.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table473.AddRow(new string[] {
                            "Title",
                            "1"});
                table473.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table473.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table473.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table473.AddRow(new string[] {
                            "Gender",
                            "1"});
                table473.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543211"});
                table473.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table473.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table473.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table473.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table473.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 245
 testRunner.And("the response body should contain:", ((string)(null)), table473, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch OptInUserResearch")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchOptInUserResearch()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch OptInUserResearch", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 261
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table474 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table474.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table474.AddRow(new string[] {
                            "Title",
                            "1"});
                table474.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table474.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table474.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table474.AddRow(new string[] {
                            "Gender",
                            "1"});
                table474.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table474.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table474.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table474.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table474.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table474.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table474.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 262
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table474, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table475 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table475.AddRow(new string[] {
                            "OptInUserResearch",
                            "false"});
#line 277
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table475, "When ");
#line hidden
#line 280
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table476 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table476.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table476.AddRow(new string[] {
                            "Title",
                            "1"});
                table476.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table476.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table476.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table476.AddRow(new string[] {
                            "Gender",
                            "1"});
                table476.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table476.AddRow(new string[] {
                            "OptInUserResearch",
                            "false"});
                table476.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table476.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table476.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table476.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 281
 testRunner.And("the response body should contain:", ((string)(null)), table476, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch OptInMarketResearch")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchOptInMarketResearch()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch OptInMarketResearch", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 297
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table477 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table477.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table477.AddRow(new string[] {
                            "Title",
                            "1"});
                table477.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table477.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table477.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table477.AddRow(new string[] {
                            "Gender",
                            "1"});
                table477.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table477.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table477.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table477.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table477.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table477.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table477.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 298
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table477, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table478 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table478.AddRow(new string[] {
                            "OptInMarketResearch",
                            "true"});
#line 313
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table478, "When ");
#line hidden
#line 316
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table479 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table479.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table479.AddRow(new string[] {
                            "Title",
                            "1"});
                table479.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table479.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table479.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table479.AddRow(new string[] {
                            "Gender",
                            "1"});
                table479.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table479.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table479.AddRow(new string[] {
                            "OptInMarketResearch",
                            "true"});
                table479.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table479.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table479.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 317
 testRunner.And("the response body should contain:", ((string)(null)), table479, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateOfTermination")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchDateOfTermination()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateOfTermination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 333
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table480 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table480.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table480.AddRow(new string[] {
                            "Title",
                            "1"});
                table480.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table480.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table480.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table480.AddRow(new string[] {
                            "Gender",
                            "1"});
                table480.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table480.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table480.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table480.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table480.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table480.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table480.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 334
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table480, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table481 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table481.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-08-27T14:45:00Z"});
#line 349
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table481, "When ");
#line hidden
#line 352
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table482 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table482.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table482.AddRow(new string[] {
                            "Title",
                            "1"});
                table482.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table482.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table482.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table482.AddRow(new string[] {
                            "Gender",
                            "1"});
                table482.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table482.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table482.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table482.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table482.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table482.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 353
 testRunner.And("the response body should contain:", ((string)(null)), table482, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch ReasonForTermination")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchReasonForTermination()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch ReasonForTermination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 369
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table483 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table483.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table483.AddRow(new string[] {
                            "Title",
                            "1"});
                table483.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table483.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table483.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table483.AddRow(new string[] {
                            "Gender",
                            "1"});
                table483.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table483.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table483.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table483.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table483.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table483.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table483.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 370
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table483, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table484 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table484.AddRow(new string[] {
                            "ReasonForTermination",
                            "2"});
                table484.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T16:11:00Z"});
#line 385
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table484, "When ");
#line hidden
#line 389
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table485 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table485.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table485.AddRow(new string[] {
                            "Title",
                            "1"});
                table485.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table485.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table485.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table485.AddRow(new string[] {
                            "Gender",
                            "1"});
                table485.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table485.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table485.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table485.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table485.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table485.AddRow(new string[] {
                            "ReasonForTermination",
                            "2"});
                table485.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T16:11:00Z"});
                table485.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 390
 testRunner.And("the response body should contain:", ((string)(null)), table485, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch IntroducedBy")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchIntroducedBy()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch IntroducedBy", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 408
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table486 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table486.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table486.AddRow(new string[] {
                            "Title",
                            "1"});
                table486.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table486.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table486.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table486.AddRow(new string[] {
                            "Gender",
                            "1"});
                table486.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table486.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table486.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table486.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table486.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table486.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table486.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 409
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table486, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table487 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table487.AddRow(new string[] {
                            "IntroducedBy",
                            "2"});
#line 424
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table487, "When ");
#line hidden
#line 427
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table488 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table488.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table488.AddRow(new string[] {
                            "Title",
                            "1"});
                table488.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table488.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table488.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table488.AddRow(new string[] {
                            "Gender",
                            "1"});
                table488.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table488.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table488.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table488.AddRow(new string[] {
                            "IntroducedBy",
                            "2"});
                table488.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table488.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 428
 testRunner.And("the response body should contain:", ((string)(null)), table488, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch IntroducedByAdditionalInfo")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchIntroducedByAdditionalInfo()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch IntroducedByAdditionalInfo", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 444
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table489 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table489.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table489.AddRow(new string[] {
                            "Title",
                            "1"});
                table489.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table489.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table489.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table489.AddRow(new string[] {
                            "Gender",
                            "1"});
                table489.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table489.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table489.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table489.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table489.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table489.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table489.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 445
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table489, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table490 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table490.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "updated info"});
#line 460
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table490, "When ");
#line hidden
#line 463
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table491 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table491.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table491.AddRow(new string[] {
                            "Title",
                            "1"});
                table491.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table491.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table491.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table491.AddRow(new string[] {
                            "Gender",
                            "1"});
                table491.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table491.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table491.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table491.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table491.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "updated info"});
                table491.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 464
 testRunner.And("the response body should contain:", ((string)(null)), table491, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch With Existing DateOfTermination")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchWithExistingDateOfTermination()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch With Existing DateOfTermination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 480
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table492 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table492.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table492.AddRow(new string[] {
                            "Title",
                            "1"});
                table492.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table492.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table492.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table492.AddRow(new string[] {
                            "Gender",
                            "1"});
                table492.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table492.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table492.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table492.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table492.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table492.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table492.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table492.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table492.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 481
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table492, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table493 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table493.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "updated info"});
#line 498
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table493, "When ");
#line hidden
#line 501
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
