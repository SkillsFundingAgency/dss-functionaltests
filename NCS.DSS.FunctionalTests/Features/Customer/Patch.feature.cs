// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Customer
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CustomerPatchV1")]
    public partial class CustomerPatchV1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Customer", "CustomerPatchV1", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateOfRegistration")]
        [NUnit.Framework.CategoryAttribute("customers")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDateOfRegistration()
        {
            string[] tagsOfScenario = new string[] {
                    "customers",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateOfRegistration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table262.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table262.AddRow(new string[] {
                            "Title",
                            "1"});
                table262.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table262.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table262.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table262.AddRow(new string[] {
                            "Gender",
                            "1"});
                table262.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table262.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table262.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table262.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table262.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table262.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 5
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table262, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table263.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-28T16:11:00Z"});
#line 19
 testRunner.When("I patch the following Customer:", ((string)(null)), table263, "When ");
#line hidden
#line 22
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table264.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-28T16:11:00Z"});
                table264.AddRow(new string[] {
                            "Title",
                            "1"});
                table264.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table264.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table264.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table264.AddRow(new string[] {
                            "Gender",
                            "1"});
                table264.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table264.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table264.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table264.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table264.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 23
 testRunner.And("the response body should contain:", ((string)(null)), table264, "And ");
#line hidden
#line 36
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
 testRunner.And("there should be a record in the dss-customers table with CustomerId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Title")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchTitle()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Title", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table265.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table265.AddRow(new string[] {
                            "Title",
                            "1"});
                table265.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table265.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table265.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table265.AddRow(new string[] {
                            "Gender",
                            "1"});
                table265.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table265.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table265.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table265.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table265.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table265.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 42
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table265, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table266.AddRow(new string[] {
                            "Title",
                            "2"});
#line 56
 testRunner.When("I patch the following Customer:", ((string)(null)), table266, "When ");
#line hidden
#line 59
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table267.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table267.AddRow(new string[] {
                            "Title",
                            "2"});
                table267.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table267.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table267.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table267.AddRow(new string[] {
                            "Gender",
                            "1"});
                table267.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table267.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table267.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table267.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table267.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 60
 testRunner.And("the response body should contain:", ((string)(null)), table267, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch GivenName")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchGivenName()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch GivenName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table268.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table268.AddRow(new string[] {
                            "Title",
                            "1"});
                table268.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table268.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table268.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table268.AddRow(new string[] {
                            "Gender",
                            "1"});
                table268.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table268.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table268.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table268.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table268.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table268.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 76
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table268, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table269.AddRow(new string[] {
                            "GivenName",
                            "Bill"});
#line 90
 testRunner.When("I patch the following Customer:", ((string)(null)), table269, "When ");
#line hidden
#line 93
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table270.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table270.AddRow(new string[] {
                            "Title",
                            "1"});
                table270.AddRow(new string[] {
                            "GivenName",
                            "Bill"});
                table270.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table270.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table270.AddRow(new string[] {
                            "Gender",
                            "1"});
                table270.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table270.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table270.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table270.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table270.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 94
 testRunner.And("the response body should contain:", ((string)(null)), table270, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch FamilyName")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchFamilyName()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch FamilyName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table271.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table271.AddRow(new string[] {
                            "Title",
                            "1"});
                table271.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table271.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table271.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table271.AddRow(new string[] {
                            "Gender",
                            "1"});
                table271.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table271.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table271.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table271.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table271.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table271.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 110
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table271, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table272.AddRow(new string[] {
                            "FamilyName",
                            "Update"});
#line 124
 testRunner.When("I patch the following Customer:", ((string)(null)), table272, "When ");
#line hidden
#line 127
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table273.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table273.AddRow(new string[] {
                            "Title",
                            "1"});
                table273.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table273.AddRow(new string[] {
                            "FamilyName",
                            "Update"});
                table273.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table273.AddRow(new string[] {
                            "Gender",
                            "1"});
                table273.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table273.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table273.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table273.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table273.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 128
 testRunner.And("the response body should contain:", ((string)(null)), table273, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateofBirth")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchDateofBirth()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateofBirth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table274.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table274.AddRow(new string[] {
                            "Title",
                            "1"});
                table274.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table274.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table274.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table274.AddRow(new string[] {
                            "Gender",
                            "1"});
                table274.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table274.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table274.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table274.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table274.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table274.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 144
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table274, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table275.AddRow(new string[] {
                            "DateOfBirth",
                            "2005-07-27T13:45:00Z"});
#line 158
 testRunner.When("I patch the following Customer:", ((string)(null)), table275, "When ");
#line hidden
#line 161
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table276.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table276.AddRow(new string[] {
                            "Title",
                            "1"});
                table276.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table276.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table276.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-27T13:45:00Z"});
                table276.AddRow(new string[] {
                            "Gender",
                            "1"});
                table276.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table276.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table276.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table276.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table276.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 162
 testRunner.And("the response body should contain:", ((string)(null)), table276, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Gender")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchGender()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Gender", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 177
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table277.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table277.AddRow(new string[] {
                            "Title",
                            "1"});
                table277.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table277.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table277.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table277.AddRow(new string[] {
                            "Gender",
                            "1"});
                table277.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table277.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table277.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table277.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table277.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table277.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 178
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table277, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table278.AddRow(new string[] {
                            "Gender",
                            "2"});
#line 192
 testRunner.When("I patch the following Customer:", ((string)(null)), table278, "When ");
#line hidden
#line 195
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table279.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table279.AddRow(new string[] {
                            "Title",
                            "1"});
                table279.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table279.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table279.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table279.AddRow(new string[] {
                            "Gender",
                            "2"});
                table279.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table279.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table279.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table279.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table279.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 196
 testRunner.And("the response body should contain:", ((string)(null)), table279, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch UniqueLearnerNumber")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchUniqueLearnerNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch UniqueLearnerNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 211
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table280.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table280.AddRow(new string[] {
                            "Title",
                            "1"});
                table280.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table280.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table280.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table280.AddRow(new string[] {
                            "Gender",
                            "1"});
                table280.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table280.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table280.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table280.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table280.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table280.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 212
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table280, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table281.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543211"});
#line 226
 testRunner.When("I patch the following Customer:", ((string)(null)), table281, "When ");
#line hidden
#line 229
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table282.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table282.AddRow(new string[] {
                            "Title",
                            "1"});
                table282.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table282.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table282.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table282.AddRow(new string[] {
                            "Gender",
                            "1"});
                table282.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543211"});
                table282.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table282.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table282.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table282.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 230
 testRunner.And("the response body should contain:", ((string)(null)), table282, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch OptInUserResearch")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchOptInUserResearch()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch OptInUserResearch", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 245
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table283.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table283.AddRow(new string[] {
                            "Title",
                            "1"});
                table283.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table283.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table283.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table283.AddRow(new string[] {
                            "Gender",
                            "1"});
                table283.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table283.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table283.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table283.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table283.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table283.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 246
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table283, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table284.AddRow(new string[] {
                            "OptInUserResearch",
                            "false"});
#line 260
 testRunner.When("I patch the following Customer:", ((string)(null)), table284, "When ");
#line hidden
#line 263
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table285.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table285.AddRow(new string[] {
                            "Title",
                            "1"});
                table285.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table285.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table285.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table285.AddRow(new string[] {
                            "Gender",
                            "1"});
                table285.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table285.AddRow(new string[] {
                            "OptInUserResearch",
                            "false"});
                table285.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table285.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table285.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 264
 testRunner.And("the response body should contain:", ((string)(null)), table285, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch OptInMarketResearch")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchOptInMarketResearch()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch OptInMarketResearch", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 279
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table286.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table286.AddRow(new string[] {
                            "Title",
                            "1"});
                table286.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table286.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table286.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table286.AddRow(new string[] {
                            "Gender",
                            "1"});
                table286.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table286.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table286.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table286.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table286.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table286.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 280
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table286, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table287.AddRow(new string[] {
                            "OptInMarketResearch",
                            "true"});
#line 294
 testRunner.When("I patch the following Customer:", ((string)(null)), table287, "When ");
#line hidden
#line 297
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table288.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table288.AddRow(new string[] {
                            "Title",
                            "1"});
                table288.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table288.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table288.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table288.AddRow(new string[] {
                            "Gender",
                            "1"});
                table288.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table288.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table288.AddRow(new string[] {
                            "OptInMarketResearch",
                            "true"});
                table288.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table288.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 298
 testRunner.And("the response body should contain:", ((string)(null)), table288, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateOfTermination")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchDateOfTermination()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateOfTermination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 313
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table289.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table289.AddRow(new string[] {
                            "Title",
                            "1"});
                table289.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table289.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table289.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table289.AddRow(new string[] {
                            "Gender",
                            "1"});
                table289.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table289.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table289.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table289.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table289.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table289.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 314
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table289, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table290.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-08-27T14:45:00Z"});
#line 328
 testRunner.When("I patch the following Customer:", ((string)(null)), table290, "When ");
#line hidden
#line 331
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table291.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table291.AddRow(new string[] {
                            "Title",
                            "1"});
                table291.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table291.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table291.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table291.AddRow(new string[] {
                            "Gender",
                            "1"});
                table291.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table291.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table291.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table291.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table291.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 332
 testRunner.And("the response body should contain:", ((string)(null)), table291, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch ReasonForTermination")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchReasonForTermination()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch ReasonForTermination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 347
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table292.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table292.AddRow(new string[] {
                            "Title",
                            "1"});
                table292.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table292.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table292.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table292.AddRow(new string[] {
                            "Gender",
                            "1"});
                table292.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table292.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table292.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table292.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table292.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table292.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 348
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table292, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table293.AddRow(new string[] {
                            "ReasonForTermination",
                            "2"});
#line 362
 testRunner.When("I patch the following Customer:", ((string)(null)), table293, "When ");
#line hidden
#line 365
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table294.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table294.AddRow(new string[] {
                            "Title",
                            "1"});
                table294.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table294.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table294.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table294.AddRow(new string[] {
                            "Gender",
                            "1"});
                table294.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table294.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table294.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table294.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table294.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 366
 testRunner.And("the response body should contain:", ((string)(null)), table294, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch IntroducedBy")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchIntroducedBy()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch IntroducedBy", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 381
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table295.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table295.AddRow(new string[] {
                            "Title",
                            "1"});
                table295.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table295.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table295.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table295.AddRow(new string[] {
                            "Gender",
                            "1"});
                table295.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table295.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table295.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table295.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table295.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table295.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 382
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table295, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table296.AddRow(new string[] {
                            "IntroducedBy",
                            "2"});
#line 396
 testRunner.When("I patch the following Customer:", ((string)(null)), table296, "When ");
#line hidden
#line 399
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table297.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table297.AddRow(new string[] {
                            "Title",
                            "1"});
                table297.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table297.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table297.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table297.AddRow(new string[] {
                            "Gender",
                            "1"});
                table297.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table297.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table297.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table297.AddRow(new string[] {
                            "IntroducedBy",
                            "2"});
                table297.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 400
 testRunner.And("the response body should contain:", ((string)(null)), table297, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch IntroducedByAdditionalInfo")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchIntroducedByAdditionalInfo()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch IntroducedByAdditionalInfo", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 415
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table298.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table298.AddRow(new string[] {
                            "Title",
                            "1"});
                table298.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table298.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table298.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table298.AddRow(new string[] {
                            "Gender",
                            "1"});
                table298.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table298.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table298.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table298.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table298.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table298.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 416
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table298, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table299.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "updated info"});
#line 430
 testRunner.When("I patch the following Customer:", ((string)(null)), table299, "When ");
#line hidden
#line 433
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table300 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table300.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table300.AddRow(new string[] {
                            "Title",
                            "1"});
                table300.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table300.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table300.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table300.AddRow(new string[] {
                            "Gender",
                            "1"});
                table300.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table300.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table300.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table300.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table300.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "updated info"});
#line 434
 testRunner.And("the response body should contain:", ((string)(null)), table300, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch With Existing DateOfTermination")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchWithExistingDateOfTermination()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch With Existing DateOfTermination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 449
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table301 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table301.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table301.AddRow(new string[] {
                            "Title",
                            "1"});
                table301.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table301.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table301.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table301.AddRow(new string[] {
                            "Gender",
                            "1"});
                table301.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table301.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table301.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table301.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table301.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table301.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table301.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table301.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 450
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table301, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table302.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "updated info"});
#line 466
 testRunner.When("I patch the following Customer:", ((string)(null)), table302, "When ");
#line hidden
#line 469
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
