// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Customer
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CustomerPatchV1")]
    public partial class CustomerPatchV1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Customer", "CustomerPatchV1", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateOfRegistration")]
        [NUnit.Framework.CategoryAttribute("customers")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDateOfRegistration()
        {
            string[] tagsOfScenario = new string[] {
                    "customers",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateOfRegistration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table371 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table371.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table371.AddRow(new string[] {
                            "Title",
                            "1"});
                table371.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table371.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table371.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table371.AddRow(new string[] {
                            "Gender",
                            "1"});
                table371.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table371.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table371.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table371.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table371.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table371.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 6
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table371, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table372 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table372.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-28T16:11:00Z"});
#line 20
  testRunner.When("I patch the following Customer:", ((string)(null)), table372, "When ");
#line hidden
#line 23
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table373 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table373.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-28T16:11:00Z"});
                table373.AddRow(new string[] {
                            "Title",
                            "1"});
                table373.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table373.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table373.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table373.AddRow(new string[] {
                            "Gender",
                            "1"});
                table373.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table373.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table373.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table373.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table373.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 24
  testRunner.And("the response body should contain:", ((string)(null)), table373, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Title")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchTitle()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Title", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table374 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table374.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table374.AddRow(new string[] {
                            "Title",
                            "1"});
                table374.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table374.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table374.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table374.AddRow(new string[] {
                            "Gender",
                            "1"});
                table374.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table374.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table374.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table374.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table374.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table374.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 43
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table374, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table375 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table375.AddRow(new string[] {
                            "Title",
                            "2"});
#line 57
  testRunner.When("I patch the following Customer:", ((string)(null)), table375, "When ");
#line hidden
#line 60
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table376 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table376.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table376.AddRow(new string[] {
                            "Title",
                            "2"});
                table376.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table376.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table376.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table376.AddRow(new string[] {
                            "Gender",
                            "1"});
                table376.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table376.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table376.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table376.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table376.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 61
  testRunner.And("the response body should contain:", ((string)(null)), table376, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch GivenName")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchGivenName()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch GivenName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 76
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table377 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table377.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table377.AddRow(new string[] {
                            "Title",
                            "1"});
                table377.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table377.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table377.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table377.AddRow(new string[] {
                            "Gender",
                            "1"});
                table377.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table377.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table377.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table377.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table377.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table377.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 77
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table377, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table378 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table378.AddRow(new string[] {
                            "GivenName",
                            "Bill"});
#line 91
  testRunner.When("I patch the following Customer:", ((string)(null)), table378, "When ");
#line hidden
#line 94
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table379 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table379.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table379.AddRow(new string[] {
                            "Title",
                            "1"});
                table379.AddRow(new string[] {
                            "GivenName",
                            "Bill"});
                table379.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table379.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table379.AddRow(new string[] {
                            "Gender",
                            "1"});
                table379.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table379.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table379.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table379.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table379.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 95
  testRunner.And("the response body should contain:", ((string)(null)), table379, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch FamilyName")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchFamilyName()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch FamilyName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 110
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table380 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table380.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table380.AddRow(new string[] {
                            "Title",
                            "1"});
                table380.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table380.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table380.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table380.AddRow(new string[] {
                            "Gender",
                            "1"});
                table380.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table380.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table380.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table380.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table380.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table380.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 111
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table380, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table381 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table381.AddRow(new string[] {
                            "FamilyName",
                            "Update"});
#line 125
  testRunner.When("I patch the following Customer:", ((string)(null)), table381, "When ");
#line hidden
#line 128
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table382 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table382.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table382.AddRow(new string[] {
                            "Title",
                            "1"});
                table382.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table382.AddRow(new string[] {
                            "FamilyName",
                            "Update"});
                table382.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table382.AddRow(new string[] {
                            "Gender",
                            "1"});
                table382.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table382.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table382.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table382.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table382.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 129
  testRunner.And("the response body should contain:", ((string)(null)), table382, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateofBirth")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchDateofBirth()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateofBirth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 144
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table383 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table383.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table383.AddRow(new string[] {
                            "Title",
                            "1"});
                table383.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table383.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table383.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table383.AddRow(new string[] {
                            "Gender",
                            "1"});
                table383.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table383.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table383.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table383.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table383.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table383.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 145
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table383, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table384 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table384.AddRow(new string[] {
                            "DateOfBirth",
                            "2005-07-27T13:45:00Z"});
#line 159
  testRunner.When("I patch the following Customer:", ((string)(null)), table384, "When ");
#line hidden
#line 162
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table385 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table385.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table385.AddRow(new string[] {
                            "Title",
                            "1"});
                table385.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table385.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table385.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-27T13:45:00Z"});
                table385.AddRow(new string[] {
                            "Gender",
                            "1"});
                table385.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table385.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table385.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table385.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table385.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 163
  testRunner.And("the response body should contain:", ((string)(null)), table385, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Gender")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchGender()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Gender", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 178
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table386 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table386.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table386.AddRow(new string[] {
                            "Title",
                            "1"});
                table386.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table386.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table386.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table386.AddRow(new string[] {
                            "Gender",
                            "1"});
                table386.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table386.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table386.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table386.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table386.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table386.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 179
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table386, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table387 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table387.AddRow(new string[] {
                            "Gender",
                            "2"});
#line 193
  testRunner.When("I patch the following Customer:", ((string)(null)), table387, "When ");
#line hidden
#line 196
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table388 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table388.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table388.AddRow(new string[] {
                            "Title",
                            "1"});
                table388.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table388.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table388.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table388.AddRow(new string[] {
                            "Gender",
                            "2"});
                table388.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table388.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table388.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table388.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table388.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 197
  testRunner.And("the response body should contain:", ((string)(null)), table388, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch UniqueLearnerNumber")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchUniqueLearnerNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch UniqueLearnerNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 212
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table389 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table389.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table389.AddRow(new string[] {
                            "Title",
                            "1"});
                table389.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table389.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table389.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table389.AddRow(new string[] {
                            "Gender",
                            "1"});
                table389.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table389.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table389.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table389.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table389.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table389.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 213
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table389, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table390 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table390.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543211"});
#line 227
  testRunner.When("I patch the following Customer:", ((string)(null)), table390, "When ");
#line hidden
#line 230
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table391 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table391.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table391.AddRow(new string[] {
                            "Title",
                            "1"});
                table391.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table391.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table391.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table391.AddRow(new string[] {
                            "Gender",
                            "1"});
                table391.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543211"});
                table391.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table391.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table391.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table391.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 231
  testRunner.And("the response body should contain:", ((string)(null)), table391, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch OptInUserResearch")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchOptInUserResearch()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch OptInUserResearch", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 246
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table392 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table392.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table392.AddRow(new string[] {
                            "Title",
                            "1"});
                table392.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table392.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table392.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table392.AddRow(new string[] {
                            "Gender",
                            "1"});
                table392.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table392.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table392.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table392.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table392.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table392.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 247
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table392, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table393 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table393.AddRow(new string[] {
                            "OptInUserResearch",
                            "false"});
#line 261
  testRunner.When("I patch the following Customer:", ((string)(null)), table393, "When ");
#line hidden
#line 264
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table394.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table394.AddRow(new string[] {
                            "Title",
                            "1"});
                table394.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table394.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table394.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table394.AddRow(new string[] {
                            "Gender",
                            "1"});
                table394.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table394.AddRow(new string[] {
                            "OptInUserResearch",
                            "false"});
                table394.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table394.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table394.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 265
  testRunner.And("the response body should contain:", ((string)(null)), table394, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch OptInMarketResearch")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchOptInMarketResearch()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch OptInMarketResearch", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 280
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table395.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table395.AddRow(new string[] {
                            "Title",
                            "1"});
                table395.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table395.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table395.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table395.AddRow(new string[] {
                            "Gender",
                            "1"});
                table395.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table395.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table395.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table395.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table395.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table395.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 281
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table395, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table396.AddRow(new string[] {
                            "OptInMarketResearch",
                            "true"});
#line 295
  testRunner.When("I patch the following Customer:", ((string)(null)), table396, "When ");
#line hidden
#line 298
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table397.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table397.AddRow(new string[] {
                            "Title",
                            "1"});
                table397.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table397.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table397.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table397.AddRow(new string[] {
                            "Gender",
                            "1"});
                table397.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table397.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table397.AddRow(new string[] {
                            "OptInMarketResearch",
                            "true"});
                table397.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table397.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 299
  testRunner.And("the response body should contain:", ((string)(null)), table397, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateOfTermination")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchDateOfTermination()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateOfTermination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 314
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table398.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table398.AddRow(new string[] {
                            "Title",
                            "1"});
                table398.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table398.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table398.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table398.AddRow(new string[] {
                            "Gender",
                            "1"});
                table398.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table398.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table398.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table398.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table398.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table398.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 315
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table398, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table399.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-08-27T14:45:00Z"});
#line 329
  testRunner.When("I patch the following Customer:", ((string)(null)), table399, "When ");
#line hidden
#line 332
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table400.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table400.AddRow(new string[] {
                            "Title",
                            "1"});
                table400.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table400.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table400.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table400.AddRow(new string[] {
                            "Gender",
                            "1"});
                table400.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table400.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table400.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table400.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table400.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 333
  testRunner.And("the response body should contain:", ((string)(null)), table400, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch ReasonForTermination")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchReasonForTermination()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch ReasonForTermination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 348
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table401.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table401.AddRow(new string[] {
                            "Title",
                            "1"});
                table401.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table401.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table401.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table401.AddRow(new string[] {
                            "Gender",
                            "1"});
                table401.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table401.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table401.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table401.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table401.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table401.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 349
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table401, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table402.AddRow(new string[] {
                            "ReasonForTermination",
                            "2"});
#line 363
  testRunner.When("I patch the following Customer:", ((string)(null)), table402, "When ");
#line hidden
#line 366
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table403.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table403.AddRow(new string[] {
                            "Title",
                            "1"});
                table403.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table403.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table403.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table403.AddRow(new string[] {
                            "Gender",
                            "1"});
                table403.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table403.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table403.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table403.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table403.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 367
  testRunner.And("the response body should contain:", ((string)(null)), table403, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch IntroducedBy")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchIntroducedBy()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch IntroducedBy", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 382
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table404.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table404.AddRow(new string[] {
                            "Title",
                            "1"});
                table404.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table404.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table404.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table404.AddRow(new string[] {
                            "Gender",
                            "1"});
                table404.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table404.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table404.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table404.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table404.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table404.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 383
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table404, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table405.AddRow(new string[] {
                            "IntroducedBy",
                            "2"});
#line 397
  testRunner.When("I patch the following Customer:", ((string)(null)), table405, "When ");
#line hidden
#line 400
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table406.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table406.AddRow(new string[] {
                            "Title",
                            "1"});
                table406.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table406.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table406.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table406.AddRow(new string[] {
                            "Gender",
                            "1"});
                table406.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table406.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table406.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table406.AddRow(new string[] {
                            "IntroducedBy",
                            "2"});
                table406.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 401
  testRunner.And("the response body should contain:", ((string)(null)), table406, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch IntroducedByAdditionalInfo")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchIntroducedByAdditionalInfo()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch IntroducedByAdditionalInfo", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 416
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table407.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table407.AddRow(new string[] {
                            "Title",
                            "1"});
                table407.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table407.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table407.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table407.AddRow(new string[] {
                            "Gender",
                            "1"});
                table407.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table407.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table407.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table407.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table407.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table407.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 417
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table407, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table408 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table408.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "updated info"});
#line 431
  testRunner.When("I patch the following Customer:", ((string)(null)), table408, "When ");
#line hidden
#line 434
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table409 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table409.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table409.AddRow(new string[] {
                            "Title",
                            "1"});
                table409.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table409.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table409.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table409.AddRow(new string[] {
                            "Gender",
                            "1"});
                table409.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table409.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table409.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table409.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table409.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "updated info"});
#line 435
  testRunner.And("the response body should contain:", ((string)(null)), table409, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch With Existing DateOfTermination")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PatchWithExistingDateOfTermination()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch With Existing DateOfTermination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 451
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table410 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table410.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table410.AddRow(new string[] {
                            "Title",
                            "1"});
                table410.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table410.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table410.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table410.AddRow(new string[] {
                            "Gender",
                            "1"});
                table410.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table410.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table410.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table410.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table410.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table410.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table410.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table410.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 452
  testRunner.Given("I post a Customer with the following details:", ((string)(null)), table410, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table411 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table411.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "updated info"});
#line 468
  testRunner.When("I patch the following Customer:", ((string)(null)), table411, "When ");
#line hidden
#line 471
  testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
