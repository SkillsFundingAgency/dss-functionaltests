// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Customer
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CustomerPostV2")]
    public partial class CustomerPostV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Customer", "CustomerPostV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Missing GivenName")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PostMissingGivenName()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Missing GivenName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table394.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table394.AddRow(new string[] {
                            "Title",
                            "2"});
                table394.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table394.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table394.AddRow(new string[] {
                            "Gender",
                            "1"});
                table394.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table394.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table394.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table394.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table394.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table394.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table394.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table394.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 5
 testRunner.Given("I post a Customer with the following details V2:", ((string)(null)), table394, "Given ");
#line hidden
#line 20
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.And("the error message should be \"Given Name is a required field\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Missing FamilyName")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PostMissingFamilyName()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Missing FamilyName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table395.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table395.AddRow(new string[] {
                            "Title",
                            "13"});
                table395.AddRow(new string[] {
                            "GivenName",
                            "Customer"});
                table395.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table395.AddRow(new string[] {
                            "Gender",
                            "1"});
                table395.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table395.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table395.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table395.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table395.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table395.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table395.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 25
 testRunner.Given("I post a Customer with the following details V2:", ((string)(null)), table395, "Given ");
#line hidden
#line 39
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Customer")]
        [NUnit.Framework.CategoryAttribute("customers")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostValidCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "customers",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table396.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table396.AddRow(new string[] {
                            "Title",
                            "1"});
                table396.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table396.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table396.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table396.AddRow(new string[] {
                            "Gender",
                            "1"});
                table396.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table396.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table396.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table396.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table396.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table396.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table396.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table396.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 43
 testRunner.Given("I post a Customer with the following details V2:", ((string)(null)), table396, "Given ");
#line hidden
#line 59
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table397.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table397.AddRow(new string[] {
                            "Title",
                            "1"});
                table397.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table397.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table397.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table397.AddRow(new string[] {
                            "Gender",
                            "1"});
                table397.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table397.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table397.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table397.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table397.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table397.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table397.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table397.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 62
 testRunner.And("the response body should contain:", ((string)(null)), table397, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Customer with subcontractorId")]
        [NUnit.Framework.CategoryAttribute("customers")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PostValidCustomerWithSubcontractorId()
        {
            string[] tagsOfScenario = new string[] {
                    "customers",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Customer with subcontractorId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table398.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table398.AddRow(new string[] {
                            "Title",
                            "1"});
                table398.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table398.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table398.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table398.AddRow(new string[] {
                            "Gender",
                            "1"});
                table398.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table398.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table398.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table398.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table398.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table398.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table398.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table398.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 81
 testRunner.Given("I post a Customer with the following details V2:", ((string)(null)), table398, "Given ");
#line hidden
#line 97
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table399.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table399.AddRow(new string[] {
                            "Title",
                            "1"});
                table399.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table399.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table399.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table399.AddRow(new string[] {
                            "Gender",
                            "1"});
                table399.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table399.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table399.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table399.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table399.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table399.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table399.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table399.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 100
 testRunner.And("the response body should contain:", ((string)(null)), table399, "And ");
#line hidden
#line 116
 testRunner.And("the response body should contain the SubContractorId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Customer with maximum field lengths")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PostValidCustomerWithMaximumFieldLengths()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Customer with maximum field lengths", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table400.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table400.AddRow(new string[] {
                            "Title",
                            "1"});
                table400.AddRow(new string[] {
                            "GivenName",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table400.AddRow(new string[] {
                            "FamilyName",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table400.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table400.AddRow(new string[] {
                            "Gender",
                            "1"});
                table400.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table400.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table400.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table400.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table400.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table400.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table400.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table400.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 120
 testRunner.Given("I post a Customer with the following details V2:", ((string)(null)), table400, "Given ");
#line hidden
#line 136
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table401.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table401.AddRow(new string[] {
                            "Title",
                            "1"});
                table401.AddRow(new string[] {
                            "GivenName",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table401.AddRow(new string[] {
                            "FamilyName",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table401.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table401.AddRow(new string[] {
                            "Gender",
                            "1"});
                table401.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table401.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table401.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table401.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table401.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table401.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table401.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table401.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
#line 137
 testRunner.And("the response body should contain:", ((string)(null)), table401, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Customer with only Mandatory fields")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PostCustomerWithOnlyMandatoryFields()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Customer with only Mandatory fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 155
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table402.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table402.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 156
 testRunner.Given("I post a Customer with the following details V2:", ((string)(null)), table402, "Given ");
#line hidden
#line 160
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 162
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table403.AddRow(new string[] {
                            "Title",
                            "99"});
                table403.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table403.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table403.AddRow(new string[] {
                            "DateofBirth",
                            ""});
                table403.AddRow(new string[] {
                            "Gender",
                            "99"});
                table403.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            ""});
                table403.AddRow(new string[] {
                            "OptInUserResearch",
                            "false"});
                table403.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table403.AddRow(new string[] {
                            "DateOfTermination",
                            ""});
                table403.AddRow(new string[] {
                            "ReasonForTermination",
                            ""});
                table403.AddRow(new string[] {
                            "IntroducedBy",
                            "99"});
                table403.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            ""});
#line 163
 testRunner.And("the response body should contain:", ((string)(null)), table403, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change Feed for Post Customer")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void ChangeFeedForPostCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change Feed for Post Customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 179
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table404.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table404.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 180
 testRunner.Given("I post a Customer with the following details V2:", ((string)(null)), table404, "Given ");
#line hidden
#line 184
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 186
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 187
 testRunner.Given("I wait for 10 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
 testRunner.Then("there should be a record in the dss-customers table with CustomerId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Invalid DateOfRegistration")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PostInvalidDateOfRegistration()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Invalid DateOfRegistration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 191
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table405.AddRow(new string[] {
                            "DateOfRegistration",
                            "2048-07-27T16:11:00Z"});
                table405.AddRow(new string[] {
                            "Title",
                            "13"});
                table405.AddRow(new string[] {
                            "GivenName",
                            "Customer"});
                table405.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table405.AddRow(new string[] {
                            "Gender",
                            "1"});
                table405.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table405.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table405.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table405.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table405.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table405.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table405.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
#line 192
 testRunner.Given("I post a Customer with the following details V2:", ((string)(null)), table405, "Given ");
#line hidden
#line 206
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 207
 testRunner.And("the error message should be \"Family Name is a required field\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given names with spaces")]
        [NUnit.Framework.CategoryAttribute("customers")]
        [NUnit.Framework.TestCaseAttribute("Sammy Jo", null)]
        [NUnit.Framework.TestCaseAttribute("Sara-Jane", null)]
        [NUnit.Framework.TestCaseAttribute("Sarah - Jane", null)]
        public virtual void GivenNamesWithSpaces(string givenName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "customers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("GivenName", givenName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given names with spaces", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 210
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 211
 testRunner.Given(string.Format("I post a customer with the given name \'{0}\' V2", givenName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 212
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Family names with spaces")]
        [NUnit.Framework.CategoryAttribute("customers")]
        [NUnit.Framework.TestCaseAttribute("Da Silva", null)]
        [NUnit.Framework.TestCaseAttribute("De La Cruz", null)]
        [NUnit.Framework.TestCaseAttribute("Cohen Il", null)]
        [NUnit.Framework.TestCaseAttribute("Smith-Jones", null)]
        [NUnit.Framework.TestCaseAttribute("Smith - Jones", null)]
        public virtual void FamilyNamesWithSpaces(string familyName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "customers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FamilyName", familyName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Family names with spaces", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 222
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 223
 testRunner.Given(string.Format("I post a customer with the given name \'{0}\' V2", familyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 224
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
