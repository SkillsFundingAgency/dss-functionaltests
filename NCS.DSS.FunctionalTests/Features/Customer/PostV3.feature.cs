// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Customer
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CustomerPostV3")]
    public partial class CustomerPostV3Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV3.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Customer", "CustomerPostV3", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Missing GivenName")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PostMissingGivenName()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Missing GivenName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table583 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table583.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table583.AddRow(new string[] {
                            "Title",
                            "2"});
                table583.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table583.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table583.AddRow(new string[] {
                            "Gender",
                            "1"});
                table583.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table583.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table583.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table583.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table583.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table583.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table583.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table583.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table583.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 5
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table583, "Given ");
#line hidden
#line 21
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.And("the error message should be \"Given Name is a required field\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Missing FamilyName")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PostMissingFamilyName()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Missing FamilyName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table584 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table584.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table584.AddRow(new string[] {
                            "Title",
                            "13"});
                table584.AddRow(new string[] {
                            "GivenName",
                            "Customer"});
                table584.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table584.AddRow(new string[] {
                            "Gender",
                            "1"});
                table584.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table584.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table584.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table584.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table584.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table584.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table584.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table584.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 26
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table584, "Given ");
#line hidden
#line 41
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Customer")]
        [NUnit.Framework.CategoryAttribute("customers")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostValidCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "customers",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table585 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table585.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table585.AddRow(new string[] {
                            "Title",
                            "1"});
                table585.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table585.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table585.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table585.AddRow(new string[] {
                            "Gender",
                            "1"});
                table585.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table585.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table585.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table585.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table585.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table585.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table585.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table585.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table585.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 45
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table585, "Given ");
#line hidden
#line 62
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table586 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table586.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table586.AddRow(new string[] {
                            "Title",
                            "1"});
                table586.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table586.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table586.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table586.AddRow(new string[] {
                            "Gender",
                            "1"});
                table586.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table586.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table586.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table586.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table586.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table586.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table586.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table586.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table586.AddRow(new string[] {
                            "PriorityGroups",
                            "[1, 3]"});
#line 65
 testRunner.And("the response body should contain:", ((string)(null)), table586, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Customer with subcontractorId")]
        [NUnit.Framework.CategoryAttribute("customers")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PostValidCustomerWithSubcontractorId()
        {
            string[] tagsOfScenario = new string[] {
                    "customers",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Customer with subcontractorId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table587 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table587.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table587.AddRow(new string[] {
                            "Title",
                            "1"});
                table587.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table587.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table587.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table587.AddRow(new string[] {
                            "Gender",
                            "1"});
                table587.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table587.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table587.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table587.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table587.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table587.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table587.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table587.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table587.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 85
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table587, "Given ");
#line hidden
#line 102
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table588 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table588.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table588.AddRow(new string[] {
                            "Title",
                            "1"});
                table588.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table588.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table588.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table588.AddRow(new string[] {
                            "Gender",
                            "1"});
                table588.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table588.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table588.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table588.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table588.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table588.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table588.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table588.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table588.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 105
 testRunner.And("the response body should contain:", ((string)(null)), table588, "And ");
#line hidden
#line 122
 testRunner.And("the response body should contain the SubContractorId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Customer with maximum field lengths")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PostValidCustomerWithMaximumFieldLengths()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Customer with maximum field lengths", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table589 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table589.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table589.AddRow(new string[] {
                            "Title",
                            "1"});
                table589.AddRow(new string[] {
                            "GivenName",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table589.AddRow(new string[] {
                            "FamilyName",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table589.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table589.AddRow(new string[] {
                            "Gender",
                            "1"});
                table589.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table589.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table589.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table589.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table589.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table589.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table589.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table589.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table589.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 126
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table589, "Given ");
#line hidden
#line 143
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table590 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table590.AddRow(new string[] {
                            "DateOfRegistration",
                            "2018-07-27T16:11:00Z"});
                table590.AddRow(new string[] {
                            "Title",
                            "1"});
                table590.AddRow(new string[] {
                            "GivenName",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table590.AddRow(new string[] {
                            "FamilyName",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table590.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table590.AddRow(new string[] {
                            "Gender",
                            "1"});
                table590.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table590.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table590.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table590.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table590.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table590.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table590.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "AbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijAbcdefghijA" +
                                "bcdefghijAbcdefghij"});
                table590.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-06-21T14:45:00Z"});
                table590.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 144
 testRunner.And("the response body should contain:", ((string)(null)), table590, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Customer with only Mandatory fields")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PostCustomerWithOnlyMandatoryFields()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Customer with only Mandatory fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 163
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table591 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table591.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table591.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table591.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 164
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table591, "Given ");
#line hidden
#line 169
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table592 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table592.AddRow(new string[] {
                            "Title",
                            "99"});
                table592.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table592.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table592.AddRow(new string[] {
                            "DateofBirth",
                            ""});
                table592.AddRow(new string[] {
                            "Gender",
                            "99"});
                table592.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            ""});
                table592.AddRow(new string[] {
                            "OptInUserResearch",
                            "false"});
                table592.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table592.AddRow(new string[] {
                            "DateOfTermination",
                            ""});
                table592.AddRow(new string[] {
                            "ReasonForTermination",
                            ""});
                table592.AddRow(new string[] {
                            "IntroducedBy",
                            "99"});
                table592.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            ""});
                table592.AddRow(new string[] {
                            "PriorityGroups",
                            "[1,3]"});
#line 172
 testRunner.And("the response body should contain:", ((string)(null)), table592, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change Feed for Post Customer")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void ChangeFeedForPostCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change Feed for Post Customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table593 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table593.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table593.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table593.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 190
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table593, "Given ");
#line hidden
#line 195
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 197
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
 testRunner.Given("I wait for 10 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 199
 testRunner.Then("there should be a record in the dss-customers table Ignoring \'PriorityGroups\' wit" +
                        "h CustomerId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Invalid DateOfRegistration")]
        [NUnit.Framework.CategoryAttribute("customers")]
        public virtual void PostInvalidDateOfRegistration()
        {
            string[] tagsOfScenario = new string[] {
                    "customers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Invalid DateOfRegistration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 203
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table594 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table594.AddRow(new string[] {
                            "DateOfRegistration",
                            "2048-07-27T16:11:00Z"});
                table594.AddRow(new string[] {
                            "Title",
                            "13"});
                table594.AddRow(new string[] {
                            "GivenName",
                            "Customer"});
                table594.AddRow(new string[] {
                            "DateofBirth",
                            "2005-07-26T13:45:00Z"});
                table594.AddRow(new string[] {
                            "Gender",
                            "1"});
                table594.AddRow(new string[] {
                            "UniqueLearnerNumber",
                            "9876543210"});
                table594.AddRow(new string[] {
                            "OptInUserResearch",
                            "true"});
                table594.AddRow(new string[] {
                            "OptInMarketResearch",
                            "false"});
                table594.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-27T14:45:00Z"});
                table594.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
                table594.AddRow(new string[] {
                            "IntroducedBy",
                            "1"});
                table594.AddRow(new string[] {
                            "IntroducedByAdditionalInfo",
                            "additional info"});
                table594.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 204
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table594, "Given ");
#line hidden
#line 219
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 220
 testRunner.And("the error message should be \"Family Name is a required field\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given names with spaces")]
        [NUnit.Framework.CategoryAttribute("customers")]
        [NUnit.Framework.TestCaseAttribute("Sammy Jo", null)]
        [NUnit.Framework.TestCaseAttribute("Sara-Jane", null)]
        [NUnit.Framework.TestCaseAttribute("Sarah - Jane", null)]
        public virtual void GivenNamesWithSpaces(string givenName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "customers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("GivenName", givenName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given names with spaces", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 223
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 224
 testRunner.Given(string.Format("I post a customer with the given name \'{0}\' V3", givenName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 225
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Family names with spaces")]
        [NUnit.Framework.CategoryAttribute("customers")]
        [NUnit.Framework.TestCaseAttribute("Da Silva", null)]
        [NUnit.Framework.TestCaseAttribute("De La Cruz", null)]
        [NUnit.Framework.TestCaseAttribute("Cohen Il", null)]
        [NUnit.Framework.TestCaseAttribute("Smith-Jones", null)]
        [NUnit.Framework.TestCaseAttribute("Smith - Jones", null)]
        public virtual void FamilyNamesWithSpaces(string familyName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "customers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FamilyName", familyName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Family names with spaces", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 235
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 236
 testRunner.Given(string.Format("I post a customer with the given name \'{0}\' V3", familyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 237
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
