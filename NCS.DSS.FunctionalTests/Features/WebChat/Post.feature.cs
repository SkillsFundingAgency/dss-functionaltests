// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Webchat
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("WebChatPost")]
    public partial class WebChatPostFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Post.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Webchat", "WebChatPost", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table975 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table975.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table975.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table975, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table976 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table976.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table976.AddRow(new string[] {
                        "Channel",
                        "2"});
            table976.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table976.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 8
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table976, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a webchat with all valid values")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void CreateAWebchatWithAllValidValues()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a webchat with all valid values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table977 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table977.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table977.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table977.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table977.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table977.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table977.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table977.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 18
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table977, "Given ");
#line hidden
#line 27
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table978 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table978.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table978.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table978.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table978.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table978.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table978.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table978.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 28
  testRunner.And("the response body should contain:", ((string)(null)), table978, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a webchat supplying lastmodifieddate")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void CreateAWebchatSupplyingLastmodifieddate()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a webchat supplying lastmodifieddate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table979 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table979.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table979.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table979.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table979.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table979.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table979.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table979.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
                table979.AddRow(new string[] {
                            "lastmodifieddate",
                            "2018-07-19T12:45:00Z"});
#line 42
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table979, "Given ");
#line hidden
#line 52
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table980 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table980.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table980.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table980.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table980.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table980.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table980.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table980.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
                table980.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-07-19T12:45:00Z"});
#line 53
  testRunner.And("the response body should contain:", ((string)(null)), table980, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a webchat with only mandatory values")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void CreateAWebchatWithOnlyMandatoryValues()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a webchat with only mandatory values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table981 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table981.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table981.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table981.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
#line 68
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table981, "Given ");
#line hidden
#line 73
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table982 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table982.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table982.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table982.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
#line 74
  testRunner.And("the response body should contain:", ((string)(null)), table982, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
