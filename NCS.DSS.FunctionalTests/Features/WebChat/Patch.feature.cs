// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.WebChat
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Patch")]
    public partial class PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/WebChat", "Patch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table731 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table731.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table731.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
            table731.AddRow(new string[] {
                        "PriorityGroups",
                        "1,3"});
#line 4
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table731, "Given ");
#line hidden
#line 9
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table732 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table732.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table732.AddRow(new string[] {
                        "Channel",
                        "2"});
            table732.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table732.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 10
 testRunner.Given("I post an Interaction with the following details:", ((string)(null)), table732, "Given ");
#line hidden
#line 16
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DigitalReference")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDigitalReference()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DigitalReference", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table733 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table733.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table733.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table733.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table733.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table733.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table733.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table733.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 20
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table733, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table734 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table734.AddRow(new string[] {
                            "DigitalReference",
                            "abc12345"});
#line 29
 testRunner.When("I patch the following:", ((string)(null)), table734, "When ");
#line hidden
#line 32
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table735 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table735.AddRow(new string[] {
                            "DigitalReference",
                            "abc12345"});
                table735.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table735.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table735.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table735.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table735.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table735.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 33
 testRunner.And("the response body should contain:", ((string)(null)), table735, "And ");
#line hidden
#line 42
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatStartDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatStartDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatStartDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table736 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table736.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table736.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table736.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table736.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table736.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table736.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table736.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 50
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table736, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table737 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table737.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:00:00Z"});
#line 59
 testRunner.When("I patch the following:", ((string)(null)), table737, "When ");
#line hidden
#line 62
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table738 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table738.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table738.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:00:00Z"});
                table738.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table738.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table738.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table738.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 63
 testRunner.And("the response body should contain:", ((string)(null)), table738, "And ");
#line hidden
#line 73
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatEndDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatEndDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatEndDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table739 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table739.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table739.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table739.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table739.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table739.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table739.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table739.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 80
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table739, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table740 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table740.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
#line 89
 testRunner.When("I patch the following:", ((string)(null)), table740, "When ");
#line hidden
#line 92
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table741 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table741.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table741.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table741.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table741.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table741.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table741.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 93
 testRunner.And("the response body should contain:", ((string)(null)), table741, "And ");
#line hidden
#line 103
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 104
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatDuration")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        [NUnit.Framework.CategoryAttribute("Ignore")]
        public virtual void PatchWebChatDuration()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats",
                    "Ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatDuration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table742 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table742.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table742.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table742.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table742.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table742.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table742.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table742.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 109
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table742, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table743 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table743.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:01"});
#line 118
 testRunner.When("I patch the following:", ((string)(null)), table743, "When ");
#line hidden
#line 121
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table744 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table744.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table744.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table744.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table744.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:01"});
                table744.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table744.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table744.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 122
 testRunner.And("the response body should contain:", ((string)(null)), table744, "And ");
#line hidden
#line 132
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 133
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchLastModifiedDate()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch LastModifiedDate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 137
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table745 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table745.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table745.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table745.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table745.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table745.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table745.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table745.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 138
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table745, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table746 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table746.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 147
 testRunner.When("I patch the following:", ((string)(null)), table746, "When ");
#line hidden
#line 150
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table747 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table747.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table747.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table747.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table747.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table747.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table747.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table747.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
                table747.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 151
 testRunner.And("the response body should contain:", ((string)(null)), table747, "And ");
#line hidden
#line 162
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 163
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch LastModifiedDate and WebChatEndDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchLastModifiedDateAndWebChatEndDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch LastModifiedDate and WebChatEndDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 167
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table748 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table748.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table748.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table748.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table748.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table748.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table748.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table748.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 168
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table748, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table749 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table749.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table749.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 177
 testRunner.When("I patch the following:", ((string)(null)), table749, "When ");
#line hidden
#line 181
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table750 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table750.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table750.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table750.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table750.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table750.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table750.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
                table750.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 182
 testRunner.And("the response body should contain:", ((string)(null)), table750, "And ");
#line hidden
#line 193
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 194
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatNarrative")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatNarrative()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatNarrative", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 198
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table751 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table751.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table751.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table751.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table751.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table751.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table751.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table751.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 199
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table751, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table752 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table752.AddRow(new string[] {
                            "WebChatNarrative",
                            "updated text"});
#line 208
 testRunner.When("I patch the following:", ((string)(null)), table752, "When ");
#line hidden
#line 211
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table753 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table753.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table753.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table753.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table753.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table753.AddRow(new string[] {
                            "WebChatNarrative",
                            "updated text"});
                table753.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table753.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 212
 testRunner.And("the response body should contain:", ((string)(null)), table753, "And ");
#line hidden
#line 222
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 223
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch SentToCustomer")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchSentToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch SentToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 227
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table754 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table754.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table754.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table754.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table754.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table754.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table754.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table754.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 228
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table754, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table755 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table755.AddRow(new string[] {
                            "SentToCustomer",
                            "false"});
#line 237
 testRunner.When("I patch the following:", ((string)(null)), table755, "When ");
#line hidden
#line 240
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table756 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table756.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table756.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table756.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table756.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table756.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table756.AddRow(new string[] {
                            "SentToCustomer",
                            "false"});
                table756.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 241
 testRunner.And("the response body should contain:", ((string)(null)), table756, "And ");
#line hidden
#line 251
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 252
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateandTimeSentToCustomers")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchDateandTimeSentToCustomers()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateandTimeSentToCustomers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 256
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table757 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table757.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table757.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table757.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table757.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table757.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table757.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table757.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 257
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table757, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table758 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table758.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-21T13:45:00Z"});
#line 266
 testRunner.When("I patch the following:", ((string)(null)), table758, "When ");
#line hidden
#line 269
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table759 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table759.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table759.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table759.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table759.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table759.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table759.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table759.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-21T13:45:00Z"});
#line 270
 testRunner.And("the response body should contain:", ((string)(null)), table759, "And ");
#line hidden
#line 280
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 281
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
