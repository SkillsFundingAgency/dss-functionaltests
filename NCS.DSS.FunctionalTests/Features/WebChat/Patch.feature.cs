// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.WebChat
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Patch")]
    public partial class PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/WebChat", "Patch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table925 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table925.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table925.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table925, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table926 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table926.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table926.AddRow(new string[] {
                        "Channel",
                        "2"});
            table926.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table926.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 8
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table926, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DigitalReference")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDigitalReference()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DigitalReference", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table927 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table927.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table927.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table927.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table927.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table927.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table927.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table927.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 17
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table927, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table928 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table928.AddRow(new string[] {
                            "DigitalReference",
                            "abc12345"});
#line 26
 testRunner.When("I patch the following:", ((string)(null)), table928, "When ");
#line hidden
#line 29
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table929 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table929.AddRow(new string[] {
                            "DigitalReference",
                            "abc12345"});
                table929.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table929.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table929.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table929.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table929.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table929.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 30
 testRunner.And("the response body should contain:", ((string)(null)), table929, "And ");
#line hidden
#line 39
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatStartDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatStartDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatStartDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table930 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table930.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table930.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table930.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table930.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table930.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table930.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table930.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 47
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table930, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table931 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table931.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:00:00Z"});
#line 56
 testRunner.When("I patch the following:", ((string)(null)), table931, "When ");
#line hidden
#line 59
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table932 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table932.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table932.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:00:00Z"});
                table932.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table932.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table932.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table932.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 60
 testRunner.And("the response body should contain:", ((string)(null)), table932, "And ");
#line hidden
#line 70
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatEndDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatEndDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatEndDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table933 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table933.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table933.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table933.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table933.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table933.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table933.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table933.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 77
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table933, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table934 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table934.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
#line 86
 testRunner.When("I patch the following:", ((string)(null)), table934, "When ");
#line hidden
#line 89
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table935 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table935.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table935.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table935.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table935.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table935.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table935.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 90
 testRunner.And("the response body should contain:", ((string)(null)), table935, "And ");
#line hidden
#line 100
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatDuration")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        [NUnit.Framework.CategoryAttribute("Ignore")]
        public virtual void PatchWebChatDuration()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats",
                    "Ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatDuration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table936 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table936.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table936.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table936.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table936.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table936.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table936.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table936.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 106
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table936, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table937 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table937.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:01"});
#line 115
 testRunner.When("I patch the following:", ((string)(null)), table937, "When ");
#line hidden
#line 118
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table938 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table938.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table938.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table938.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table938.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:01"});
                table938.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table938.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table938.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 119
 testRunner.And("the response body should contain:", ((string)(null)), table938, "And ");
#line hidden
#line 129
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 130
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchLastModifiedDate()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch LastModifiedDate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 134
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table939 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table939.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table939.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table939.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table939.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table939.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table939.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table939.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 135
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table939, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table940 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table940.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 144
 testRunner.When("I patch the following:", ((string)(null)), table940, "When ");
#line hidden
#line 147
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table941 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table941.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table941.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table941.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table941.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table941.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table941.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table941.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
                table941.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 148
 testRunner.And("the response body should contain:", ((string)(null)), table941, "And ");
#line hidden
#line 159
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 160
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch LastModifiedDate and WebChatEndDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchLastModifiedDateAndWebChatEndDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch LastModifiedDate and WebChatEndDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 164
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table942 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table942.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table942.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table942.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table942.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table942.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table942.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table942.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 165
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table942, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table943 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table943.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table943.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 174
 testRunner.When("I patch the following:", ((string)(null)), table943, "When ");
#line hidden
#line 178
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table944 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table944.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table944.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table944.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table944.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table944.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table944.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
                table944.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 179
 testRunner.And("the response body should contain:", ((string)(null)), table944, "And ");
#line hidden
#line 190
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 191
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatNarrative")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatNarrative()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatNarrative", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 195
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table945 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table945.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table945.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table945.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table945.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table945.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table945.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table945.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 196
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table945, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table946 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table946.AddRow(new string[] {
                            "WebChatNarrative",
                            "updated text"});
#line 205
 testRunner.When("I patch the following:", ((string)(null)), table946, "When ");
#line hidden
#line 208
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table947 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table947.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table947.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table947.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table947.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table947.AddRow(new string[] {
                            "WebChatNarrative",
                            "updated text"});
                table947.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table947.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 209
 testRunner.And("the response body should contain:", ((string)(null)), table947, "And ");
#line hidden
#line 219
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 220
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch SentToCustomer")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchSentToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch SentToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 224
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table948 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table948.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table948.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table948.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table948.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table948.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table948.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table948.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 225
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table948, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table949 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table949.AddRow(new string[] {
                            "SentToCustomer",
                            "false"});
#line 234
 testRunner.When("I patch the following:", ((string)(null)), table949, "When ");
#line hidden
#line 237
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table950 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table950.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table950.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table950.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table950.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table950.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table950.AddRow(new string[] {
                            "SentToCustomer",
                            "false"});
                table950.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 238
 testRunner.And("the response body should contain:", ((string)(null)), table950, "And ");
#line hidden
#line 248
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 249
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateandTimeSentToCustomers")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchDateandTimeSentToCustomers()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateandTimeSentToCustomers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 253
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table951 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table951.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table951.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table951.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table951.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table951.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table951.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table951.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 254
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table951, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table952 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table952.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-21T13:45:00Z"});
#line 263
 testRunner.When("I patch the following:", ((string)(null)), table952, "When ");
#line hidden
#line 266
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table953 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table953.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table953.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table953.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table953.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table953.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table953.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table953.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-21T13:45:00Z"});
#line 267
 testRunner.And("the response body should contain:", ((string)(null)), table953, "And ");
#line hidden
#line 277
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 278
 testRunner.Then("there should be a record in the dss-webchats table with WebchatId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
