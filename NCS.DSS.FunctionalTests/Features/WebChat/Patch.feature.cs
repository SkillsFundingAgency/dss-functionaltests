// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Webchat
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Patch")]
    public partial class PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Webchat", "Patch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1124 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1124.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table1124.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table1124, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1125 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1125.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table1125.AddRow(new string[] {
                        "Channel",
                        "2"});
            table1125.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table1125.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 8
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table1125, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DigitalReference")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDigitalReference()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DigitalReference", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1126 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1126.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1126.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1126.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1126.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1126.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1126.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1126.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 20
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table1126, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1127 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1127.AddRow(new string[] {
                            "DigitalReference",
                            "abc12345"});
#line 29
 testRunner.When("I patch the following:", ((string)(null)), table1127, "When ");
#line hidden
#line 32
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1128 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1128.AddRow(new string[] {
                            "DigitalReference",
                            "abc12345"});
                table1128.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1128.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1128.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1128.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1128.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1128.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 33
  testRunner.And("the response body should contain:", ((string)(null)), table1128, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatStartDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatStartDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatStartDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 47
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1129 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1129.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1129.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1129.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1129.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1129.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1129.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1129.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 49
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table1129, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1130 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1130.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:00:00Z"});
#line 58
 testRunner.When("I patch the following:", ((string)(null)), table1130, "When ");
#line hidden
#line 61
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1131 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1131.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1131.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:00:00Z"});
                table1131.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1131.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1131.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1131.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 62
  testRunner.And("the response body should contain:", ((string)(null)), table1131, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatEndDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatEndDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatEndDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 76
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1132 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1132.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1132.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1132.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1132.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1132.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1132.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1132.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 78
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table1132, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1133 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1133.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
#line 87
 testRunner.When("I patch the following:", ((string)(null)), table1133, "When ");
#line hidden
#line 90
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1134 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1134.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1134.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1134.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table1134.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1134.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1134.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 91
  testRunner.And("the response body should contain:", ((string)(null)), table1134, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatDuration")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        [NUnit.Framework.CategoryAttribute("Ignore")]
        public virtual void PatchWebChatDuration()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats",
                    "Ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatDuration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 106
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1135 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1135.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1135.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1135.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1135.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1135.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1135.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1135.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 107
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table1135, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1136 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1136.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:01"});
#line 116
 testRunner.When("I patch the following:", ((string)(null)), table1136, "When ");
#line hidden
#line 119
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1137 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1137.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1137.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1137.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1137.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:01"});
                table1137.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1137.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1137.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 120
  testRunner.And("the response body should contain:", ((string)(null)), table1137, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchLastModifiedDate()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch LastModifiedDate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 134
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1138 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1138.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1138.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1138.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1138.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1138.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1138.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1138.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 135
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table1138, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1139 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1139.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 144
 testRunner.When("I patch the following:", ((string)(null)), table1139, "When ");
#line hidden
#line 147
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1140 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1140.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1140.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1140.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1140.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1140.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1140.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1140.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
                table1140.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 148
  testRunner.And("the response body should contain:", ((string)(null)), table1140, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch LastModifiedDate and WebChatEndDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchLastModifiedDateAndWebChatEndDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch LastModifiedDate and WebChatEndDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 163
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1141 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1141.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1141.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1141.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1141.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1141.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1141.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1141.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 164
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table1141, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1142 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1142.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table1142.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 173
 testRunner.When("I patch the following:", ((string)(null)), table1142, "When ");
#line hidden
#line 177
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1143 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1143.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1143.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1143.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table1143.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1143.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1143.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
                table1143.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 178
  testRunner.And("the response body should contain:", ((string)(null)), table1143, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatNarrative")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatNarrative()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatNarrative", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 194
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1144 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1144.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1144.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1144.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1144.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1144.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1144.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1144.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 195
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table1144, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1145 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1145.AddRow(new string[] {
                            "WebChatNarrative",
                            "updated text"});
#line 204
 testRunner.When("I patch the following:", ((string)(null)), table1145, "When ");
#line hidden
#line 207
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1146 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1146.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1146.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1146.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1146.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1146.AddRow(new string[] {
                            "WebChatNarrative",
                            "updated text"});
                table1146.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1146.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 208
  testRunner.And("the response body should contain:", ((string)(null)), table1146, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch SentToCustomer")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchSentToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch SentToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 222
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1147 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1147.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1147.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1147.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1147.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1147.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1147.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1147.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 223
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table1147, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1148 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1148.AddRow(new string[] {
                            "SentToCustomer",
                            "false"});
#line 232
 testRunner.When("I patch the following:", ((string)(null)), table1148, "When ");
#line hidden
#line 235
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1149 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1149.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1149.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1149.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1149.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1149.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1149.AddRow(new string[] {
                            "SentToCustomer",
                            "false"});
                table1149.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 236
  testRunner.And("the response body should contain:", ((string)(null)), table1149, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateandTimeSentToCustomers")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchDateandTimeSentToCustomers()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateandTimeSentToCustomers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 250
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1150 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1150.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1150.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1150.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1150.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1150.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1150.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1150.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 251
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table1150, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1151 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1151.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-21T13:45:00Z"});
#line 260
 testRunner.When("I patch the following:", ((string)(null)), table1151, "When ");
#line hidden
#line 263
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1152 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1152.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table1152.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table1152.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table1152.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table1152.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table1152.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table1152.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-21T13:45:00Z"});
#line 264
  testRunner.And("the response body should contain:", ((string)(null)), table1152, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
