// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.WebChat
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Patch")]
    public partial class PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/WebChat", "Patch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table835 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table835.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table835.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table835, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table836 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table836.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table836.AddRow(new string[] {
                        "Channel",
                        "2"});
            table836.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table836.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 8
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table836, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DigitalReference")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDigitalReference()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DigitalReference", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table837 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table837.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table837.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table837.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table837.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table837.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table837.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table837.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 20
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table837, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table838 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table838.AddRow(new string[] {
                            "DigitalReference",
                            "abc12345"});
#line 29
 testRunner.When("I patch the following:", ((string)(null)), table838, "When ");
#line hidden
#line 32
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table839 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table839.AddRow(new string[] {
                            "DigitalReference",
                            "abc12345"});
                table839.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table839.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table839.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table839.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table839.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table839.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 33
  testRunner.And("the response body should contain:", ((string)(null)), table839, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatStartDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatStartDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatStartDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 47
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table840 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table840.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table840.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table840.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table840.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table840.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table840.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table840.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 49
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table840, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table841 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table841.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:00:00Z"});
#line 58
 testRunner.When("I patch the following:", ((string)(null)), table841, "When ");
#line hidden
#line 61
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table842 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table842.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table842.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:00:00Z"});
                table842.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table842.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table842.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table842.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 62
  testRunner.And("the response body should contain:", ((string)(null)), table842, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatEndDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatEndDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatEndDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 76
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table843 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table843.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table843.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table843.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table843.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table843.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table843.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table843.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 78
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table843, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table844 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table844.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
#line 87
 testRunner.When("I patch the following:", ((string)(null)), table844, "When ");
#line hidden
#line 90
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table845 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table845.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table845.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table845.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table845.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table845.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table845.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 91
  testRunner.And("the response body should contain:", ((string)(null)), table845, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatDuration")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        [NUnit.Framework.CategoryAttribute("Ignore")]
        public virtual void PatchWebChatDuration()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats",
                    "Ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatDuration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 106
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table846 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table846.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table846.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table846.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table846.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table846.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table846.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table846.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 107
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table846, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table847 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table847.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:01"});
#line 116
 testRunner.When("I patch the following:", ((string)(null)), table847, "When ");
#line hidden
#line 119
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table848 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table848.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table848.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table848.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table848.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:01"});
                table848.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table848.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table848.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 120
  testRunner.And("the response body should contain:", ((string)(null)), table848, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchLastModifiedDate()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch LastModifiedDate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 134
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table849 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table849.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table849.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table849.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table849.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table849.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table849.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table849.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 135
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table849, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table850 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table850.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 144
 testRunner.When("I patch the following:", ((string)(null)), table850, "When ");
#line hidden
#line 147
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table851 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table851.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table851.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table851.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table851.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table851.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table851.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table851.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
                table851.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 148
  testRunner.And("the response body should contain:", ((string)(null)), table851, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch LastModifiedDate and WebChatEndDateandTime")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchLastModifiedDateAndWebChatEndDateandTime()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch LastModifiedDate and WebChatEndDateandTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 163
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table852 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table852.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table852.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table852.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table852.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table852.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table852.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table852.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 164
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table852, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table853 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table853.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table853.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 173
 testRunner.When("I patch the following:", ((string)(null)), table853, "When ");
#line hidden
#line 177
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table854 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table854.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table854.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table854.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T14:45:00Z"});
                table854.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table854.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table854.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
                table854.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-21T11:45:00Z"});
#line 178
  testRunner.And("the response body should contain:", ((string)(null)), table854, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch WebChatNarrative")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchWebChatNarrative()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch WebChatNarrative", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 194
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table855 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table855.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table855.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table855.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table855.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table855.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table855.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table855.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 195
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table855, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table856 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table856.AddRow(new string[] {
                            "WebChatNarrative",
                            "updated text"});
#line 204
 testRunner.When("I patch the following:", ((string)(null)), table856, "When ");
#line hidden
#line 207
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table857 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table857.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table857.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table857.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table857.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table857.AddRow(new string[] {
                            "WebChatNarrative",
                            "updated text"});
                table857.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table857.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 208
  testRunner.And("the response body should contain:", ((string)(null)), table857, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch SentToCustomer")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchSentToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch SentToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 222
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table858 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table858.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table858.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table858.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table858.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table858.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table858.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table858.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 223
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table858, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table859 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table859.AddRow(new string[] {
                            "SentToCustomer",
                            "false"});
#line 232
 testRunner.When("I patch the following:", ((string)(null)), table859, "When ");
#line hidden
#line 235
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table860 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table860.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table860.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table860.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table860.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table860.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table860.AddRow(new string[] {
                            "SentToCustomer",
                            "false"});
                table860.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 236
  testRunner.And("the response body should contain:", ((string)(null)), table860, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateandTimeSentToCustomers")]
        [NUnit.Framework.CategoryAttribute("webchats")]
        public virtual void PatchDateandTimeSentToCustomers()
        {
            string[] tagsOfScenario = new string[] {
                    "webchats"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateandTimeSentToCustomers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 250
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table861 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table861.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table861.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table861.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table861.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table861.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table861.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table861.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-20T13:45:00Z"});
#line 251
 testRunner.Given("I post a webchat with the following details:", ((string)(null)), table861, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table862 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table862.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-21T13:45:00Z"});
#line 260
 testRunner.When("I patch the following:", ((string)(null)), table862, "When ");
#line hidden
#line 263
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table863 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table863.AddRow(new string[] {
                            "DigitalReference",
                            "abc1234"});
                table863.AddRow(new string[] {
                            "WebChatStartDateandTime",
                            "2018-07-20T13:20:00Z"});
                table863.AddRow(new string[] {
                            "WebChatEndDateandTime",
                            "2018-07-20T13:45:00Z"});
                table863.AddRow(new string[] {
                            "WebChatDuration",
                            "00:25:00"});
                table863.AddRow(new string[] {
                            "WebChatNarrative",
                            "some text here"});
                table863.AddRow(new string[] {
                            "SentToCustomer",
                            "true"});
                table863.AddRow(new string[] {
                            "DateandTimeSentToCustomers",
                            "2018-07-21T13:45:00Z"});
#line 264
  testRunner.And("the response body should contain:", ((string)(null)), table863, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
