// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Contact
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ContactPatchV1")]
    public partial class ContactPatchV1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Contact", "ContactPatchV1", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table320 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table320.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table320.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table320, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PreferredContactMethod")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchPreferredContactMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PreferredContactMethod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table321 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table321.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table321.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table321.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table321.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 11
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table321, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table322 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table322.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table322.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
#line 17
 testRunner.When("I patch the following Contact:", ((string)(null)), table322, "When ");
#line hidden
#line 21
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table323 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table323.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table323.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table323.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table323.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 22
 testRunner.And("the response body should contain:", ((string)(null)), table323, "And ");
#line hidden
#line 28
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PreferredContactMethod with invalid data")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchPreferredContactMethodWithInvalidData()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PreferredContactMethod with invalid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table324 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table324.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table324.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table324.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table324.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 33
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table324, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table325 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table325.AddRow(new string[] {
                            "PreferredContactMethod",
                            "6"});
#line 39
 testRunner.When("I patch the following Contact:", ((string)(null)), table325, "When ");
#line hidden
#line 42
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch MobileNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchMobileNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch MobileNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table326.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table326.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table326.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table326.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 47
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table326, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table327.AddRow(new string[] {
                            "MobileNumber",
                            "07676 654321"});
#line 53
 testRunner.When("I patch the following Contact:", ((string)(null)), table327, "When ");
#line hidden
#line 56
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table328.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table328.AddRow(new string[] {
                            "MobileNumber",
                            "07676 654321"});
                table328.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table328.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 57
 testRunner.And("the response body should contain:", ((string)(null)), table328, "And ");
#line hidden
#line 63
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch HomeNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchHomeNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch HomeNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table329.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table329.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table329.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table329.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 68
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table329, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table330.AddRow(new string[] {
                            "HomeNumber",
                            "08654 654321"});
#line 74
 testRunner.When("I patch the following Contact:", ((string)(null)), table330, "When ");
#line hidden
#line 77
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table331.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table331.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table331.AddRow(new string[] {
                            "HomeNumber",
                            "08654 654321"});
                table331.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 78
 testRunner.And("the response body should contain:", ((string)(null)), table331, "And ");
#line hidden
#line 84
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch AlternativeNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchAlternativeNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch AlternativeNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table332.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table332.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table332.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table332.AddRow(new string[] {
                            "AlternativeNumber",
                            "08654 123457"});
#line 89
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table332, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table333.AddRow(new string[] {
                            "AlternativeNumber",
                            "08654 123458"});
#line 95
 testRunner.When("I patch the following Contact:", ((string)(null)), table333, "When ");
#line hidden
#line 98
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table334.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table334.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table334.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table334.AddRow(new string[] {
                            "AlternativeNumber",
                            "08654 123458"});
#line 99
 testRunner.And("the response body should contain:", ((string)(null)), table334, "And ");
#line hidden
#line 105
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EmailAddress")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchEmailAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EmailAddress", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table335.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table335.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table335.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table335.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 110
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table335, "Given ");
#line hidden
#line 116
 testRunner.When("I patch the following Contact With RandomEmailAddress:", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table336.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table336.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table336.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table336.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 118
 testRunner.And("the response body should contain:", ((string)(null)), table336, "And ");
#line hidden
#line 124
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EmailAddress with invalid data")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchEmailAddressWithInvalidData()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EmailAddress with invalid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table337.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table337.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table337.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table337.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 129
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table337, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table338.AddRow(new string[] {
                            "EmailAddress",
                            "customeratcustomer.com"});
#line 135
 testRunner.When("I patch the following Contact:", ((string)(null)), table338, "When ");
#line hidden
#line 138
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch new PreferredContactMethod - MobileNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchNewPreferredContactMethod_MobileNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch new PreferredContactMethod - MobileNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table339.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table339.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table339.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table339.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 142
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table339, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table340.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table340.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
#line 148
 testRunner.When("I patch the following Contact:", ((string)(null)), table340, "When ");
#line hidden
#line 152
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table341.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table341.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table341.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table341.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 153
 testRunner.And("the response body should contain:", ((string)(null)), table341, "And ");
#line hidden
#line 159
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
