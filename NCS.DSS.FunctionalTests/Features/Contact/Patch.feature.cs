// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Contact
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ContactPatchV1")]
    public partial class ContactPatchV1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Contact", "ContactPatchV1", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table388 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table388.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table388.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table388, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PreferredContactMethod")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchPreferredContactMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PreferredContactMethod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table389 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table389.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table389.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table389.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table389.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 11
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table389, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table390 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table390.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table390.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
#line 17
 testRunner.When("I patch the following Contact:", ((string)(null)), table390, "When ");
#line hidden
#line 21
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table391 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table391.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table391.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table391.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table391.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 22
 testRunner.And("the response body should contain:", ((string)(null)), table391, "And ");
#line hidden
#line 28
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PreferredContactMethod with invalid data")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchPreferredContactMethodWithInvalidData()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PreferredContactMethod with invalid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table392 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table392.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table392.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table392.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table392.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 33
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table392, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table393 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table393.AddRow(new string[] {
                            "PreferredContactMethod",
                            "6"});
#line 39
 testRunner.When("I patch the following Contact:", ((string)(null)), table393, "When ");
#line hidden
#line 42
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch MobileNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchMobileNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch MobileNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table394.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table394.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table394.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table394.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 47
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table394, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table395.AddRow(new string[] {
                            "MobileNumber",
                            "07676 654321"});
#line 53
 testRunner.When("I patch the following Contact:", ((string)(null)), table395, "When ");
#line hidden
#line 56
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table396.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table396.AddRow(new string[] {
                            "MobileNumber",
                            "07676 654321"});
                table396.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table396.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 57
 testRunner.And("the response body should contain:", ((string)(null)), table396, "And ");
#line hidden
#line 63
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 64
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch HomeNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchHomeNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch HomeNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table397.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table397.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table397.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table397.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 69
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table397, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table398.AddRow(new string[] {
                            "HomeNumber",
                            "08654 654321"});
#line 75
 testRunner.When("I patch the following Contact:", ((string)(null)), table398, "When ");
#line hidden
#line 78
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table399.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table399.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table399.AddRow(new string[] {
                            "HomeNumber",
                            "08654 654321"});
                table399.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 79
 testRunner.And("the response body should contain:", ((string)(null)), table399, "And ");
#line hidden
#line 85
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch AlternativeNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchAlternativeNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch AlternativeNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table400.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table400.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table400.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table400.AddRow(new string[] {
                            "AlternativeNumber",
                            "08654 123457"});
#line 91
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table400, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table401.AddRow(new string[] {
                            "AlternativeNumber",
                            "08654 123458"});
#line 97
 testRunner.When("I patch the following Contact:", ((string)(null)), table401, "When ");
#line hidden
#line 100
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table402.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table402.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table402.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table402.AddRow(new string[] {
                            "AlternativeNumber",
                            "08654 123458"});
#line 101
 testRunner.And("the response body should contain:", ((string)(null)), table402, "And ");
#line hidden
#line 107
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EmailAddress")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchEmailAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EmailAddress", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table403.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table403.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table403.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table403.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 113
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table403, "Given ");
#line hidden
#line 119
 testRunner.When("I patch the following Contact With RandomEmailAddress:", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 120
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table404.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table404.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table404.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table404.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 121
 testRunner.And("the response body should contain:", ((string)(null)), table404, "And ");
#line hidden
#line 127
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 128
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EmailAddress with invalid data")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchEmailAddressWithInvalidData()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EmailAddress with invalid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table405.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table405.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table405.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table405.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 133
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table405, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table406.AddRow(new string[] {
                            "EmailAddress",
                            "customeratcustomer.com"});
#line 139
 testRunner.When("I patch the following Contact:", ((string)(null)), table406, "When ");
#line hidden
#line 142
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch new PreferredContactMethod - MobileNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchNewPreferredContactMethod_MobileNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch new PreferredContactMethod - MobileNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 145
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table407.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table407.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table407.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table407.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 146
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table407, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table408 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table408.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table408.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
#line 152
 testRunner.When("I patch the following Contact:", ((string)(null)), table408, "When ");
#line hidden
#line 156
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table409 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table409.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table409.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table409.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table409.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 157
 testRunner.And("the response body should contain:", ((string)(null)), table409, "And ");
#line hidden
#line 163
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 164
 testRunner.And("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
