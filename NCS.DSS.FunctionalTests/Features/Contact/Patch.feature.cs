// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Contact
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Patch")]
    [NUnit.Framework.CategoryAttribute("postV1")]
    [NUnit.Framework.CategoryAttribute("patchV1")]
    public partial class PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Patch", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV1",
                        "patchV1"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table1.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 7
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PreferredContactMethod")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchPreferredContactMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PreferredContactMethod", null, new string[] {
                        "contactdetails"});
#line 13
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table2.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table2.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table2.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table2.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 14
  testRunner.Given("I post a Contact with the following details:", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "PreferredContactMethod",
                        "2"});
#line 21
  testRunner.When("I patch the following:", ((string)(null)), table3, "When ");
#line 24
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "PreferredContactMethod",
                        "2"});
            table4.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table4.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table4.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table4.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 25
  testRunner.And("the response body should contain:", ((string)(null)), table4, "And ");
#line 32
     testRunner.And("there should be a record in the contacts ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
  testRunner.And("there should be a record in the contacts-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PreferredContactMethod with invalid data")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchPreferredContactMethodWithInvalidData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PreferredContactMethod with invalid data", null, new string[] {
                        "contactdetails"});
#line 36
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table5.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table5.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table5.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table5.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 37
  testRunner.Given("I post a Contact with the following details:", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "PreferredContactMethod",
                        "6"});
#line 44
  testRunner.When("I patch the following:", ((string)(null)), table6, "When ");
#line 47
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch MobileNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchMobileNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch MobileNumber", null, new string[] {
                        "contactdetails"});
#line 51
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table7.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table7.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table7.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table7.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 52
  testRunner.Given("I post a Contact with the following details:", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "MobileNumber",
                        "07676 654321"});
#line 59
  testRunner.When("I patch the following:", ((string)(null)), table8, "When ");
#line 62
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table9.AddRow(new string[] {
                        "MobileNumber",
                        "07676 654321"});
            table9.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table9.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table9.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 63
  testRunner.And("the response body should contain:", ((string)(null)), table9, "And ");
#line 70
  testRunner.And("there should be a record in the contacts ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
  testRunner.And("there should be a record in the contacts-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch HomeNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchHomeNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch HomeNumber", null, new string[] {
                        "contactdetails"});
#line 74
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table10.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table10.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table10.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table10.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 75
  testRunner.Given("I post a Contact with the following details:", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "HomeNumber",
                        "08654 654321"});
#line 82
  testRunner.When("I patch the following:", ((string)(null)), table11, "When ");
#line 85
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table12.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table12.AddRow(new string[] {
                        "HomeNumber",
                        "08654 654321"});
            table12.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table12.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 86
  testRunner.And("the response body should contain:", ((string)(null)), table12, "And ");
#line 93
  testRunner.And("there should be a record in the contacts ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
  testRunner.And("there should be a record in the contacts-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch AlternativeNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchAlternativeNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch AlternativeNumber", null, new string[] {
                        "contactdetails"});
#line 97
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table13.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table13.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table13.AddRow(new string[] {
                        "AlternativeNumber",
                        "08654 123457"});
            table13.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 98
  testRunner.Given("I post a Contact with the following details:", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "AlternativeNumber",
                        "08654 123458"});
#line 105
  testRunner.When("I patch the following:", ((string)(null)), table14, "When ");
#line 108
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table15.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table15.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table15.AddRow(new string[] {
                        "AlternativeNumber",
                        "08654 123458"});
            table15.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 109
  testRunner.And("the response body should contain:", ((string)(null)), table15, "And ");
#line 116
     testRunner.And("there should be a record in the contacts ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
     testRunner.And("there should be a record in the contacts-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EmailAddress")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchEmailAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EmailAddress", null, new string[] {
                        "contactdetails"});
#line 120
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table16.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table16.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table16.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table16.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 121
  testRunner.Given("I post a Contact with the following details:", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "EmailAddress",
                        "customer@update.com"});
#line 128
  testRunner.When("I patch the following:", ((string)(null)), table17, "When ");
#line 131
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table18.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table18.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table18.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table18.AddRow(new string[] {
                        "EmailAddress",
                        "customer@update.com"});
#line 132
  testRunner.And("the response body should contain:", ((string)(null)), table18, "And ");
#line 139
  testRunner.And("there should be a record in the contacts ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
  testRunner.And("there should be a record in the contacts-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch EmailAddress with invalid data")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchEmailAddressWithInvalidData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch EmailAddress with invalid data", null, new string[] {
                        "contactdetails"});
#line 143
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table19.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table19.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table19.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table19.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 144
  testRunner.Given("I post a Contact with the following details:", ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "EmailAddress",
                        "customeratcustomer.com"});
#line 151
  testRunner.When("I patch the following:", ((string)(null)), table20, "When ");
#line 154
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch new PreferredContactMethod - MobileNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PatchNewPreferredContactMethod_MobileNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch new PreferredContactMethod - MobileNumber", null, new string[] {
                        "contactdetails"});
#line 157
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table21.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table21.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table21.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table21.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 158
  testRunner.Given("I post a Contact with the following details:", ((string)(null)), table21, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "PreferredContactMethod",
                        "2"});
#line 165
  testRunner.When("I patch the following:", ((string)(null)), table22, "When ");
#line 168
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "PreferredContactMethod",
                        "2"});
            table23.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table23.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table23.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table23.AddRow(new string[] {
                        "EmailAddress",
                        "customer@customer.com"});
#line 169
  testRunner.And("the response body should contain:", ((string)(null)), table23, "And ");
#line 176
  testRunner.And("there should be a record in the contacts ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
  testRunner.And("there should be a record in the contacts-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

