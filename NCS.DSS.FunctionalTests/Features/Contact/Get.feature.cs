// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Contact
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ContactGetV1")]
    public partial class ContactGetV1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Get.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Contact", "ContactGetV1", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table384 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table384.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table384.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 4
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table384, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table385 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table385.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table385.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table385.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table385.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table385.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-08-20T11:46:02.4482612Z"});
#line 8
 testRunner.And("I post a Contact with the following details with unique email address:", ((string)(null)), table385, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Contact by CustomerID")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void GetContactByCustomerID()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Contact by CustomerID", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 18
 testRunner.When("I get a Contact by CustomerID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table386 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table386.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table386.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table386.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table386.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table386.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 20
 testRunner.And("the response body should contain:", ((string)(null)), table386, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Contact by CustomerID And ContactId")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void GetContactByCustomerIDAndContactId()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Contact by CustomerID And ContactId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 30
 testRunner.When("I get a Contact by CustomerID And ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table387 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table387.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table387.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table387.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table387.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table387.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 32
 testRunner.And("the response body should contain:", ((string)(null)), table387, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
