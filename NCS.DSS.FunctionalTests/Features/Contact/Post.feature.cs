// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Contact
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ContactPostV1")]
    public partial class ContactPostV1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Post.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Contact", "ContactPostV1", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table222.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table222.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
            table222.AddRow(new string[] {
                        "PriorityGroups",
                        "1,3"});
#line 4
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table222, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid contact")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostValidContact()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid contact", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table223.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table223.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table223.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table223.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table223.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 12
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table223, "Given ");
#line hidden
#line 19
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table224.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table224.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table224.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table224.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table224.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 20
 testRunner.And("the response body should contain:", ((string)(null)), table224, "And ");
#line hidden
#line 27
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
 testRunner.Then("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid ContactDetail one contact method")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostValidContactDetailOneContactMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid ContactDetail one contact method", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table225.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table225.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table225.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 32
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table225, "Given ");
#line hidden
#line 37
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table226.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table226.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table226.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 38
 testRunner.And("the response body should contain:", ((string)(null)), table226, "And ");
#line hidden
#line 43
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.Then("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid ContactDetail with ten digit phone numbers")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostValidContactDetailWithTenDigitPhoneNumbers()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid ContactDetail with ten digit phone numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table227.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table227.AddRow(new string[] {
                            "MobileNumber",
                            "0772455294"});
                table227.AddRow(new string[] {
                            "HomeNumber",
                            "0125 455294"});
                table227.AddRow(new string[] {
                            "AlternativeNumber",
                            "01254 57611"});
                table227.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 48
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table227, "Given ");
#line hidden
#line 55
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table228.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table228.AddRow(new string[] {
                            "MobileNumber",
                            "0772455294"});
                table228.AddRow(new string[] {
                            "HomeNumber",
                            "0125 455294"});
                table228.AddRow(new string[] {
                            "AlternativeNumber",
                            "01254 57611"});
                table228.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 56
 testRunner.And("the response body should contain:", ((string)(null)), table228, "And ");
#line hidden
#line 63
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 64
 testRunner.Then("there should be a record in the dss-contacts table with ContactId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail Mandatory PreferredContactMethod Field missing")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailMandatoryPreferredContactMethodFieldMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail Mandatory PreferredContactMethod Field missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table229.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table229.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table229.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table229.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 68
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table229, "Given ");
#line hidden
#line 74
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 75
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail with invalid PreferredContactMethod Value")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWithInvalidPreferredContactMethodValue()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail with invalid PreferredContactMethod Value", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table230.AddRow(new string[] {
                            "PreferredContactMethod",
                            "12"});
                table230.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table230.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table230.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table230.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 80
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table230, "Given ");
#line hidden
#line 87
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail with Invalid MobileNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWithInvalidMobileNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail with Invalid MobileNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table231.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table231.AddRow(new string[] {
                            "MobileNumber",
                            "012345678901234567890"});
                table231.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table231.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table231.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 92
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table231, "Given ");
#line hidden
#line 99
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail with Invalid HomeNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWithInvalidHomeNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail with Invalid HomeNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table232.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table232.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table232.AddRow(new string[] {
                            "HomeNumber",
                            "012345678901234567890"});
                table232.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table232.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 104
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table232, "Given ");
#line hidden
#line 111
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail with Invalid AlternativeNumber")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWithInvalidAlternativeNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail with Invalid AlternativeNumber", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 115
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table233.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table233.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table233.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table233.AddRow(new string[] {
                            "AlternativeNumber",
                            "012345678901234567890"});
                table233.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 116
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table233, "Given ");
#line hidden
#line 123
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail with Invalid EmailAddress")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWithInvalidEmailAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail with Invalid EmailAddress", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table234.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table234.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table234.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table234.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table234.AddRow(new string[] {
                            "EmailAddress",
                            "customercustomer.com"});
                table234.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 128
 testRunner.Given("I post a Contact with the following details:", ((string)(null)), table234, "Given ");
#line hidden
#line 136
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail with Invalid LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWithInvalidLastModifiedDate()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail with Invalid LastModifiedDate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 140
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table235.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table235.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table235.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table235.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table235.AddRow(new string[] {
                            "LastModifiedDate",
                            "2033-08-20T11:46:02.4482612Z"});
#line 141
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table235, "Given ");
#line hidden
#line 148
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail with missing PreferredContactMethod - email")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWithMissingPreferredContactMethod_Email()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail with missing PreferredContactMethod - email", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 152
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table236.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table236.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table236.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table236.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table236.AddRow(new string[] {
                            "LastModifiedDate",
                            "2033-08-20T11:46:02.4482612Z"});
#line 153
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table236, "Given ");
#line hidden
#line 160
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail with missing PreferredContactMethod - mobile")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWithMissingPreferredContactMethod_Mobile()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail with missing PreferredContactMethod - mobile", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 164
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table237.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table237.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table237.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table237.AddRow(new string[] {
                            "LastModifiedDate",
                            "2033-08-20T11:46:02.4482612Z"});
#line 165
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table237, "Given ");
#line hidden
#line 171
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail with missing PreferredContactMethod - phone")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWithMissingPreferredContactMethod_Phone()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail with missing PreferredContactMethod - phone", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 175
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table238.AddRow(new string[] {
                            "PreferredContactMethod",
                            "3"});
                table238.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table238.AddRow(new string[] {
                            "LastModifiedDate",
                            "2033-08-20T11:46:02.4482612Z"});
#line 176
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table238, "Given ");
#line hidden
#line 181
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail with missing PreferredContactMethod - SMS")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWithMissingPreferredContactMethod_SMS()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail with missing PreferredContactMethod - SMS", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 185
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table239.AddRow(new string[] {
                            "PreferredContactMethod",
                            "4"});
                table239.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table239.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table239.AddRow(new string[] {
                            "LastModifiedDate",
                            "2033-08-20T11:46:02.4482612Z"});
#line 186
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table239, "Given ");
#line hidden
#line 192
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail where one already exists")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWhereOneAlreadyExists()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail where one already exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 196
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table240.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
#line 197
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table240, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table241.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table241.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
#line 200
 testRunner.And("I post a Contact with the following details with unique email address:", ((string)(null)), table241, "And ");
#line hidden
#line 204
 testRunner.Then("there should be a 409 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ContactDetail with email that already exists for another customer")]
        [NUnit.Framework.CategoryAttribute("contactdetails")]
        public virtual void PostContactDetailWithEmailThatAlreadyExistsForAnotherCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "contactdetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ContactDetail with email that already exists for another customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table242.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
#line 208
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table242, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table243.AddRow(new string[] {
                            "PreferredContactMethod",
                            "2"});
                table243.AddRow(new string[] {
                            "GivenName",
                            "BobCust"});
                table243.AddRow(new string[] {
                            "FamilyName",
                            "CustBob"});
#line 211
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table243, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table244.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table244.AddRow(new string[] {
                            "EmailAddress",
                            "customer103@customer.com"});
#line 216
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table244, "Given ");
#line hidden
#line 220
 testRunner.Then("there should be a 409 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
