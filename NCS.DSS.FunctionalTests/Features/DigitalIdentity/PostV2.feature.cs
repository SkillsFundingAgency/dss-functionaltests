// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.DigitalIdentity
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DigitalIdentityPostV2")]
    public partial class DigitalIdentityPostV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/DigitalIdentity", "DigitalIdentityPostV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid DigitalIdentity")]
        [NUnit.Framework.CategoryAttribute("digitalidentity")]
        public virtual void PostValidDigitalIdentity()
        {
            string[] tagsOfScenario = new string[] {
                    "digitalidentity"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid DigitalIdentity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table568 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table568.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table568.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 5
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table568, "Given ");
#line hidden
#line 9
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table569 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table569.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table569.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table569.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table569.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table569.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 10
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table569, "Given ");
#line hidden
#line 17
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table570 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table570.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table570.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table570.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table570.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table570.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 18
 testRunner.And("the response body should contain:", ((string)(null)), table570, "And ");
#line hidden
                TechTalk.SpecFlow.Table table571 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table571.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table571.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table571.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table571.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 25
 testRunner.Given("I Post a digital identity with the following details V2:", ((string)(null)), table571, "Given ");
#line hidden
#line 31
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table572 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table572.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table572.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table572.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table572.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 32
 testRunner.And("the response body should contain:", ((string)(null)), table572, "And ");
#line hidden
#line 38
 testRunner.And("there should be a record in the dss-digitalidentities table with IdentityId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post invalid DigitalIdentity with non existent customerId")]
        [NUnit.Framework.CategoryAttribute("digitalidentity")]
        public virtual void PostInvalidDigitalIdentityWithNonExistentCustomerId()
        {
            string[] tagsOfScenario = new string[] {
                    "digitalidentity"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post invalid DigitalIdentity with non existent customerId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table573 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table573.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table573.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table573.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table573.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
                table573.AddRow(new string[] {
                            "CustomerId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
#line 43
 testRunner.Given("I Post a digital identity with the following details V2:", ((string)(null)), table573, "Given ");
#line hidden
#line 50
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Digital identity Digital identity Already Exists for Customer")]
        [NUnit.Framework.CategoryAttribute("digitalidentity")]
        public virtual void PostValidDigitalIdentityDigitalIdentityAlreadyExistsForCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "digitalidentity"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Digital identity Digital identity Already Exists for Customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table574 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table574.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table574.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 54
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table574, "Given ");
#line hidden
#line 58
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table575 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table575.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table575.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table575.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table575.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table575.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 59
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table575, "Given ");
#line hidden
#line 66
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table576 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table576.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table576.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table576.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table576.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table576.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 67
 testRunner.And("the response body should contain:", ((string)(null)), table576, "And ");
#line hidden
                TechTalk.SpecFlow.Table table577 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table577.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table577.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table577.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table577.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 74
 testRunner.Given("I Post a digital identity with the following details V2:", ((string)(null)), table577, "Given ");
#line hidden
#line 80
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table578 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table578.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table578.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table578.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table578.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 81
 testRunner.Given("I Post a digital identity with the following details V2:", ((string)(null)), table578, "Given ");
#line hidden
#line 87
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
 testRunner.And("the response body should include already exists.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Invalid Digital identity without a contact")]
        public virtual void PostInvalidDigitalIdentityWithoutAContact()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Invalid Digital identity without a contact", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table579 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table579.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table579.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 91
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table579, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table580 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table580.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table580.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table580.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table580.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 95
 testRunner.Given("I Post a digital identity with the following details V2:", ((string)(null)), table580, "Given ");
#line hidden
#line 101
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Digital Identity for Customer that is Terminated")]
        public virtual void PostDigitalIdentityForCustomerThatIsTerminated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Digital Identity for Customer that is Terminated", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table581 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table581.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table581.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
                table581.AddRow(new string[] {
                            "PriorityGroups",
                            "1,3"});
#line 104
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table581, "Given ");
#line hidden
#line 109
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table582 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table582.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table582.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table582.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table582.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table582.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 110
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table582, "Given ");
#line hidden
#line 117
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table583 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table583.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table583.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table583.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table583.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
#line 118
 testRunner.And("the response body should contain:", ((string)(null)), table583, "And ");
#line hidden
                TechTalk.SpecFlow.Table table584 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table584.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-08-27T14:45:00Z"});
#line 124
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table584, "When ");
#line hidden
#line 127
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table585 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table585.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table585.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table585.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table585.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 128
 testRunner.Given("I Post a digital identity with the following details V2:", ((string)(null)), table585, "Given ");
#line hidden
#line 134
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
