// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.DigitalIdentity
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DigitalIdentityPatchV2")]
    public partial class DigitalIdentityPatchV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/DigitalIdentity", "DigitalIdentityPatchV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch a valid Digital Identity")]
        [NUnit.Framework.CategoryAttribute("digitalidentity")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchAValidDigitalIdentity()
        {
            string[] tagsOfScenario = new string[] {
                    "digitalidentity",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch a valid Digital Identity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table545 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table545.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table545.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 5
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table545, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table546 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table546.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table546.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table546.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table546.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table546.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 9
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table546, "Given ");
#line hidden
#line 16
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table547 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table547.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table547.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table547.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table547.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table547.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 17
 testRunner.And("the response body should contain:", ((string)(null)), table547, "And ");
#line hidden
                TechTalk.SpecFlow.Table table548 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table548.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table548.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table548.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table548.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 24
 testRunner.Given("I Post a digital identity with the following details V2:", ((string)(null)), table548, "Given ");
#line hidden
#line 30
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table549 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table549.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table549.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table549.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table549.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 31
 testRunner.And("the response body should contain:", ((string)(null)), table549, "And ");
#line hidden
                TechTalk.SpecFlow.Table table550 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table550.AddRow(new string[] {
                            "id_token",
                            "1234567910"});
                table550.AddRow(new string[] {
                            "IdentityStoreId",
                            "aaf18eff-bf70-4e04-82ba-a056258f0db8"});
                table550.AddRow(new string[] {
                            "LegacyIdentity",
                            "\"test\""});
#line 37
 testRunner.Given("I patch the following digitalIdentity By CustomerId V2:", ((string)(null)), table550, "Given ");
#line hidden
#line 42
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table551 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table551.AddRow(new string[] {
                            "id_token",
                            "1234567910"});
                table551.AddRow(new string[] {
                            "IdentityStoreId",
                            "aaf18eff-bf70-4e04-82ba-a056258f0db8"});
                table551.AddRow(new string[] {
                            "LegacyIdentity",
                            "\"test\""});
#line 43
 testRunner.And("the response body should contain:", ((string)(null)), table551, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Digital Identity for Customer that does not exist")]
        [NUnit.Framework.CategoryAttribute("digitalidentity")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDigitalIdentityForCustomerThatDoesNotExist()
        {
            string[] tagsOfScenario = new string[] {
                    "digitalidentity",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Digital Identity for Customer that does not exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table552 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table552.AddRow(new string[] {
                            "id_token",
                            "1234567910"});
                table552.AddRow(new string[] {
                            "IdentityStoreId",
                            "aaf18eff-bf70-4e04-82ba-a056258f0db8"});
                table552.AddRow(new string[] {
                            "LegacyIdentity",
                            "\"test\""});
                table552.AddRow(new string[] {
                            "CustomerId",
                            "e432d40a-28bc-4969-bda8-9c096c747b52"});
#line 51
 testRunner.Given("I patch the following digitalIdentity By CustomerId V2:", ((string)(null)), table552, "Given ");
#line hidden
#line 57
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch a Digital Identity for a customer that does not have a digital identity")]
        [NUnit.Framework.CategoryAttribute("digitalidentity")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchADigitalIdentityForACustomerThatDoesNotHaveADigitalIdentity()
        {
            string[] tagsOfScenario = new string[] {
                    "digitalidentity",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch a Digital Identity for a customer that does not have a digital identity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table553 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table553.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table553.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 61
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table553, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table554 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table554.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table554.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table554.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table554.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table554.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 65
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table554, "Given ");
#line hidden
#line 72
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table555 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table555.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table555.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table555.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table555.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table555.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 73
 testRunner.And("the response body should contain:", ((string)(null)), table555, "And ");
#line hidden
                TechTalk.SpecFlow.Table table556 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table556.AddRow(new string[] {
                            "id_token",
                            "1234567910"});
                table556.AddRow(new string[] {
                            "IdentityStoreId",
                            "aaf18eff-bf70-4e04-82ba-a056258f0db8"});
                table556.AddRow(new string[] {
                            "LegacyIdentity",
                            "\"test\""});
#line 80
 testRunner.Given("I patch the following digitalIdentity By CustomerId V2:", ((string)(null)), table556, "Given ");
#line hidden
#line 85
 testRunner.Then("there should be a 204 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch a valid Digital Identity By Digital IdentityId")]
        [NUnit.Framework.CategoryAttribute("digitalidentity")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchAValidDigitalIdentityByDigitalIdentityId()
        {
            string[] tagsOfScenario = new string[] {
                    "digitalidentity",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch a valid Digital Identity By Digital IdentityId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table557 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table557.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table557.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 89
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table557, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table558 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table558.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table558.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table558.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table558.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table558.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 93
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table558, "Given ");
#line hidden
#line 100
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table559 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table559.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table559.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table559.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table559.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table559.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 101
 testRunner.And("the response body should contain:", ((string)(null)), table559, "And ");
#line hidden
                TechTalk.SpecFlow.Table table560 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table560.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table560.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table560.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table560.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 108
 testRunner.Given("I Post a digital identity with the following details V2:", ((string)(null)), table560, "Given ");
#line hidden
#line 114
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table561 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table561.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table561.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table561.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table561.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 115
 testRunner.And("the response body should contain:", ((string)(null)), table561, "And ");
#line hidden
                TechTalk.SpecFlow.Table table562 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table562.AddRow(new string[] {
                            "id_token",
                            "1234567910"});
                table562.AddRow(new string[] {
                            "IdentityStoreId",
                            "aaf18eff-bf70-4e04-82ba-a056258f0db8"});
                table562.AddRow(new string[] {
                            "LegacyIdentity",
                            "\"test\""});
#line 121
 testRunner.Given("I patch the following digitalIdentity By DigitalIdentityId V2:", ((string)(null)), table562, "Given ");
#line hidden
#line 126
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
 testRunner.And("there should be a record in the dss-digitalidentities table Ignoring \'\' with Iden" +
                        "tityId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table563 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table563.AddRow(new string[] {
                            "id_token",
                            "1234567910"});
                table563.AddRow(new string[] {
                            "IdentityStoreId",
                            "aaf18eff-bf70-4e04-82ba-a056258f0db8"});
                table563.AddRow(new string[] {
                            "LegacyIdentity",
                            "\"test\""});
#line 128
 testRunner.And("the response body should contain:", ((string)(null)), table563, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch a Digital Identity By Digital IdentityId for a customer that does not have " +
            "a digital identity")]
        [NUnit.Framework.CategoryAttribute("digitalidentity")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchADigitalIdentityByDigitalIdentityIdForACustomerThatDoesNotHaveADigitalIdentity()
        {
            string[] tagsOfScenario = new string[] {
                    "digitalidentity",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch a Digital Identity By Digital IdentityId for a customer that does not have " +
                    "a digital identity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table564 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table564.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table564.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 136
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table564, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table565 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table565.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table565.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table565.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table565.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table565.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 140
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table565, "Given ");
#line hidden
#line 147
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table566 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table566.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table566.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table566.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table566.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table566.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 148
 testRunner.And("the response body should contain:", ((string)(null)), table566, "And ");
#line hidden
                TechTalk.SpecFlow.Table table567 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table567.AddRow(new string[] {
                            "id_token",
                            "1234567910"});
                table567.AddRow(new string[] {
                            "IdentityStoreId",
                            "aaf18eff-bf70-4e04-82ba-a056258f0db8"});
                table567.AddRow(new string[] {
                            "LegacyIdentity",
                            "\"test\""});
#line 155
 testRunner.Given("I patch the following digitalIdentity By DigitalIdentityId V2:", ((string)(null)), table567, "Given ");
#line hidden
#line 160
 testRunner.Then("there should be a 204 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
