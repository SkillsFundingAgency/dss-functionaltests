// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.DigitalIdentity
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DeleteV2")]
    [NUnit.Framework.CategoryAttribute("postV1")]
    [NUnit.Framework.CategoryAttribute("deleteV2")]
    public partial class DeleteV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DeleteV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DeleteV2", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV1",
                        "deleteV2"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete valid DigitalIdentity")]
        [NUnit.Framework.CategoryAttribute("digitalidentity")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void DeleteValidDigitalIdentity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete valid DigitalIdentity", null, new string[] {
                        "digitalidentity",
                        "smoke"});
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table1.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 6
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table2.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table2.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table2.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table2.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-08-20T11:46:02.4482612Z"});
#line 10
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table2, "Given ");
#line 17
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("Email the response email is correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table3.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table3.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table3.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table3.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-08-20T11:46:02.4482612Z"});
#line 19
 testRunner.And("the response body should contain:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "IdentityStoreId",
                        "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
            table4.AddRow(new string[] {
                        "LegacyIdentity",
                        "07676 123456"});
            table4.AddRow(new string[] {
                        "id_token",
                        "08654 123456"});
            table4.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-08-20T11:46:02.4482612+00:00"});
#line 26
 testRunner.Given("I Post a digital identity with the following details", ((string)(null)), table4, "Given ");
#line 32
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "IdentityStoreId",
                        "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
            table5.AddRow(new string[] {
                        "LegacyIdentity",
                        "07676 123456"});
            table5.AddRow(new string[] {
                        "id_token",
                        "08654 123456"});
            table5.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-08-20T11:46:02.4482612+00:00"});
#line 33
 testRunner.And("the response body should contain:", ((string)(null)), table5, "And ");
#line 39
 testRunner.Given("I Delete a Digital Identity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete Digital identity for customer that does not have a digital identity")]
        [NUnit.Framework.CategoryAttribute("digitalidentity")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void DeleteDigitalIdentityForCustomerThatDoesNotHaveADigitalIdentity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Digital identity for customer that does not have a digital identity", null, new string[] {
                        "digitalidentity",
                        "smoke"});
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table6.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 45
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table7.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table7.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table7.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table7.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-08-20T11:46:02.4482612Z"});
#line 49
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table7, "Given ");
#line 56
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
 testRunner.And("Email the response email is correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "PreferredContactMethod",
                        "1"});
            table8.AddRow(new string[] {
                        "MobileNumber",
                        "07676 123456"});
            table8.AddRow(new string[] {
                        "HomeNumber",
                        "08654 123456"});
            table8.AddRow(new string[] {
                        "AlternativeNumber",
                        "07564656766"});
            table8.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-08-20T11:46:02.4482612Z"});
#line 58
 testRunner.And("the response body should contain:", ((string)(null)), table8, "And ");
#line 65
 testRunner.Given("I Delete a Digital Identity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
 testRunner.Then("there should be a 204 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

