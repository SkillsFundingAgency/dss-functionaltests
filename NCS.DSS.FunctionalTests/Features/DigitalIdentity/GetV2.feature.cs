// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.DigitalIdentity
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DigitalIdentityGetV2")]
    public partial class DigitalIdentityGetV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "GetV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/DigitalIdentity", "DigitalIdentityGetV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid DigitalIdentity and Get By CustomerId")]
        [NUnit.Framework.CategoryAttribute("digitalidentity")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostValidDigitalIdentityAndGetByCustomerId()
        {
            string[] tagsOfScenario = new string[] {
                    "digitalidentity",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid DigitalIdentity and Get By CustomerId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table324 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table324.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table324.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 5
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table324, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table325 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table325.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table325.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table325.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table325.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table325.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 9
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table325, "Given ");
#line hidden
#line 16
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table326.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table326.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table326.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table326.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table326.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 17
 testRunner.And("the response body should contain:", ((string)(null)), table326, "And ");
#line hidden
                TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table327.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table327.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table327.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table327.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 24
 testRunner.Given("I Post a digital identity with the following details V2:", ((string)(null)), table327, "Given ");
#line hidden
#line 30
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table328.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table328.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table328.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table328.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 31
 testRunner.And("the response body should contain:", ((string)(null)), table328, "And ");
#line hidden
#line 37
 testRunner.Given("I get a DigitalIdentity by CustomerID V2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table329.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table329.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table329.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table329.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 39
 testRunner.And("the response body should contain:", ((string)(null)), table329, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Digital Identity for Customer that Does not have a Digital Identity Returns E" +
            "rror")]
        public virtual void GetDigitalIdentityForCustomerThatDoesNotHaveADigitalIdentityReturnsError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Digital Identity for Customer that Does not have a Digital Identity Returns E" +
                    "rror", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table330.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table330.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 47
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table330, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table331.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table331.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table331.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table331.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table331.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 51
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table331, "Given ");
#line hidden
#line 58
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table332.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table332.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table332.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table332.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table332.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 59
 testRunner.And("the response body should contain:", ((string)(null)), table332, "And ");
#line hidden
#line 66
 testRunner.Given("I get a DigitalIdentity by CustomerID V2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
 testRunner.Then("there should be a 204 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Digital Identity By DigitalIdentityId for Customer that Does not have a Digit" +
            "al Identity Returns Error")]
        public virtual void GetDigitalIdentityByDigitalIdentityIdForCustomerThatDoesNotHaveADigitalIdentityReturnsError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Digital Identity By DigitalIdentityId for Customer that Does not have a Digit" +
                    "al Identity Returns Error", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table333.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table333.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 70
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table333, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table334.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table334.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table334.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table334.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table334.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 74
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table334, "Given ");
#line hidden
#line 81
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table335.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table335.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table335.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table335.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table335.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 82
 testRunner.And("the response body should contain:", ((string)(null)), table335, "And ");
#line hidden
#line 89
 testRunner.Given("I get a DigitalIdentity by DigitalIdentityID V2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
 testRunner.Then("there should be a 204 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post valid DigitalIdentity and Get By DigitalIdentityId")]
        public virtual void PostValidDigitalIdentityAndGetByDigitalIdentityId()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post valid DigitalIdentity and Get By DigitalIdentityId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table336.AddRow(new string[] {
                            "GivenName",
                            "Bob"});
                table336.AddRow(new string[] {
                            "FamilyName",
                            "Customer"});
#line 93
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table336, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table337.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table337.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table337.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table337.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table337.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 97
 testRunner.Given("I post a Contact with the following details with unique email address:", ((string)(null)), table337, "Given ");
#line hidden
#line 104
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table338.AddRow(new string[] {
                            "PreferredContactMethod",
                            "1"});
                table338.AddRow(new string[] {
                            "MobileNumber",
                            "07676 123456"});
                table338.AddRow(new string[] {
                            "HomeNumber",
                            "08654 123456"});
                table338.AddRow(new string[] {
                            "AlternativeNumber",
                            "07564656766"});
                table338.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612Z"});
#line 105
 testRunner.And("the response body should contain:", ((string)(null)), table338, "And ");
#line hidden
                TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table339.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table339.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table339.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table339.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 112
 testRunner.Given("I Post a digital identity with the following details V2:", ((string)(null)), table339, "Given ");
#line hidden
#line 118
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table340.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table340.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table340.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table340.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 119
 testRunner.And("the response body should contain:", ((string)(null)), table340, "And ");
#line hidden
#line 125
 testRunner.Given("I get a DigitalIdentity by DigitalIdentityID V2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 126
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table341.AddRow(new string[] {
                            "IdentityStoreId",
                            "6973bf77-35f6-4989-a8ca-f1528d9c10a5"});
                table341.AddRow(new string[] {
                            "LegacyIdentity",
                            "07676 123456"});
                table341.AddRow(new string[] {
                            "id_token",
                            "08654 123456"});
                table341.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-20T11:46:02.4482612+00:00"});
#line 127
 testRunner.And("the response body should contain:", ((string)(null)), table341, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
