// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Goal
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PatchV2")]
    public partial class PatchV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Goal", "PatchV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table598 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table598.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table598.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details V2:", ((string)(null)), table598, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table599 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table599.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table599.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
            table599.AddRow(new string[] {
                        "PriorityGroups",
                        "1,3"});
#line 9
 testRunner.And("I post a Customer with the following details V3:", ((string)(null)), table599, "And ");
#line hidden
            TechTalk.SpecFlow.Table table600 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table600.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table600.AddRow(new string[] {
                        "Channel",
                        "2"});
            table600.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table600.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 14
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table600, "And ");
#line hidden
            TechTalk.SpecFlow.Table table601 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table601.AddRow(new string[] {
                        "DateandTimeOfSession",
                        "2018-06-21T14:45:00Z"});
            table601.AddRow(new string[] {
                        "VenuePostCode",
                        "NN1 2NN"});
#line 20
 testRunner.And("I post a session with the following details V2:", ((string)(null)), table601, "And ");
#line hidden
            TechTalk.SpecFlow.Table table602 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table602.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table602.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table602.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table602.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table602.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table602.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table602.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table602.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 24
 testRunner.And("I post an ActionPlan with the following details V3:", ((string)(null)), table602, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateGoalCaptured")]
        [NUnit.Framework.CategoryAttribute("goals")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PatchDateGoalCaptured()
        {
            string[] tagsOfScenario = new string[] {
                    "goals",
                    "smoke",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateGoalCaptured", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table603 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table603.AddRow(new string[] {
                            "DateGoalCaptured",
                            "2018-06-21T14:45:00Z"});
                table603.AddRow(new string[] {
                            "DateGoalShouldBeCompletedBy",
                            "2018-07-21T14:45:00Z"});
                table603.AddRow(new string[] {
                            "GoalSummary",
                            "some goal text"});
                table603.AddRow(new string[] {
                            "GoalType",
                            "1"});
                table603.AddRow(new string[] {
                            "GoalStatus",
                            "1"});
#line 37
 testRunner.Given("I post a goal with the following details V2:", ((string)(null)), table603, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table604 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table604.AddRow(new string[] {
                            "DateGoalCaptured",
                            "2018-06-22T14:45:00Z"});
#line 44
 testRunner.When("I patch the following Goal V2:", ((string)(null)), table604, "When ");
#line hidden
#line 47
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table605 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table605.AddRow(new string[] {
                            "DateGoalCaptured",
                            "2018-06-22T14:45:00Z"});
                table605.AddRow(new string[] {
                            "DateGoalShouldBeCompletedBy",
                            "2018-07-21T14:45:00Z"});
                table605.AddRow(new string[] {
                            "GoalSummary",
                            "some goal text"});
                table605.AddRow(new string[] {
                            "GoalType",
                            "1"});
                table605.AddRow(new string[] {
                            "GoalStatus",
                            "1"});
#line 48
 testRunner.And("the response body should contain:", ((string)(null)), table605, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateGoalAchieved")]
        [NUnit.Framework.CategoryAttribute("goals")]
        public virtual void PatchDateGoalAchieved()
        {
            string[] tagsOfScenario = new string[] {
                    "goals"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateGoalAchieved", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table606 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table606.AddRow(new string[] {
                            "DateGoalCaptured",
                            "2018-06-21T14:45:00Z"});
                table606.AddRow(new string[] {
                            "DateGoalShouldBeCompletedBy",
                            "2018-07-21T14:45:00Z"});
                table606.AddRow(new string[] {
                            "GoalSummary",
                            "some goal text"});
                table606.AddRow(new string[] {
                            "GoalType",
                            "1"});
                table606.AddRow(new string[] {
                            "GoalStatus",
                            "1"});
#line 85
 testRunner.Given("I post a goal with the following details V2:", ((string)(null)), table606, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table607 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table607.AddRow(new string[] {
                            "DateGoalAchieved",
                            "2018-07-15T14:45:00Z"});
#line 92
 testRunner.When("I patch the following Goal V2:", ((string)(null)), table607, "When ");
#line hidden
#line 95
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table608 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table608.AddRow(new string[] {
                            "DateGoalCaptured",
                            "2018-06-21T14:45:00Z"});
                table608.AddRow(new string[] {
                            "DateGoalShouldBeCompletedBy",
                            "2018-07-21T14:45:00Z"});
                table608.AddRow(new string[] {
                            "DateGoalAchieved",
                            "2018-07-15T14:45:00Z"});
                table608.AddRow(new string[] {
                            "GoalSummary",
                            "some goal text"});
                table608.AddRow(new string[] {
                            "GoalType",
                            "1"});
                table608.AddRow(new string[] {
                            "GoalStatus",
                            "1"});
#line 96
 testRunner.And("the response body should contain:", ((string)(null)), table608, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid GoalType")]
        [NUnit.Framework.CategoryAttribute("goals")]
        public virtual void PatchWithInvalidGoalType()
        {
            string[] tagsOfScenario = new string[] {
                    "goals"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid GoalType", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table609 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table609.AddRow(new string[] {
                            "DateGoalCaptured",
                            "2018-06-21T14:45:00Z"});
                table609.AddRow(new string[] {
                            "DateGoalShouldBeCompletedBy",
                            "2018-07-21T14:45:00Z"});
                table609.AddRow(new string[] {
                            "GoalSummary",
                            "some goal text"});
                table609.AddRow(new string[] {
                            "GoalType",
                            "1"});
                table609.AddRow(new string[] {
                            "GoalStatus",
                            "1"});
#line 107
 testRunner.Given("I post a goal with the following details V2:", ((string)(null)), table609, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table610 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table610.AddRow(new string[] {
                            "GoalType",
                            "4"});
#line 114
 testRunner.When("I patch the following Goal V2:", ((string)(null)), table610, "When ");
#line hidden
#line 117
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid GoalStatus")]
        [NUnit.Framework.CategoryAttribute("goals")]
        public virtual void PatchWithInvalidGoalStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "goals"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid GoalStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 120
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table611 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table611.AddRow(new string[] {
                            "DateGoalCaptured",
                            "2018-06-21T14:45:00Z"});
                table611.AddRow(new string[] {
                            "DateGoalShouldBeCompletedBy",
                            "2018-07-21T14:45:00Z"});
                table611.AddRow(new string[] {
                            "GoalSummary",
                            "some goal text"});
                table611.AddRow(new string[] {
                            "GoalType",
                            "1"});
                table611.AddRow(new string[] {
                            "GoalStatus",
                            "1"});
#line 121
 testRunner.Given("I post a goal with the following details V2:", ((string)(null)), table611, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table612 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table612.AddRow(new string[] {
                            "GoalStatus",
                            "4"});
#line 128
 testRunner.When("I patch the following Goal V2:", ((string)(null)), table612, "When ");
#line hidden
#line 131
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
