// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Goal
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Patch")]
    [NUnit.Framework.CategoryAttribute("postV1")]
    [NUnit.Framework.CategoryAttribute("patchV1")]
    public partial class PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Patch", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV1",
                        "patchV1"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table1.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 10
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table2.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 14
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "Channel",
                        "2"});
            table3.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table3.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 18
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table4.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table4.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table4.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table4.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table4.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table4.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table4.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table4.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 24
 testRunner.And("I post an ActionPlan with the following details:", ((string)(null)), table4, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateGoalCaptured")]
        public virtual void PatchDateGoalCaptured()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateGoalCaptured", null, ((string[])(null)));
#line 38
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "DateGoalCaptured",
                        "2018-06-21T14:45:00Z"});
            table5.AddRow(new string[] {
                        "DateGoalShouldBeCompletedBy",
                        "2018-07-21T14:45:00Z"});
            table5.AddRow(new string[] {
                        "GoalSummary",
                        "some goal text"});
            table5.AddRow(new string[] {
                        "GoalType",
                        "1"});
            table5.AddRow(new string[] {
                        "GoalStatus",
                        "1"});
#line 39
  testRunner.Given("I post a goal with the following details:", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "DateGoalCaptured",
                        "2018-06-22T14:45:00Z"});
#line 46
  testRunner.When("I patch the following:", ((string)(null)), table6, "When ");
#line 49
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "DateGoalCaptured",
                        "2018-06-22T14:45:00Z"});
            table7.AddRow(new string[] {
                        "DateGoalShouldBeCompletedBy",
                        "2018-07-21T14:45:00Z"});
            table7.AddRow(new string[] {
                        "GoalSummary",
                        "some goal text"});
            table7.AddRow(new string[] {
                        "GoalType",
                        "1"});
            table7.AddRow(new string[] {
                        "GoalStatus",
                        "1"});
#line 50
  testRunner.And("the response body should contain:", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateGoalShouldBeCompletedBy")]
        public virtual void PatchDateGoalShouldBeCompletedBy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateGoalShouldBeCompletedBy", null, ((string[])(null)));
#line 59
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "DateGoalCaptured",
                        "2018-06-21T14:45:00Z"});
            table8.AddRow(new string[] {
                        "DateGoalShouldBeCompletedBy",
                        "2018-07-21T14:45:00Z"});
            table8.AddRow(new string[] {
                        "GoalSummary",
                        "some goal text"});
            table8.AddRow(new string[] {
                        "GoalType",
                        "1"});
            table8.AddRow(new string[] {
                        "GoalStatus",
                        "1"});
#line 60
  testRunner.Given("I post a goal with the following details:", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "DateGoalShouldBeCompletedBy",
                        "2018-07-22T14:45:00Z"});
#line 67
  testRunner.When("I patch the following:", ((string)(null)), table9, "When ");
#line 70
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "DateGoalCaptured",
                        "2018-06-21T14:45:00Z"});
            table10.AddRow(new string[] {
                        "DateGoalShouldBeCompletedBy",
                        "2018-07-22T14:45:00Z"});
            table10.AddRow(new string[] {
                        "GoalSummary",
                        "some goal text"});
            table10.AddRow(new string[] {
                        "GoalType",
                        "1"});
            table10.AddRow(new string[] {
                        "GoalStatus",
                        "1"});
#line 71
  testRunner.And("the response body should contain:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateGoalAchieved")]
        public virtual void PatchDateGoalAchieved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateGoalAchieved", null, ((string[])(null)));
#line 80
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "DateGoalCaptured",
                        "2018-06-21T14:45:00Z"});
            table11.AddRow(new string[] {
                        "DateGoalShouldBeCompletedBy",
                        "2018-07-21T14:45:00Z"});
            table11.AddRow(new string[] {
                        "GoalSummary",
                        "some goal text"});
            table11.AddRow(new string[] {
                        "GoalType",
                        "1"});
            table11.AddRow(new string[] {
                        "GoalStatus",
                        "1"});
#line 81
  testRunner.Given("I post a goal with the following details:", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "DateGoalAchieved",
                        "2018-07-15T14:45:00Z"});
#line 88
  testRunner.When("I patch the following:", ((string)(null)), table12, "When ");
#line 91
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "DateGoalCaptured",
                        "2018-06-21T14:45:00Z"});
            table13.AddRow(new string[] {
                        "DateGoalShouldBeCompletedBy",
                        "2018-07-21T14:45:00Z"});
            table13.AddRow(new string[] {
                        "DateGoalAchieved",
                        "2018-07-15T14:45:00Z"});
            table13.AddRow(new string[] {
                        "GoalSummary",
                        "some goal text"});
            table13.AddRow(new string[] {
                        "GoalType",
                        "1"});
            table13.AddRow(new string[] {
                        "GoalStatus",
                        "1"});
#line 92
  testRunner.And("the response body should contain:", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid GoalType")]
        public virtual void PatchWithInvalidGoalType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid GoalType", null, ((string[])(null)));
#line 102
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "DateGoalCaptured",
                        "2018-06-21T14:45:00Z"});
            table14.AddRow(new string[] {
                        "DateGoalShouldBeCompletedBy",
                        "2018-07-21T14:45:00Z"});
            table14.AddRow(new string[] {
                        "GoalSummary",
                        "some goal text"});
            table14.AddRow(new string[] {
                        "GoalType",
                        "1"});
            table14.AddRow(new string[] {
                        "GoalStatus",
                        "1"});
#line 103
  testRunner.Given("I post a goal with the following details:", ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "GoalType",
                        "4"});
#line 110
  testRunner.When("I patch the following:", ((string)(null)), table15, "When ");
#line 113
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid GoalStatus")]
        public virtual void PatchWithInvalidGoalStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid GoalStatus", null, ((string[])(null)));
#line 115
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "DateGoalCaptured",
                        "2018-06-21T14:45:00Z"});
            table16.AddRow(new string[] {
                        "DateGoalShouldBeCompletedBy",
                        "2018-07-21T14:45:00Z"});
            table16.AddRow(new string[] {
                        "GoalSummary",
                        "some goal text"});
            table16.AddRow(new string[] {
                        "GoalType",
                        "1"});
            table16.AddRow(new string[] {
                        "GoalStatus",
                        "1"});
#line 116
  testRunner.Given("I post a goal with the following details:", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "GoalStatus",
                        "4"});
#line 123
  testRunner.When("I patch the following:", ((string)(null)), table17, "When ");
#line 126
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

