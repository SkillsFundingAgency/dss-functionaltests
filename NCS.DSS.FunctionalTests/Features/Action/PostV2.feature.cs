// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Action
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ActionPostV2")]
    public partial class ActionPostV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Action", "ActionPostV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table101.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table101.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 7
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table101, "And ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table102.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table102.AddRow(new string[] {
                        "Channel",
                        "2"});
            table102.AddRow(new string[] {
                        "InteractionType",
                        "2"});
#line 11
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table102, "And ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table103.AddRow(new string[] {
                        "DateandTimeOfSession",
                        "2018-06-21T14:45:00Z"});
            table103.AddRow(new string[] {
                        "VenuePostCode",
                        "NN1 2NN"});
#line 16
 testRunner.And("I post a session with the following details:", ((string)(null)), table103, "And ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table104.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table104.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table104.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table104.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table104.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table104.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table104.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table104.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 20
 testRunner.And("I post an ActionPlan with the following details:", ((string)(null)), table104, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Action")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostValidAction()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "smoke",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Action", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table105.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table105.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table105.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table105.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table105.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table105.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table105.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 33
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table105, "Given ");
#line hidden
#line 42
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table106.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table106.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table106.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table106.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table106.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table106.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table106.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 43
 testRunner.And("the response body should contain:", ((string)(null)), table106, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid Action with only mandatory Fields")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostValidActionWithOnlyMandatoryFields()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid Action with only mandatory Fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 55
 testRunner.Given("I want to set the scenario touchPointId header to 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table107.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table107.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table107.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table107.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table107.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table107.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 56
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table107, "Given ");
#line hidden
#line 64
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table108.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table108.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table108.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table108.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table108.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table108.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 65
 testRunner.And("the response body should contain:", ((string)(null)), table108, "And ");
#line hidden
#line 73
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.Given("I wait for 10 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 75
 testRunner.Then("there should be a record in the dss-actions table Ignoring \'SignpostedToCategory," +
                        "LastModifiedDate\' with ActionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.Given("I fetch a actions cosmos document from actions database using key ActionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
 testRunner.Then("the cosmos document should have property CreatedBy with value 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change feed for Post Action")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void ChangeFeedForPostAction()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change feed for Post Action", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table109.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table109.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table109.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table109.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table109.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table109.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table109.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 81
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table109, "Given ");
#line hidden
#line 91
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.Given("I wait for 10 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
 testRunner.Then("there should be a record in the dss-actions table Ignoring \'SignpostedToCategory," +
                        "LastModifiedDate\' with ActionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Action with invalid interactionId")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostActionWithInvalidInteractionId()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Action with invalid interactionId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table110.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table110.AddRow(new string[] {
                            "DateActionActuallyCompleted",
                            "2018-08-06T09:00:00Z"});
                table110.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table110.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table110.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table110.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table110.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 97
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table110, "Given ");
#line hidden
#line 106
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Action with missing DateActionAgreed")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostActionWithMissingDateActionAgreed()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Action with missing DateActionAgreed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table111.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table111.AddRow(new string[] {
                            "DateActionActuallyCompleted",
                            "2018-08-06T09:00:00Z"});
                table111.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table111.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table111.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table111.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table111.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 110
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table111, "Given ");
#line hidden
#line 119
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Action with missing DateActionAimsToBeCompletedBy")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostActionWithMissingDateActionAimsToBeCompletedBy()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Action with missing DateActionAimsToBeCompletedBy", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table112.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table112.AddRow(new string[] {
                            "DateActionActuallyCompleted",
                            "2018-08-06T09:00:00Z"});
                table112.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table112.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table112.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table112.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table112.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 123
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table112, "Given ");
#line hidden
#line 132
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Action with missing DateActionActuallyCompleted")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostActionWithMissingDateActionActuallyCompleted()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Action with missing DateActionActuallyCompleted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table113.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table113.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table113.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table113.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table113.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table113.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table113.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 136
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table113, "Given ");
#line hidden
#line 145
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table114.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table114.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table114.AddRow(new string[] {
                            "DateActionActuallyCompleted",
                            ""});
                table114.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table114.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table114.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table114.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table114.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 146
 testRunner.And("the response body should contain:", ((string)(null)), table114, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Action with missing ActionSummary")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostActionWithMissingActionSummary()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Action with missing ActionSummary", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 158
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table115.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table115.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table115.AddRow(new string[] {
                            "DateActionActuallyCompleted",
                            "2018-08-06T09:00:00Z"});
                table115.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table115.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table115.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table115.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
                table115.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-07-30T09:00:00Z"});
#line 159
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table115, "Given ");
#line hidden
#line 169
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Action with missing ActionType")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostActionWithMissingActionType()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Action with missing ActionType", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 172
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table116.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table116.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table116.AddRow(new string[] {
                            "DateActionActuallyCompleted",
                            "2018-08-06T09:00:00Z"});
                table116.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table116.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table116.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table116.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
                table116.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-07-30T09:00:00Z"});
#line 173
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table116, "Given ");
#line hidden
#line 183
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Action with missing PersonResponsible")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostActionWithMissingPersonResponsible()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Action with missing PersonResponsible", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table117.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table117.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table117.AddRow(new string[] {
                            "DateActionActuallyCompleted",
                            "2018-08-06T09:00:00Z"});
                table117.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table117.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table117.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table117.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table117.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-07-30T09:00:00Z"});
#line 187
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table117, "Given ");
#line hidden
#line 197
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Action with DateActionAgreed later than datetime.now")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostActionWithDateActionAgreedLaterThanDatetime_Now()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Action with DateActionAgreed later than datetime.now", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table118.AddRow(new string[] {
                            "DateActionAgreed",
                            "2028-07-30T09:00:00Z"});
                table118.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table118.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table118.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table118.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table118.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table118.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
                table118.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-07-30T09:00:00Z"});
#line 201
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table118, "Given ");
#line hidden
#line 211
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Action with DateActionAimsToBeCompletedBy earlier than DateActionAgreed")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostActionWithDateActionAimsToBeCompletedByEarlierThanDateActionAgreed()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Action with DateActionAimsToBeCompletedBy earlier than DateActionAgreed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 214
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table119.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table119.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-06-08T09:00:00Z"});
                table119.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table119.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table119.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table119.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table119.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
                table119.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-07-30T09:00:00Z"});
#line 215
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table119, "Given ");
#line hidden
#line 225
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Action with DateActionActuallyCompleted earlier than DateActionAgreed")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("V2")]
        public virtual void PostActionWithDateActionActuallyCompletedEarlierThanDateActionAgreed()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "V2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Action with DateActionActuallyCompleted earlier than DateActionAgreed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 228
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table120.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table120.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-07-08T09:00:00Z"});
                table120.AddRow(new string[] {
                            "DateActionActuallyCompleted",
                            "2018-06-08T09:00:00Z"});
                table120.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table120.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table120.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table120.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table120.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
                table120.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-07-30T09:00:00Z"});
#line 229
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table120, "Given ");
#line hidden
#line 240
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
