// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Action
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ActionPatchV2")]
    public partial class ActionPatchV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Action", "ActionPatchV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table75.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table75.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table75, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table76.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table76.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 8
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table76, "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table77.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table77.AddRow(new string[] {
                        "Channel",
                        "2"});
            table77.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table77.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 12
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table77, "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table78.AddRow(new string[] {
                        "DateandTimeOfSession",
                        "2018-06-21T14:45:00Z"});
            table78.AddRow(new string[] {
                        "VenuePostCode",
                        "NN1 2NN"});
#line 18
 testRunner.And("I post a session with the following details:", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table79.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table79.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table79.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table79.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table79.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table79.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table79.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table79.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 22
 testRunner.And("I post an ActionPlan with the following details:", ((string)(null)), table79, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateActionAimsToBeCompletedBy")]
        [NUnit.Framework.CategoryAttribute("actions")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDateActionAimsToBeCompletedBy()
        {
            string[] tagsOfScenario = new string[] {
                    "actions",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateActionAimsToBeCompletedBy", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table80.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table80.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table80.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table80.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table80.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table80.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table80.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 35
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table80, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table81.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-09-08T09:00:00Z"});
#line 44
 testRunner.And("I patch the following Action V2:", ((string)(null)), table81, "And ");
#line hidden
#line 47
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table82.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table82.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-09-08T09:00:00Z"});
                table82.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table82.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table82.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table82.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table82.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 48
 testRunner.And("the response body should contain:", ((string)(null)), table82, "And ");
#line hidden
#line 57
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.Given("I wait for 10 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
 testRunner.Then("there should be a record in the dss-actions table Ignoring \'SignpostedToCategory," +
                        "LastModifiedDate\' with ActionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch SignpostedTo")]
        [NUnit.Framework.CategoryAttribute("actions")]
        public virtual void PatchSignpostedTo()
        {
            string[] tagsOfScenario = new string[] {
                    "actions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch SignpostedTo", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table83.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table83.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table83.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table83.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table83.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table83.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table83.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 92
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table83, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table84.AddRow(new string[] {
                            "SignpostedTo",
                            "Updated Details"});
#line 101
 testRunner.And("I patch the following Action V2:", ((string)(null)), table84, "And ");
#line hidden
#line 104
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table85.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table85.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table85.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table85.AddRow(new string[] {
                            "SignpostedTo",
                            "Updated Details"});
                table85.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table85.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table85.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 105
 testRunner.And("the response body should contain:", ((string)(null)), table85, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch ActionType")]
        [NUnit.Framework.CategoryAttribute("actions")]
        public virtual void PatchActionType()
        {
            string[] tagsOfScenario = new string[] {
                    "actions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch ActionType", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table86.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table86.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table86.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table86.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table86.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table86.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table86.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 117
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table86, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table87.AddRow(new string[] {
                            "ActionType",
                            "2"});
#line 126
 testRunner.And("I patch the following Action V2:", ((string)(null)), table87, "And ");
#line hidden
#line 129
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table88.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table88.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table88.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table88.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table88.AddRow(new string[] {
                            "ActionType",
                            "2"});
                table88.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table88.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 130
 testRunner.And("the response body should contain:", ((string)(null)), table88, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch ActionStatus")]
        [NUnit.Framework.CategoryAttribute("actions")]
        public virtual void PatchActionStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "actions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch ActionStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table89.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table89.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table89.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table89.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table89.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table89.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table89.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 142
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table89, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table90.AddRow(new string[] {
                            "ActionStatus",
                            "2"});
#line 151
 testRunner.And("I patch the following Action V2:", ((string)(null)), table90, "And ");
#line hidden
#line 154
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table91.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table91.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table91.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table91.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table91.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table91.AddRow(new string[] {
                            "ActionStatus",
                            "2"});
                table91.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 155
 testRunner.And("the response body should contain:", ((string)(null)), table91, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PersonResponsible")]
        [NUnit.Framework.CategoryAttribute("actions")]
        public virtual void PatchPersonResponsible()
        {
            string[] tagsOfScenario = new string[] {
                    "actions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PersonResponsible", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table92.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table92.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table92.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table92.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table92.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table92.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table92.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 167
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table92, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table93.AddRow(new string[] {
                            "PersonResponsible",
                            "2"});
#line 176
 testRunner.And("I patch the following Action V2:", ((string)(null)), table93, "And ");
#line hidden
#line 179
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table94.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table94.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table94.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table94.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table94.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table94.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table94.AddRow(new string[] {
                            "PersonResponsible",
                            "2"});
#line 180
 testRunner.And("the response body should contain:", ((string)(null)), table94, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid ActionType")]
        [NUnit.Framework.CategoryAttribute("actions")]
        public virtual void PatchWithInvalidActionType()
        {
            string[] tagsOfScenario = new string[] {
                    "actions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid ActionType", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 191
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table95.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table95.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table95.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table95.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table95.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table95.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table95.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 192
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table95, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table96.AddRow(new string[] {
                            "ActionType",
                            "33"});
#line 201
 testRunner.And("I patch the following Action V2:", ((string)(null)), table96, "And ");
#line hidden
#line 204
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid ActionStatus")]
        public virtual void PatchWithInvalidActionStatus()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid ActionStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 206
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table97.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table97.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table97.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table97.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table97.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table97.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table97.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 207
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table97, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table98.AddRow(new string[] {
                            "ActionStatus",
                            "33"});
#line 216
 testRunner.And("I patch the following Action V2:", ((string)(null)), table98, "And ");
#line hidden
#line 219
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid PersonResponsible")]
        [NUnit.Framework.CategoryAttribute("actions")]
        public virtual void PatchWithInvalidPersonResponsible()
        {
            string[] tagsOfScenario = new string[] {
                    "actions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid PersonResponsible", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 222
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table99.AddRow(new string[] {
                            "DateActionAgreed",
                            "2018-07-30T09:00:00Z"});
                table99.AddRow(new string[] {
                            "DateActionAimsToBeCompletedBy",
                            "2018-08-08T09:00:00Z"});
                table99.AddRow(new string[] {
                            "ActionSummary",
                            "A Summary"});
                table99.AddRow(new string[] {
                            "SignpostedTo",
                            "Some Details"});
                table99.AddRow(new string[] {
                            "ActionType",
                            "1"});
                table99.AddRow(new string[] {
                            "ActionStatus",
                            "1"});
                table99.AddRow(new string[] {
                            "PersonResponsible",
                            "1"});
#line 223
 testRunner.Given("I post an Action with the following details V2:", ((string)(null)), table99, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table100.AddRow(new string[] {
                            "PersonResponsible",
                            "33"});
#line 232
 testRunner.And("I patch the following Action V2:", ((string)(null)), table100, "And ");
#line hidden
#line 235
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
