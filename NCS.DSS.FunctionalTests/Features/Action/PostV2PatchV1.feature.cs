// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Action
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PostV2PatchV1")]
    [NUnit.Framework.CategoryAttribute("postV2")]
    [NUnit.Framework.CategoryAttribute("patchV1")]
    [NUnit.Framework.CategoryAttribute("getV2")]
    public partial class PostV2PatchV1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PostV2PatchV1.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PostV2PatchV1", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV2",
                        "patchV1",
                        "getV2"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
 #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table1.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 9
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table2.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 13
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "Channel",
                        "2"});
            table3.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table3.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 17
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "DateandTimeOfSession",
                        "2018-06-21T14:45:00Z"});
            table4.AddRow(new string[] {
                        "VenuePostCode",
                        "NN1 2NN"});
#line 23
 testRunner.And("I post a session with the following details:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table5.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table5.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table5.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table5.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table5.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table5.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table5.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table5.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 27
 testRunner.And("I post an ActionPlan with the following details:", ((string)(null)), table5, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateActionAimsToBeCompletedBy")]
        [NUnit.Framework.CategoryAttribute("Action")]
        public virtual void PatchDateActionAimsToBeCompletedBy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateActionAimsToBeCompletedBy", null, new string[] {
                        "Action"});
#line 39
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table6.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table6.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table6.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table6.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table6.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table6.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 40
  testRunner.Given("I post an Action with the following details:", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-09-08T09:00:00Z"});
#line 49
  testRunner.When("I patch the following:", ((string)(null)), table7, "When ");
#line 52
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table8.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-09-08T09:00:00Z"});
            table8.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table8.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table8.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table8.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table8.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 53
  testRunner.And("the response body should contain:", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch DateActionAimsToBeCompletedBy with SubcontractorId")]
        [NUnit.Framework.CategoryAttribute("Action")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PatchDateActionAimsToBeCompletedByWithSubcontractorId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch DateActionAimsToBeCompletedBy with SubcontractorId", null, new string[] {
                        "Action",
                        "subcontractorId"});
#line 65
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table9.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table9.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table9.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table9.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table9.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table9.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 66
  testRunner.Given("I post an Action with the following details:", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-09-08T09:00:00Z"});
#line 75
  testRunner.When("I patch the following:", ((string)(null)), table10, "When ");
#line 78
  testRunner.And("I get an Action by ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table11.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-09-08T09:00:00Z"});
            table11.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table11.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table11.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table11.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table11.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 79
  testRunner.Then("the response body should contain:", ((string)(null)), table11, "Then ");
#line 88
  testRunner.And("the response body should contain the SubContractorId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch ActionSummary")]
        [NUnit.Framework.CategoryAttribute("Action")]
        public virtual void PatchActionSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch ActionSummary", null, new string[] {
                        "Action"});
#line 91
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table12.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table12.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table12.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table12.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table12.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table12.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 92
  testRunner.Given("I post an Action with the following details:", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "ActionSummary",
                        "A New Summary"});
#line 101
  testRunner.When("I patch the following:", ((string)(null)), table13, "When ");
#line 104
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table14.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table14.AddRow(new string[] {
                        "ActionSummary",
                        "A New Summary"});
            table14.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table14.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table14.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table14.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 105
  testRunner.And("the response body should contain:", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch SignpostedTo")]
        [NUnit.Framework.CategoryAttribute("Action")]
        public virtual void PatchSignpostedTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch SignpostedTo", null, new string[] {
                        "Action"});
#line 116
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table15.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table15.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table15.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table15.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table15.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table15.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 117
  testRunner.Given("I post an Action with the following details:", ((string)(null)), table15, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "SignpostedTo",
                        "Updated Details"});
#line 126
  testRunner.When("I patch the following:", ((string)(null)), table16, "When ");
#line 129
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table17.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table17.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table17.AddRow(new string[] {
                        "SignpostedTo",
                        "Updated Details"});
            table17.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table17.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table17.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 130
  testRunner.And("the response body should contain:", ((string)(null)), table17, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch ActionType")]
        [NUnit.Framework.CategoryAttribute("Action")]
        public virtual void PatchActionType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch ActionType", null, new string[] {
                        "Action"});
#line 141
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table18.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table18.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table18.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table18.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table18.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table18.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 142
  testRunner.Given("I post an Action with the following details:", ((string)(null)), table18, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "ActionType",
                        "2"});
#line 151
  testRunner.When("I patch the following:", ((string)(null)), table19, "When ");
#line 154
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table20.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table20.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table20.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table20.AddRow(new string[] {
                        "ActionType",
                        "2"});
            table20.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table20.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 155
  testRunner.And("the response body should contain:", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch ActionStatus")]
        [NUnit.Framework.CategoryAttribute("Action")]
        public virtual void PatchActionStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch ActionStatus", null, new string[] {
                        "Action"});
#line 166
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table21.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table21.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table21.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table21.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table21.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table21.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 167
  testRunner.Given("I post an Action with the following details:", ((string)(null)), table21, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "ActionStatus",
                        "2"});
#line 176
  testRunner.When("I patch the following:", ((string)(null)), table22, "When ");
#line 179
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table23.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table23.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table23.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table23.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table23.AddRow(new string[] {
                        "ActionStatus",
                        "2"});
            table23.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 180
  testRunner.And("the response body should contain:", ((string)(null)), table23, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PersonResponsible")]
        [NUnit.Framework.CategoryAttribute("Action")]
        public virtual void PatchPersonResponsible()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PersonResponsible", null, new string[] {
                        "Action"});
#line 191
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table24.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table24.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table24.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table24.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table24.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table24.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 192
  testRunner.Given("I post an Action with the following details:", ((string)(null)), table24, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "PersonResponsible",
                        "2"});
#line 201
  testRunner.When("I patch the following:", ((string)(null)), table25, "When ");
#line 204
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table26.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table26.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table26.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table26.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table26.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table26.AddRow(new string[] {
                        "PersonResponsible",
                        "2"});
#line 205
  testRunner.And("the response body should contain:", ((string)(null)), table26, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid ActionType")]
        [NUnit.Framework.CategoryAttribute("Action")]
        public virtual void PatchWithInvalidActionType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid ActionType", null, new string[] {
                        "Action"});
#line 216
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table27.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table27.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table27.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table27.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table27.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table27.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table27.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 217
  testRunner.Given("I post an Action with the following details:", ((string)(null)), table27, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "ActionType",
                        "33"});
#line 226
  testRunner.When("I patch the following:", ((string)(null)), table28, "When ");
#line 229
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid ActionStatus")]
        [NUnit.Framework.CategoryAttribute("Action")]
        public virtual void PatchWithInvalidActionStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid ActionStatus", null, new string[] {
                        "Action"});
#line 232
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table29.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table29.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table29.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table29.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table29.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table29.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table29.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 233
  testRunner.Given("I post an Action with the following details:", ((string)(null)), table29, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table30.AddRow(new string[] {
                        "ActionStatus",
                        "33"});
#line 242
  testRunner.When("I patch the following:", ((string)(null)), table30, "When ");
#line 245
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid PersonResponsible")]
        [NUnit.Framework.CategoryAttribute("Action")]
        public virtual void PatchWithInvalidPersonResponsible()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid PersonResponsible", null, new string[] {
                        "Action"});
#line 248
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "DateActionAgreed",
                        "2018-07-30T09:00:00Z"});
            table31.AddRow(new string[] {
                        "DateActionAimsToBeCompletedBy",
                        "2018-08-08T09:00:00Z"});
            table31.AddRow(new string[] {
                        "ActionSummary",
                        "A Summary"});
            table31.AddRow(new string[] {
                        "SignpostedTo",
                        "Some Details"});
            table31.AddRow(new string[] {
                        "ActionType",
                        "1"});
            table31.AddRow(new string[] {
                        "ActionStatus",
                        "1"});
            table31.AddRow(new string[] {
                        "PersonResponsible",
                        "1"});
#line 249
  testRunner.Given("I post an Action with the following details:", ((string)(null)), table31, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table32.AddRow(new string[] {
                        "PersonResponsible",
                        "33"});
#line 258
  testRunner.When("I patch the following:", ((string)(null)), table32, "When ");
#line 261
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

