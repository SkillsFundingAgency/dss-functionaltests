// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.EmploymentProgression
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EmploymentProgressionPatchV3")]
    public partial class EmploymentProgressionPatchV3Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV3.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/EmploymentProgression", "EmploymentProgressionPatchV3", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table534 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table534.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table534.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table534, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table535 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table535.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table535.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 8
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table535, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment Progression with  all values")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchEmploymentProgressionWithAllValues()
        {
            string[] tagsOfScenario = new string[] {
                    "employmentprogressions",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment Progression with  all values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table536 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table536.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-08-20T00:00:00Z"});
                table536.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "8"});
                table536.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table536.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table536.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd"});
                table536.AddRow(new string[] {
                            "EmployerAddress",
                            "123 Peat Street"});
                table536.AddRow(new string[] {
                            "EmployerPostcode",
                            "P01 9UX"});
                table536.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table536.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-23T00:00:00Z"});
                table536.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-23T00:00:00Z"});
                table536.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "1"});
#line 15
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table536, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table537 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table537.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-08-21T00:00:00Z"});
                table537.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "1"});
                table537.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table537.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text2"});
                table537.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd2"});
                table537.AddRow(new string[] {
                            "EmployerAddress",
                            "124 Peat Street"});
                table537.AddRow(new string[] {
                            "EmployerPostcode",
                            "DE22 4DE"});
                table537.AddRow(new string[] {
                            "EmploymentHours",
                            "2"});
                table537.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-24T00:00:00Z"});
                table537.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-25T00:00:00Z"});
                table537.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "2"});
#line 28
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table537, "Given ");
#line hidden
#line 41
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table538 = new TechTalk.SpecFlow.Table(new string[] {
                            "DateProgressionRecorded",
                            "2019-08-21T00:00:00Z"});
                table538.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "1"});
                table538.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table538.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text2"});
                table538.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd2"});
                table538.AddRow(new string[] {
                            "EmployerAddress",
                            "124 Peat Street"});
                table538.AddRow(new string[] {
                            "EmployerPostcode",
                            "DE22 4DE"});
                table538.AddRow(new string[] {
                            "EmploymentHours",
                            "2"});
                table538.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-24T00:00:00Z"});
                table538.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-25T00:00:00Z"});
                table538.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "2"});
#line 43
 testRunner.And("the response body should contain:", ((string)(null)), table538, "And ");
#line hidden
#line 56
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2019-08-20T00:00:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table539 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table539.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "8"});
                table539.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table539.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table539.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd"});
                table539.AddRow(new string[] {
                            "EmployerAddress",
                            "123 Peat Street"});
                table539.AddRow(new string[] {
                            "EmployerPostcode",
                            "P01 9UX"});
                table539.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table539.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-23T00:00:00Z"});
                table539.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-23T00:00:00Z"});
                table539.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "1"});
#line 69
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table539, "Given ");
#line hidden
#line 81
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table540 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 82
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table540, "Given ");
#line hidden
#line 84
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table541 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table541.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "8"});
                table541.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table541.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table541.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd"});
                table541.AddRow(new string[] {
                            "EmployerAddress",
                            "123 Peat Street"});
                table541.AddRow(new string[] {
                            "EmployerPostcode",
                            "P01 9UX"});
                table541.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table541.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-23T00:00:00Z"});
                table541.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-23T00:00:00Z"});
                table541.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "1"});
#line 86
 testRunner.And("the response body should contain:", ((string)(null)), table541, "And ");
#line hidden
#line 99
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "gtfr-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1D", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now +1H", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1Y", "DateProgressionRecorded must be less than or equal to now.", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table542 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table542.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table542.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table542.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table542.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table542.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table542.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 111
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table542, "Given ");
#line hidden
#line 119
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table543 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 120
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table543, "Given ");
#line hidden
#line 122
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 137
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table544 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table544.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table544.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table544.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table544.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table544.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 138
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table544, "Given ");
#line hidden
#line 145
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table545 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 146
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table545, "Given ");
#line hidden
#line 148
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table546 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table546.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table546.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table546.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table546.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table546.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 150
 testRunner.And("the response body should contain:", ((string)(null)), table546, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for CurrentEmploymentStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "9", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "10", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "11", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "12", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "13", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "99", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForCurrentEmploymentStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for CurrentEmploymentStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table547 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table547.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table547.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table547.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table547.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table547.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 167
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table547, "Given ");
#line hidden
#line 174
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table548 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 175
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table548, "Given ");
#line hidden
#line 177
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 178
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table549 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table549.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table549.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table549.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table549.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 179
 testRunner.And("the response body should contain:", ((string)(null)), table549, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for CurrentEmploymentStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "-1", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "0", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "14", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "98", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "100", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForCurrentEmploymentStatus(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for CurrentEmploymentStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 208
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table550 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table550.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table550.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table550.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table550.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table550.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 209
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table550, "Given ");
#line hidden
#line 216
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table551 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 217
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table551, "Given ");
#line hidden
#line 219
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 220
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for CurrentEmploymentStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForCurrentEmploymentStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for CurrentEmploymentStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table552 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table552.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table552.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table552.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table552.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table552.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 232
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table552, "Given ");
#line hidden
#line 239
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table553 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 240
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table553, "Given ");
#line hidden
#line 242
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table554 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table554.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table554.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table554.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table554.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table554.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 244
 testRunner.And("the response body should contain:", ((string)(null)), table554, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with CurrentEmploymentStatus in 1, 4, 5, 8, 9 where " +
            "no value for EmploymentHours or DateOfEmployment  exists")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "9", null)]
        public virtual void PatchEmploymentProgressionWithCurrentEmploymentStatusIn14589WhereNoValueForEmploymentHoursOrDateOfEmploymentExists(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with CurrentEmploymentStatus in 1, 4, 5, 8, 9 where " +
                    "no value for EmploymentHours or DateOfEmployment  exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 257
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table555 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table555.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table555.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table555.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
                table555.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table555.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
#line 258
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table555, "Given ");
#line hidden
#line 265
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table556 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 266
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table556, "Given ");
#line hidden
#line 268
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 269
 testRunner.And("the error message should be \"EmploymentHours must have a value when CurrentEmploy" +
                        "mentStatus is Apprenticeship, Employed, EmployedAndVoluntaryWork, RetiredAndVolu" +
                        "ntaryWork or SelfEmployed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 270
 testRunner.And("the error message should be \"DateOfEmployment must have a value when CurrentEmplo" +
                        "ymentStatus is Apprenticeship, Employed, EmployedAndVoluntaryWork, RetiredAndVol" +
                        "untaryWork or SelfEmployed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 271
 testRunner.And("the number of errors returned should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with CurrentEmploymentStatus not in 1, 4, 5, 8, 9 wh" +
            "ere no value for EmploymentHours or DateOfEmployment exists")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "10", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "11", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "12", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "13", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "99", null)]
        public virtual void PatchEmploymentProgressionWithCurrentEmploymentStatusNotIn14589WhereNoValueForEmploymentHoursOrDateOfEmploymentExists(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with CurrentEmploymentStatus not in 1, 4, 5, 8, 9 wh" +
                    "ere no value for EmploymentHours or DateOfEmployment exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table557 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table557.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table557.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table557.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
                table557.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table557.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
#line 283
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table557, "Given ");
#line hidden
#line 290
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table558 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 291
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table558, "Given ");
#line hidden
#line 293
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 294
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table559 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table559.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table559.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
                table559.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table559.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
#line 295
 testRunner.And("the response body should contain:", ((string)(null)), table559, "And ");
#line hidden
#line 302
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "3", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EconomicShockStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 322
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table560 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table560.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table560.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table560.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table560.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table560.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table560.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 323
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table560, "Given ");
#line hidden
#line 331
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table561 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 332
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table561, "Given ");
#line hidden
#line 334
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 335
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table562 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table562.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table562.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table562.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 336
 testRunner.And("the response body should contain:", ((string)(null)), table562, "And ");
#line hidden
#line 342
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "0", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "99", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EconomicShockStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 353
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table563 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table563.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table563.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table563.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table563.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table563.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table563.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 354
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table563, "Given ");
#line hidden
#line 362
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table564 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 363
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table564, "Given ");
#line hidden
#line 365
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 366
 testRunner.And("the error message should be \"EconomicShockStatus must have a valid Economic Shock" +
                        " Status\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 367
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
            "Shock where no value has been set for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "2", null)]
        public virtual void PatchEmploymentProgressionFieldEconomicShockStatusToValueGovernmentDefinedShockWhereNoValueHasBeenSetForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
                    "Shock where no value has been set for EconomicShockStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 378
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table565 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table565.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table565.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table565.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table565.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table565.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 379
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table565, "Given ");
#line hidden
#line 386
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table566 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 387
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table566, "Given ");
#line hidden
#line 389
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 390
 testRunner.And("the response body should include EconomicShockCode must have a value when Governm" +
                        "ent Defined Economic Shock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
            "Shock where a value exists for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "2", null)]
        public virtual void PatchEmploymentProgressionFieldEconomicShockStatusToValueGovernmentDefinedShockWhereAValueExistsForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
                    "Shock where a value exists for EconomicShockStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 397
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table567 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table567.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table567.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table567.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table567.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table567.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some text"});
                table567.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 398
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table567, "Given ");
#line hidden
#line 406
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table568 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 407
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table568, "Given ");
#line hidden
#line 409
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table569 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table569.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table569.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table569.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table569.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some text"});
                table569.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 411
 testRunner.And("the response body should contain:", ((string)(null)), table569, "And ");
#line hidden
#line 419
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EconomicShockStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 428
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table570 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table570.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table570.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table570.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table570.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table570.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 429
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table570, "Given ");
#line hidden
#line 436
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table571 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 437
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table571, "Given ");
#line hidden
#line 439
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table572 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table572.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table572.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table572.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table572.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table572.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 441
 testRunner.And("the response body should contain:", ((string)(null)), table572, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EconomicShockCode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "12345678901234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EconomicShockCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 457
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table573 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table573.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table573.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table573.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table573.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table573.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 458
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table573, "Given ");
#line hidden
#line 465
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table574 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 466
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table574, "Given ");
#line hidden
#line 468
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 469
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table575 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table575.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table575.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table575.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table575.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table575.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 470
 testRunner.And("the response body should contain:", ((string)(null)), table575, "And ");
#line hidden
#line 478
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EconomicShockCode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "123456789012345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EconomicShockCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 488
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table576 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table576.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table576.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table576.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table576.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table576.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table576.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 489
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table576, "Given ");
#line hidden
#line 497
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table577 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 498
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table577, "Given ");
#line hidden
#line 500
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 501
 testRunner.And("the error message should be \"The field EconomicShockCode must be a string with a " +
                        "maximum length of 50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 502
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EconomicShockCode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EconomicShockCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 509
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table578 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table578.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table578.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table578.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table578.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table578.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table578.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 510
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table578, "Given ");
#line hidden
#line 518
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table579 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 519
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table579, "Given ");
#line hidden
#line 521
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table580 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table580.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table580.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table580.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table580.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table580.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table580.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 523
 testRunner.And("the response body should contain:", ((string)(null)), table580, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerName")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerName(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 540
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table581 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table581.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table581.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table581.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table581.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table581.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 541
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table581, "Given ");
#line hidden
#line 548
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table582 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 549
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table582, "Given ");
#line hidden
#line 551
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 552
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table583 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table583.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table583.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table583.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table583.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table583.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 553
 testRunner.And("the response body should contain:", ((string)(null)), table583, "And ");
#line hidden
#line 561
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerName")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "2345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerName(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 571
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table584 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table584.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table584.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table584.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table584.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table584.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table584.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 572
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table584, "Given ");
#line hidden
#line 580
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table585 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 581
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table585, "Given ");
#line hidden
#line 583
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 584
 testRunner.And("the error message should be \"The field EmployerName must be a string with a maxim" +
                        "um length of 200.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 585
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerName")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerName(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 592
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table586 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table586.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table586.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table586.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table586.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table586.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table586.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table586.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 593
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table586, "Given ");
#line hidden
#line 602
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table587 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 603
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table587, "Given ");
#line hidden
#line 605
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table588 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table588.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table588.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table588.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table588.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table588.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table588.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table588.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 607
 testRunner.And("the response body should contain:", ((string)(null)), table588, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerAddress")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", @"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerAddress(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerAddress", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 625
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table589 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table589.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table589.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table589.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table589.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table589.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 626
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table589, "Given ");
#line hidden
#line 633
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table590 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 634
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table590, "Given ");
#line hidden
#line 636
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 637
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table591 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table591.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table591.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table591.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table591.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table591.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 638
 testRunner.And("the response body should contain:", ((string)(null)), table591, "And ");
#line hidden
#line 646
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerAddress")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", @"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901123456789012345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerAddress(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerAddress", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 656
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table592 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table592.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table592.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table592.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table592.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table592.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table592.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 657
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table592, "Given ");
#line hidden
#line 665
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table593 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 666
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table593, "Given ");
#line hidden
#line 668
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 669
 testRunner.And("the error message should be \"The field EmployerAddress must be a string with a ma" +
                        "ximum length of 500\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 670
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerAddress")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerAddress(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerAddress", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 677
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table594 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table594.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table594.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table594.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table594.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table594.AddRow(new string[] {
                            "EmployerAddress",
                            "Some more text"});
                table594.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table594.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table594.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 678
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table594, "Given ");
#line hidden
#line 688
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table595 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 689
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table595, "Given ");
#line hidden
#line 691
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table596 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table596.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table596.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table596.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table596.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table596.AddRow(new string[] {
                            "EmployerAddress",
                            "Some more text"});
                table596.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table596.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table596.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 693
 testRunner.And("the response body should contain:", ((string)(null)), table596, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerPostcode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE22 4DE", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE224DE", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerPostcode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerPostcode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 712
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table597 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table597.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table597.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table597.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table597.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table597.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table597.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 713
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table597, "Given ");
#line hidden
#line 721
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table598 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 722
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table598, "Given ");
#line hidden
#line 724
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 725
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table599 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table599.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table599.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table599.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table599.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table599.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 726
 testRunner.And("the response body should contain:", ((string)(null)), table599, "And ");
#line hidden
#line 734
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerPostcode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE22 4def", "Please enter a valid postcode", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerPostcode(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerPostcode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 748
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table600 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table600.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table600.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table600.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table600.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table600.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 749
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table600, "Given ");
#line hidden
#line 756
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table601 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 757
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table601, "Given ");
#line hidden
#line 759
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 760
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerPostcode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerPostcode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerPostcode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 767
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table602 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table602.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table602.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table602.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table602.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table602.AddRow(new string[] {
                            "EmployerAddress",
                            "Some more text"});
                table602.AddRow(new string[] {
                            "EmployerPostcode",
                            "De22 2ab"});
                table602.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table602.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table602.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 768
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table602, "Given ");
#line hidden
#line 779
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table603 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 780
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table603, "Given ");
#line hidden
#line 782
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table604 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table604.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table604.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table604.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table604.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table604.AddRow(new string[] {
                            "EmployerAddress",
                            "Some more text"});
                table604.AddRow(new string[] {
                            "EmployerPostcode",
                            "De22 2ab"});
                table604.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table604.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table604.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 784
 testRunner.And("the response body should contain:", ((string)(null)), table604, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmploymentHours")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "1", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "2", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "98", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "99", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmploymentHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmploymentHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 812
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table605 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table605.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table605.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table605.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table605.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table605.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 813
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table605, "Given ");
#line hidden
#line 820
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table606 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 821
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table606, "Given ");
#line hidden
#line 823
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 824
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table607 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table607.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table607.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table607.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table607.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 825
 testRunner.And("the response body should contain:", ((string)(null)), table607, "And ");
#line hidden
#line 832
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmploymentHours")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "-1", "EmploymentHours must be a valid employment hours", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "0", "EmploymentHours must be a valid employment hours", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "97", "EmploymentHours must be a valid employment hours", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "100", "EmploymentHours must be a valid employment hours", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmploymentHours(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmploymentHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 844
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table608 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table608.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table608.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table608.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table608.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 845
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table608, "Given ");
#line hidden
#line 851
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table609 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 852
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table609, "Given ");
#line hidden
#line 854
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 855
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(": Patch Employment progression with no value for EmploymentHours")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmploymentHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(": Patch Employment progression with no value for EmploymentHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 865
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table610 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table610.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table610.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table610.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table610.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table610.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 866
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table610, "Given ");
#line hidden
#line 873
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table611 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 874
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table611, "Given ");
#line hidden
#line 876
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 877
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table612 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table612.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table612.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table612.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table612.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
                table612.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
#line 878
 testRunner.And("the response body should contain:", ((string)(null)), table612, "And ");
#line hidden
#line 886
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for DateOfEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "2018-06-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Now", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForDateOfEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for DateOfEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 899
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table613 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table613.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table613.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table613.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table613.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table613.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 900
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table613, "Given ");
#line hidden
#line 907
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table614 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 908
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table614, "Given ");
#line hidden
#line 910
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table615 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table615.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table615.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table615.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table615.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
#line 912
 testRunner.And("the response body should contain:", ((string)(null)), table615, "And ");
#line hidden
#line 919
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for DateOfEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Today +1D", "DateOfEmployment must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Now +1H", "DateOfEmployment must be less than or equal to now", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForDateOfEmployment(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for DateOfEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 930
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table616 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table616.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table616.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table616.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
#line 931
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table616, "Given ");
#line hidden
#line 936
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table617 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 937
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table617, "Given ");
#line hidden
#line 939
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 940
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for DateOfEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForDateOfEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for DateOfEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 948
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table618 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table618.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table618.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table618.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table618.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
#line 949
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table618, "Given ");
#line hidden
#line 955
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table619 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 956
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table619, "Given ");
#line hidden
#line 958
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table620 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table620.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table620.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table620.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table620.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table620.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
#line 959
 testRunner.And("the response body should contain:", ((string)(null)), table620, "And ");
#line hidden
#line 967
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for DateOfLastEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "2018-06-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Now", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForDateOfLastEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for DateOfLastEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 979
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table621 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table621.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table621.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table621.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table621.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table621.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 980
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table621, "Given ");
#line hidden
#line 987
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table622 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 988
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table622, "Given ");
#line hidden
#line 990
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table623 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table623.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table623.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table623.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table623.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
                table623.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
#line 992
 testRunner.And("the response body should contain:", ((string)(null)), table623, "And ");
#line hidden
#line 1000
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for DateOfLastEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Today +1D", "DateOfLastEmployment must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Now +1H", "DateOfLastEmployment must be less than or equal to now", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForDateOfLastEmployment(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for DateOfLastEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1011
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table624 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table624.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table624.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table624.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
#line 1012
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table624, "Given ");
#line hidden
#line 1017
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table625 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1018
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table625, "Given ");
#line hidden
#line 1020
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1021
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for DateOfLastEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "", null)]
        public virtual void PostEmploymentProgressionWithNoValueForDateOfLastEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for DateOfLastEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1030
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table626 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table626.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table626.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table626.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table626.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table626.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 1031
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table626, "Given ");
#line hidden
#line 1038
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table627 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1039
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table627, "Given ");
#line hidden
#line 1041
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table628 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table628.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table628.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table628.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table628.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
                table628.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
                table628.AddRow(new string[] {
                            "DateOfLastEmployment",
                            ""});
#line 1042
 testRunner.And("the response body should contain:", ((string)(null)), table628, "And ");
#line hidden
#line 1051
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for LengthOfUnemployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "2", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "3", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "4", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "5", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "6", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "99", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForLengthOfUnemployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for LengthOfUnemployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1063
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table629 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table629.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table629.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table629.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table629.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table629.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 1064
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table629, "Given ");
#line hidden
#line 1071
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table630 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1072
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table630, "Given ");
#line hidden
#line 1074
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1075
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table631 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table631.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table631.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table631.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table631.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 1076
 testRunner.And("the response body should contain:", ((string)(null)), table631, "And ");
#line hidden
#line 1083
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for LengthOfUnemployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "-1", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "0", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "7", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "97", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "100", "Please supply a valid value for Length Of Unemployment", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForLengthOfUnemployment(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for LengthOfUnemployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1099
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table632 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table632.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table632.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table632.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table632.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 1100
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table632, "Given ");
#line hidden
#line 1106
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table633 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1107
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table633, "Given ");
#line hidden
#line 1109
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1110
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(": Patch Employment progression with no value for LengthOfUnemployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForLengthOfUnemployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(": Patch Employment progression with no value for LengthOfUnemployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table634 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table634.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table634.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table634.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table634.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table634.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 1122
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table634, "Given ");
#line hidden
#line 1129
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table635 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1130
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table635, "Given ");
#line hidden
#line 1132
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1133
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table636 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table636.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table636.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table636.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table636.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
                table636.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
                table636.AddRow(new string[] {
                            "LengthOfUnemployment",
                            ""});
#line 1134
 testRunner.And("the response body should contain:", ((string)(null)), table636, "And ");
#line hidden
#line 1143
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment Progression with value for LastModifiedTouchpointID")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedTouchpointID", "99999999", null)]
        public virtual void PatchEmploymentProgressionWithValueForLastModifiedTouchpointID(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment Progression with value for LastModifiedTouchpointID", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1192
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table637 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table637.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-08-20T00:00:00Z"});
                table637.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "8"});
                table637.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table637.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table637.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd"});
                table637.AddRow(new string[] {
                            "EmployerAddress",
                            "123 Peat Street"});
                table637.AddRow(new string[] {
                            "EmployerPostcode",
                            "P01 9UX"});
                table637.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table637.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-23T00:00:00Z"});
                table637.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-23T00:00:00Z"});
                table637.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "1"});
#line 1193
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table637, "Given ");
#line hidden
#line 1206
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table638 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1207
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table638, "Given ");
#line hidden
#line 1209
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table639 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table639.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-08-20T00:00:00Z"});
                table639.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "8"});
                table639.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table639.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table639.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd"});
                table639.AddRow(new string[] {
                            "EmployerAddress",
                            "123 Peat Street"});
                table639.AddRow(new string[] {
                            "EmployerPostcode",
                            "P01 9UX"});
                table639.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table639.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-23T00:00:00Z"});
                table639.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-23T00:00:00Z"});
                table639.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "1"});
#line 1211
 testRunner.And("the response body should contain:", ((string)(null)), table639, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
