// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.EmploymentProgression
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EmploymentProgressionPatchV3")]
    public partial class EmploymentProgressionPatchV3Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV3.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/EmploymentProgression", "EmploymentProgressionPatchV3", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table704 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table704.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table704.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table704, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table705 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table705.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table705.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 8
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table705, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment Progression with  all values")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchEmploymentProgressionWithAllValues()
        {
            string[] tagsOfScenario = new string[] {
                    "employmentprogressions",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment Progression with  all values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table706 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table706.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-08-20T00:00:00Z"});
                table706.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "8"});
                table706.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table706.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table706.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd"});
                table706.AddRow(new string[] {
                            "EmployerAddress",
                            "123 Peat Street"});
                table706.AddRow(new string[] {
                            "EmployerPostcode",
                            "P01 9UX"});
                table706.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table706.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-23T00:00:00Z"});
                table706.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-23T00:00:00Z"});
                table706.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "1"});
#line 15
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table706, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table707 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table707.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-08-21T00:00:00Z"});
                table707.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "1"});
                table707.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table707.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text2"});
                table707.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd2"});
                table707.AddRow(new string[] {
                            "EmployerAddress",
                            "124 Peat Street"});
                table707.AddRow(new string[] {
                            "EmployerPostcode",
                            "DE22 4DE"});
                table707.AddRow(new string[] {
                            "EmploymentHours",
                            "2"});
                table707.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-24T00:00:00Z"});
                table707.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-25T00:00:00Z"});
                table707.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "2"});
#line 28
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table707, "Given ");
#line hidden
#line 41
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table708 = new TechTalk.SpecFlow.Table(new string[] {
                            "DateProgressionRecorded",
                            "2019-08-21T00:00:00Z"});
                table708.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "1"});
                table708.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table708.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text2"});
                table708.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd2"});
                table708.AddRow(new string[] {
                            "EmployerAddress",
                            "124 Peat Street"});
                table708.AddRow(new string[] {
                            "EmployerPostcode",
                            "DE22 4DE"});
                table708.AddRow(new string[] {
                            "EmploymentHours",
                            "2"});
                table708.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-24T00:00:00Z"});
                table708.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-25T00:00:00Z"});
                table708.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "2"});
#line 43
 testRunner.And("the response body should contain:", ((string)(null)), table708, "And ");
#line hidden
#line 56
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("there should be a record in the dss-employmentprogressions table Ignoring \'\' with" +
                        " EmploymentProgressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2019-08-20T00:00:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table709 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table709.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "8"});
                table709.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table709.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table709.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd"});
                table709.AddRow(new string[] {
                            "EmployerAddress",
                            "123 Peat Street"});
                table709.AddRow(new string[] {
                            "EmployerPostcode",
                            "P01 9UX"});
                table709.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table709.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-23T00:00:00Z"});
                table709.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-23T00:00:00Z"});
                table709.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "1"});
#line 69
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table709, "Given ");
#line hidden
#line 81
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table710 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 82
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table710, "Given ");
#line hidden
#line 84
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table711 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table711.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "8"});
                table711.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table711.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table711.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd"});
                table711.AddRow(new string[] {
                            "EmployerAddress",
                            "123 Peat Street"});
                table711.AddRow(new string[] {
                            "EmployerPostcode",
                            "P01 9UX"});
                table711.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table711.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-23T00:00:00Z"});
                table711.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-23T00:00:00Z"});
                table711.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "1"});
#line 86
 testRunner.And("the response body should contain:", ((string)(null)), table711, "And ");
#line hidden
#line 99
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "gtfr-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1D", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now +1H", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1Y", "DateProgressionRecorded must be less than or equal to now.", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table712 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table712.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table712.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table712.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table712.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table712.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table712.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 111
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table712, "Given ");
#line hidden
#line 119
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table713 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 120
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table713, "Given ");
#line hidden
#line 122
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 137
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table714 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table714.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table714.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table714.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table714.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table714.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 138
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table714, "Given ");
#line hidden
#line 145
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table715 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 146
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table715, "Given ");
#line hidden
#line 148
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table716 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table716.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table716.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table716.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table716.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table716.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 150
 testRunner.And("the response body should contain:", ((string)(null)), table716, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for CurrentEmploymentStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "9", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "10", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "11", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "12", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "13", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "99", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForCurrentEmploymentStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for CurrentEmploymentStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table717 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table717.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table717.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table717.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table717.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table717.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 167
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table717, "Given ");
#line hidden
#line 174
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table718 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 175
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table718, "Given ");
#line hidden
#line 177
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 178
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table719 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table719.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table719.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table719.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table719.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 179
 testRunner.And("the response body should contain:", ((string)(null)), table719, "And ");
#line hidden
#line 187
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for CurrentEmploymentStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "-1", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "0", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "14", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "98", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "100", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForCurrentEmploymentStatus(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for CurrentEmploymentStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 208
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table720 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table720.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table720.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table720.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table720.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table720.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 209
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table720, "Given ");
#line hidden
#line 216
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table721 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 217
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table721, "Given ");
#line hidden
#line 219
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 220
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for CurrentEmploymentStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForCurrentEmploymentStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for CurrentEmploymentStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table722 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table722.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table722.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table722.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table722.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table722.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 232
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table722, "Given ");
#line hidden
#line 239
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table723 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 240
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table723, "Given ");
#line hidden
#line 242
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table724 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table724.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table724.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table724.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table724.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table724.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 244
 testRunner.And("the response body should contain:", ((string)(null)), table724, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with CurrentEmploymentStatus in 1, 4, 5, 8, 9 where " +
            "no value for EmploymentHours or DateOfEmployment  exists")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "9", null)]
        public virtual void PatchEmploymentProgressionWithCurrentEmploymentStatusIn14589WhereNoValueForEmploymentHoursOrDateOfEmploymentExists(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with CurrentEmploymentStatus in 1, 4, 5, 8, 9 where " +
                    "no value for EmploymentHours or DateOfEmployment  exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 257
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table725 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table725.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table725.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table725.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
                table725.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table725.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
#line 258
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table725, "Given ");
#line hidden
#line 265
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table726 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 266
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table726, "Given ");
#line hidden
#line 268
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 269
 testRunner.And("the error message should be \"EmploymentHours must have a value when CurrentEmploy" +
                        "mentStatus is Apprenticeship, Employed, EmployedAndVoluntaryWork, RetiredAndVolu" +
                        "ntaryWork or SelfEmployed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 270
 testRunner.And("the error message should be \"DateOfEmployment must have a value when CurrentEmplo" +
                        "ymentStatus is Apprenticeship, Employed, EmployedAndVoluntaryWork, RetiredAndVol" +
                        "untaryWork or SelfEmployed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 271
 testRunner.And("the number of errors returned should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with CurrentEmploymentStatus not in 1, 4, 5, 8, 9 wh" +
            "ere no value for EmploymentHours or DateOfEmployment exists")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "10", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "11", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "12", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "13", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "99", null)]
        public virtual void PatchEmploymentProgressionWithCurrentEmploymentStatusNotIn14589WhereNoValueForEmploymentHoursOrDateOfEmploymentExists(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with CurrentEmploymentStatus not in 1, 4, 5, 8, 9 wh" +
                    "ere no value for EmploymentHours or DateOfEmployment exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table727 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table727.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table727.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table727.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
                table727.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table727.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
#line 283
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table727, "Given ");
#line hidden
#line 290
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table728 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 291
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table728, "Given ");
#line hidden
#line 293
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 294
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table729 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table729.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table729.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
                table729.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table729.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
#line 295
 testRunner.And("the response body should contain:", ((string)(null)), table729, "And ");
#line hidden
#line 302
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 303
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "3", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EconomicShockStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 322
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table730 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table730.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table730.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table730.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table730.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table730.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table730.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 323
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table730, "Given ");
#line hidden
#line 331
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table731 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 332
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table731, "Given ");
#line hidden
#line 334
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 335
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table732 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table732.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table732.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table732.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 336
 testRunner.And("the response body should contain:", ((string)(null)), table732, "And ");
#line hidden
#line 342
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 343
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "0", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "99", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EconomicShockStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 353
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table733 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table733.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table733.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table733.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table733.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table733.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table733.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 354
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table733, "Given ");
#line hidden
#line 362
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table734 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 363
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table734, "Given ");
#line hidden
#line 365
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 366
 testRunner.And("the error message should be \"EconomicShockStatus must have a valid Economic Shock" +
                        " Status\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 367
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
            "Shock where no value has been set for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "2", null)]
        public virtual void PatchEmploymentProgressionFieldEconomicShockStatusToValueGovernmentDefinedShockWhereNoValueHasBeenSetForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
                    "Shock where no value has been set for EconomicShockStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 378
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table735 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table735.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table735.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table735.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table735.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table735.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 379
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table735, "Given ");
#line hidden
#line 386
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table736 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 387
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table736, "Given ");
#line hidden
#line 389
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 390
 testRunner.And("the response body should include EconomicShockCode must have a value when Governm" +
                        "ent Defined Economic Shock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
            "Shock where a value exists for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "2", null)]
        public virtual void PatchEmploymentProgressionFieldEconomicShockStatusToValueGovernmentDefinedShockWhereAValueExistsForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
                    "Shock where a value exists for EconomicShockStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 397
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table737 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table737.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table737.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table737.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table737.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table737.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some text"});
                table737.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 398
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table737, "Given ");
#line hidden
#line 406
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table738 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 407
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table738, "Given ");
#line hidden
#line 409
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table739 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table739.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table739.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table739.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table739.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some text"});
                table739.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 411
 testRunner.And("the response body should contain:", ((string)(null)), table739, "And ");
#line hidden
#line 419
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 420
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EconomicShockStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 428
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table740 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table740.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table740.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table740.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table740.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table740.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 429
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table740, "Given ");
#line hidden
#line 436
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table741 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 437
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table741, "Given ");
#line hidden
#line 439
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table742 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table742.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table742.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table742.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table742.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table742.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 441
 testRunner.And("the response body should contain:", ((string)(null)), table742, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EconomicShockCode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "12345678901234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EconomicShockCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 457
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table743 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table743.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table743.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table743.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table743.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table743.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 458
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table743, "Given ");
#line hidden
#line 465
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table744 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 466
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table744, "Given ");
#line hidden
#line 468
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 469
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table745 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table745.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table745.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table745.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table745.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table745.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 470
 testRunner.And("the response body should contain:", ((string)(null)), table745, "And ");
#line hidden
#line 478
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 479
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EconomicShockCode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "123456789012345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EconomicShockCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 488
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table746 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table746.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table746.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table746.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table746.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table746.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table746.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 489
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table746, "Given ");
#line hidden
#line 497
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table747 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 498
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table747, "Given ");
#line hidden
#line 500
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 501
 testRunner.And("the error message should be \"The field EconomicShockCode must be a string with a " +
                        "maximum length of 50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 502
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EconomicShockCode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EconomicShockCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 509
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table748 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table748.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table748.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table748.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table748.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table748.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table748.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 510
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table748, "Given ");
#line hidden
#line 518
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table749 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 519
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table749, "Given ");
#line hidden
#line 521
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table750 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table750.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table750.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table750.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table750.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table750.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table750.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 523
 testRunner.And("the response body should contain:", ((string)(null)), table750, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerName")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerName(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 540
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table751 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table751.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table751.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table751.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table751.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table751.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 541
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table751, "Given ");
#line hidden
#line 548
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table752 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 549
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table752, "Given ");
#line hidden
#line 551
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 552
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table753 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table753.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table753.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table753.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table753.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table753.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 553
 testRunner.And("the response body should contain:", ((string)(null)), table753, "And ");
#line hidden
#line 561
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 562
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerName")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "2345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerName(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 571
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table754 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table754.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table754.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table754.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table754.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table754.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table754.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 572
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table754, "Given ");
#line hidden
#line 580
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table755 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 581
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table755, "Given ");
#line hidden
#line 583
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 584
 testRunner.And("the error message should be \"The field EmployerName must be a string with a maxim" +
                        "um length of 200.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 585
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerName")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerName(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 592
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table756 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table756.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table756.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table756.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table756.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table756.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table756.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table756.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 593
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table756, "Given ");
#line hidden
#line 602
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table757 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 603
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table757, "Given ");
#line hidden
#line 605
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table758 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table758.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table758.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table758.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table758.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table758.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table758.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table758.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 607
 testRunner.And("the response body should contain:", ((string)(null)), table758, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerAddress")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", @"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerAddress(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerAddress", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 625
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table759 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table759.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table759.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table759.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table759.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table759.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 626
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table759, "Given ");
#line hidden
#line 633
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table760 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 634
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table760, "Given ");
#line hidden
#line 636
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 637
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table761 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table761.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table761.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table761.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table761.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table761.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 638
 testRunner.And("the response body should contain:", ((string)(null)), table761, "And ");
#line hidden
#line 646
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 647
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerAddress")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", @"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901123456789012345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerAddress(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerAddress", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 656
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table762 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table762.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table762.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table762.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table762.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table762.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table762.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 657
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table762, "Given ");
#line hidden
#line 665
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table763 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 666
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table763, "Given ");
#line hidden
#line 668
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 669
 testRunner.And("the error message should be \"The field EmployerAddress must be a string with a ma" +
                        "ximum length of 500\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 670
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerAddress")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerAddress(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerAddress", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 677
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table764 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table764.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table764.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table764.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table764.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table764.AddRow(new string[] {
                            "EmployerAddress",
                            "Some more text"});
                table764.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table764.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table764.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 678
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table764, "Given ");
#line hidden
#line 688
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table765 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 689
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table765, "Given ");
#line hidden
#line 691
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table766 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table766.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table766.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table766.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table766.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table766.AddRow(new string[] {
                            "EmployerAddress",
                            "Some more text"});
                table766.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table766.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table766.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 693
 testRunner.And("the response body should contain:", ((string)(null)), table766, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerPostcode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE22 4DE", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE224DE", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerPostcode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerPostcode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 712
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table767 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table767.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table767.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table767.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table767.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table767.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table767.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 713
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table767, "Given ");
#line hidden
#line 721
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table768 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 722
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table768, "Given ");
#line hidden
#line 724
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 725
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table769 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table769.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table769.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table769.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table769.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table769.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 726
 testRunner.And("the response body should contain:", ((string)(null)), table769, "And ");
#line hidden
#line 734
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 737
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerPostcode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE22 4def", "Please enter a valid postcode", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerPostcode(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerPostcode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 747
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table770 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table770.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table770.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table770.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table770.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table770.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 748
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table770, "Given ");
#line hidden
#line 755
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table771 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 756
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table771, "Given ");
#line hidden
#line 758
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 759
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerPostcode")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerPostcode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerPostcode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 766
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table772 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table772.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table772.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table772.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table772.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table772.AddRow(new string[] {
                            "EmployerAddress",
                            "Some more text"});
                table772.AddRow(new string[] {
                            "EmployerPostcode",
                            "De22 2ab"});
                table772.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table772.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table772.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 767
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table772, "Given ");
#line hidden
#line 778
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table773 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 779
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table773, "Given ");
#line hidden
#line 781
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table774 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table774.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table774.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table774.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table774.AddRow(new string[] {
                            "EmployerName",
                            "Some text"});
                table774.AddRow(new string[] {
                            "EmployerAddress",
                            "Some more text"});
                table774.AddRow(new string[] {
                            "EmployerPostcode",
                            "De22 2ab"});
                table774.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table774.AddRow(new string[] {
                            "EconomicShockCode",
                            "some text"});
                table774.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 783
 testRunner.And("the response body should contain:", ((string)(null)), table774, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmploymentHours")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "1", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "2", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "98", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "99", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmploymentHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmploymentHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 811
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table775 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table775.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table775.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table775.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table775.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table775.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 812
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table775, "Given ");
#line hidden
#line 819
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table776 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 820
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table776, "Given ");
#line hidden
#line 822
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 823
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table777 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table777.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table777.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table777.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table777.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 824
 testRunner.And("the response body should contain:", ((string)(null)), table777, "And ");
#line hidden
#line 831
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 832
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmploymentHours")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "-1", "EmploymentHours must be a valid employment hours", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "0", "EmploymentHours must be a valid employment hours", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "97", "EmploymentHours must be a valid employment hours", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "100", "EmploymentHours must be a valid employment hours", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmploymentHours(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmploymentHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 843
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table778 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table778.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table778.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table778.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table778.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 844
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table778, "Given ");
#line hidden
#line 850
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table779 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 851
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table779, "Given ");
#line hidden
#line 853
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 854
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(": Patch Employment progression with no value for EmploymentHours")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmploymentHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(": Patch Employment progression with no value for EmploymentHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 864
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table780 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table780.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table780.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table780.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table780.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table780.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 865
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table780, "Given ");
#line hidden
#line 872
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table781 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 873
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table781, "Given ");
#line hidden
#line 875
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 876
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table782 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table782.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table782.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table782.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table782.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
                table782.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
#line 877
 testRunner.And("the response body should contain:", ((string)(null)), table782, "And ");
#line hidden
#line 885
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 886
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for DateOfEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "2018-06-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Now", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForDateOfEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for DateOfEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 898
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table783 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table783.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table783.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table783.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table783.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table783.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 899
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table783, "Given ");
#line hidden
#line 906
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table784 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 907
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table784, "Given ");
#line hidden
#line 909
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table785 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table785.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table785.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table785.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table785.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
#line 911
 testRunner.And("the response body should contain:", ((string)(null)), table785, "And ");
#line hidden
#line 918
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 919
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for DateOfEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Today +1D", "DateOfEmployment must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Now +1H", "DateOfEmployment must be less than or equal to now", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForDateOfEmployment(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for DateOfEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 929
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table786 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table786.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table786.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table786.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
#line 930
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table786, "Given ");
#line hidden
#line 935
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table787 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 936
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table787, "Given ");
#line hidden
#line 938
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 939
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for DateOfEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForDateOfEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for DateOfEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 947
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table788 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table788.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table788.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table788.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table788.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
#line 948
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table788, "Given ");
#line hidden
#line 954
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table789 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 955
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table789, "Given ");
#line hidden
#line 957
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table790 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table790.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table790.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table790.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table790.AddRow(new string[] {
                            "DateOfEmployment",
                            ""});
                table790.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
#line 958
 testRunner.And("the response body should contain:", ((string)(null)), table790, "And ");
#line hidden
#line 966
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 967
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for DateOfLastEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "2018-06-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Now", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForDateOfLastEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for DateOfLastEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 978
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table791 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table791.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table791.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table791.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table791.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table791.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 979
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table791, "Given ");
#line hidden
#line 986
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table792 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 987
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table792, "Given ");
#line hidden
#line 989
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table793 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table793.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table793.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table793.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table793.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
                table793.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
#line 991
 testRunner.And("the response body should contain:", ((string)(null)), table793, "And ");
#line hidden
#line 999
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1000
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for DateOfLastEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Today +1D", "DateOfLastEmployment must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Now +1H", "DateOfLastEmployment must be less than or equal to now", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForDateOfLastEmployment(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for DateOfLastEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1010
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table794 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table794.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table794.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table794.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
#line 1011
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table794, "Given ");
#line hidden
#line 1016
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table795 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1017
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table795, "Given ");
#line hidden
#line 1019
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1020
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for DateOfLastEmployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "", null)]
        public virtual void PostEmploymentProgressionWithNoValueForDateOfLastEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for DateOfLastEmployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1029
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table796 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table796.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table796.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table796.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table796.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table796.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 1030
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table796, "Given ");
#line hidden
#line 1037
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table797 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1038
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table797, "Given ");
#line hidden
#line 1040
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table798 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table798.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table798.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table798.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table798.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
                table798.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
                table798.AddRow(new string[] {
                            "DateOfLastEmployment",
                            ""});
#line 1041
 testRunner.And("the response body should contain:", ((string)(null)), table798, "And ");
#line hidden
#line 1050
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1051
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for LengthOfUnemployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "2", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "3", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "4", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "5", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "6", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "99", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForLengthOfUnemployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for LengthOfUnemployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1062
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table799 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table799.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table799.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table799.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table799.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table799.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 1063
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table799, "Given ");
#line hidden
#line 1070
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table800 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1071
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table800, "Given ");
#line hidden
#line 1073
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1074
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table801 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table801.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table801.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table801.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table801.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 1075
 testRunner.And("the response body should contain:", ((string)(null)), table801, "And ");
#line hidden
#line 1082
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1083
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for LengthOfUnemployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "-1", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "0", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "7", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "97", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "100", "Please supply a valid value for Length Of Unemployment", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForLengthOfUnemployment(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for LengthOfUnemployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1098
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table802 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table802.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table802.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table802.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table802.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 1099
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table802, "Given ");
#line hidden
#line 1105
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table803 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1106
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table803, "Given ");
#line hidden
#line 1108
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1109
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(": Patch Employment progression with no value for LengthOfUnemployment")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForLengthOfUnemployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(": Patch Employment progression with no value for LengthOfUnemployment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1120
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table804 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table804.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table804.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table804.AddRow(new string[] {
                            "EmployerPostcode",
                            "ng1 1gn"});
                table804.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table804.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
#line 1121
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table804, "Given ");
#line hidden
#line 1128
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table805 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1129
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table805, "Given ");
#line hidden
#line 1131
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1132
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table806 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table806.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table806.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "99"});
                table806.AddRow(new string[] {
                            "EconomicShockStatus",
                            "1"});
                table806.AddRow(new string[] {
                            "DateOfEmployment",
                            "2018-06-19T09:01:00Z"});
                table806.AddRow(new string[] {
                            "EmploymentHours",
                            ""});
                table806.AddRow(new string[] {
                            "LengthOfUnemployment",
                            ""});
#line 1133
 testRunner.And("the response body should contain:", ((string)(null)), table806, "And ");
#line hidden
#line 1142
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1143
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment Progression with value for LastModifiedTouchpointID")]
        [NUnit.Framework.CategoryAttribute("employmentprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedTouchpointID", "99999999", null)]
        public virtual void PatchEmploymentProgressionWithValueForLastModifiedTouchpointID(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "employmentprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment Progression with value for LastModifiedTouchpointID", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1191
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table807 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table807.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-08-20T00:00:00Z"});
                table807.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "8"});
                table807.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table807.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table807.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd"});
                table807.AddRow(new string[] {
                            "EmployerAddress",
                            "123 Peat Street"});
                table807.AddRow(new string[] {
                            "EmployerPostcode",
                            "P01 9UX"});
                table807.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table807.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-23T00:00:00Z"});
                table807.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-23T00:00:00Z"});
                table807.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "1"});
#line 1192
 testRunner.Given("I post a Employment Progression record with the following details V3:", ((string)(null)), table807, "Given ");
#line hidden
#line 1205
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table808 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 1206
 testRunner.Given("I patch the following EmploymentProgression V3:", ((string)(null)), table808, "Given ");
#line hidden
#line 1208
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table809 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table809.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-08-20T00:00:00Z"});
                table809.AddRow(new string[] {
                            "CurrentEmploymentStatus",
                            "8"});
                table809.AddRow(new string[] {
                            "EconomicShockStatus",
                            "2"});
                table809.AddRow(new string[] {
                            "EconomicShockCode",
                            "Some Text"});
                table809.AddRow(new string[] {
                            "EmployerName",
                            "One Ltd"});
                table809.AddRow(new string[] {
                            "EmployerAddress",
                            "123 Peat Street"});
                table809.AddRow(new string[] {
                            "EmployerPostcode",
                            "P01 9UX"});
                table809.AddRow(new string[] {
                            "EmploymentHours",
                            "1"});
                table809.AddRow(new string[] {
                            "DateOfEmployment",
                            "2019-01-23T00:00:00Z"});
                table809.AddRow(new string[] {
                            "DateOfLastEmployment",
                            "2019-01-23T00:00:00Z"});
                table809.AddRow(new string[] {
                            "LengthOfUnemployment",
                            "1"});
#line 1210
 testRunner.And("the response body should contain:", ((string)(null)), table809, "And ");
#line hidden
#line 1223
 testRunner.And("there should be a record in the dss-employmentprogressions table with EmploymentP" +
                        "rogressionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
