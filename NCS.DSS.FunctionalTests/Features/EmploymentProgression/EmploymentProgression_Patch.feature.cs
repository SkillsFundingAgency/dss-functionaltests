// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.EmploymentProgression
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EmploymentProgression_Patch")]
    [NUnit.Framework.CategoryAttribute("postV3")]
    [NUnit.Framework.CategoryAttribute("patchV3")]
    public partial class EmploymentProgression_PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EmploymentProgression_Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EmploymentProgression_Patch", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV3",
                        "patchV3"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table1.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 7
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table2.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 11
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment Progression with  all values")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchEmploymentProgressionWithAllValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment Progression with  all values", null, new string[] {
                        "LearningProgression",
                        "smoke"});
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table3.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table3.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table3.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table3.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table3.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table3.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table3.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table3.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table3.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table3.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 19
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-21T00:00:00Z"});
            table4.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "1"});
            table4.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table4.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text2"});
            table4.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd2"});
            table4.AddRow(new string[] {
                        "EmployerAddress",
                        "124 Peat Street"});
            table4.AddRow(new string[] {
                        "EmployerPostcode",
                        "DE22 4DE"});
            table4.AddRow(new string[] {
                        "EmploymentHours",
                        "2"});
            table4.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-24T00:00:00Z"});
            table4.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-25T00:00:00Z"});
            table4.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "2"});
#line 32
 testRunner.When("I patch the following:", ((string)(null)), table4, "When ");
#line 45
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-21T00:00:00Z"});
            table5.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "1"});
            table5.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table5.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text2"});
            table5.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd2"});
            table5.AddRow(new string[] {
                        "EmployerAddress",
                        "124 Peat Street"});
            table5.AddRow(new string[] {
                        "EmployerPostcode",
                        "DE22 4DE"});
            table5.AddRow(new string[] {
                        "EmploymentHours",
                        "2"});
            table5.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-24T00:00:00Z"});
            table5.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-25T00:00:00Z"});
            table5.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "2"});
#line 47
 testRunner.And("the response body should contain:", ((string)(null)), table5, "And ");
#line 59
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And("the captured table data should include key \"Longitude\" with value \"-1.50728\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("the captured table data should include key \"Latitude\" with value \"52.92878\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And("the captured table data should include key \"Longitude\" with value \"-1.50728\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("the captured table data should include key \"Latitude\" with value \"52.92878\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for DateProgressionRecorded")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2019-08-20T00:00:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for DateProgressionRecorded", null, exampleTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table6.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table6.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table6.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table6.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table6.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table6.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table6.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table6.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table6.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 73
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table6, "Given ");
#line 85
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table7.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table7.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table7.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table7.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table7.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table7.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table7.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table7.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table7.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 88
 testRunner.And("the response body should contain:", ((string)(null)), table7, "And ");
#line 100
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for DateProgressionRecorded")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "gtfr-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1D", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now +1H", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1Y", "DateProgressionRecorded must be less than or equal to now.", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for DateProgressionRecorded", null, exampleTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table8.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table8.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table8.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table8.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table8.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 113
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table8, "Given ");
#line 122
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for DateProgressionRecorded")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for DateProgressionRecorded", null, exampleTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table9.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table9.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table9.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table9.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 140
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table9, "Given ");
#line 147
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 148
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table10.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table10.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table10.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table10.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 150
 testRunner.And("the response body should contain:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for CurrentEmploymentStatus")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "9", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "10", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "11", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "12", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "13", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "99", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForCurrentEmploymentStatus(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for CurrentEmploymentStatus", null, exampleTags);
#line 166
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table11.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table11.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table11.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table11.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 168
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table11, "Given ");
#line 175
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 176
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 177
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table12.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table12.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table12.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 178
 testRunner.And("the response body should contain:", ((string)(null)), table12, "And ");
#line 184
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for CurrentEmploymentStatus")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "-1", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "0", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "14", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "98", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "100", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForCurrentEmploymentStatus(string field, string value, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for CurrentEmploymentStatus", null, exampleTags);
#line 206
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table13.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table13.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table13.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table13.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 208
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table13, "Given ");
#line 215
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 216
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 217
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for CurrentEmploymentStatus")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForCurrentEmploymentStatus(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for CurrentEmploymentStatus", null, exampleTags);
#line 227
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table14.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table14.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table14.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table14.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 229
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table14, "Given ");
#line 236
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table15.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table15.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table15.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table15.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 239
 testRunner.And("the response body should contain:", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EconomicShockStatus")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "3", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EconomicShockStatus", null, exampleTags);
#line 255
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table16.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table16.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table16.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table16.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table16.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 257
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table16, "Given ");
#line 265
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 266
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 267
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table17.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table17.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 268
 testRunner.And("the response body should contain:", ((string)(null)), table17, "And ");
#line 273
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 276
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EconomicShockStatus")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "0", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "99", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EconomicShockStatus", null, exampleTags);
#line 284
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table18.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table18.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table18.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table18.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table18.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 286
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table18, "Given ");
#line 294
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 295
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 296
 testRunner.And("the error message should be \"EconomicShockStatus must have a valid Economic Shock" +
                    " Status\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 297
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
            "Shock where no value has been set for EconomicShockStatus")]
        public virtual void PatchEmploymentProgressionFieldEconomicShockStatusToValueGovernmentDefinedShockWhereNoValueHasBeenSetForEconomicShockStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
                    "Shock where no value has been set for EconomicShockStatus", null, ((string[])(null)));
#line 307
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table19.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table19.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table19.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table19.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 309
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table19, "Given ");
#line 316
 testRunner.When("I patch the element EconomicShockStatus with 2:", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 317
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 318
 testRunner.And("the response body should include EconomicShockCode must have a value when Governm" +
                    "ent Defined Economic Shock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
            "Shock where a value exists for EconomicShockStatus")]
        public virtual void PatchEmploymentProgressionFieldEconomicShockStatusToValueGovernmentDefinedShockWhereAValueExistsForEconomicShockStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
                    "Shock where a value exists for EconomicShockStatus", null, ((string[])(null)));
#line 320
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table20.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table20.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table20.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table20.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some text"});
            table20.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 322
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table20, "Given ");
#line 330
 testRunner.When("I patch the element EconomicShockStatus with 2:", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 331
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table21.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table21.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table21.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some text"});
            table21.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 333
 testRunner.And("the response body should contain:", ((string)(null)), table21, "And ");
#line 340
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 341
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 342
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 343
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EconomicShockStatus")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EconomicShockStatus", null, exampleTags);
#line 345
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table22.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table22.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table22.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table22.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 347
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table22, "Given ");
#line 354
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 355
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table23.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table23.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table23.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table23.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 357
 testRunner.And("the response body should contain:", ((string)(null)), table23, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EconomicShockCode")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "12345678901234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EconomicShockCode", null, exampleTags);
#line 373
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table24.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table24.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table24.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table24.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 375
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table24, "Given ");
#line 382
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 383
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 384
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table25.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table25.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table25.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table25.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 385
 testRunner.And("the response body should contain:", ((string)(null)), table25, "And ");
#line 392
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 393
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 394
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 395
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EconomicShockCode")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "123456789012345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EconomicShockCode", null, exampleTags);
#line 402
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table26.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table26.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table26.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table26.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table26.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 404
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table26, "Given ");
#line 412
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 413
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 414
 testRunner.And("the error message should be \"The field EconomicShockCode must be a string with a " +
                    "maximum length of 50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 415
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EconomicShockCode")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EconomicShockCode", null, exampleTags);
#line 421
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table27.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table27.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table27.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table27.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table27.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table27.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 423
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table27, "Given ");
#line 431
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 432
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table28.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table28.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table28.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table28.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table28.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 434
 testRunner.And("the response body should contain:", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerName")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerName(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerName", null, exampleTags);
#line 451
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table29.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table29.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table29.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table29.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table29.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 453
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table29, "Given ");
#line 460
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 461
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 462
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table30.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table30.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table30.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table30.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table30.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 463
 testRunner.And("the response body should contain:", ((string)(null)), table30, "And ");
#line 470
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 471
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 472
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 473
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerName")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "2345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerName(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerName", null, exampleTags);
#line 480
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table31.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table31.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table31.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table31.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table31.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 482
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table31, "Given ");
#line 490
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 491
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 492
 testRunner.And("the error message should be \"The field EmployerName must be a string with a maxim" +
                    "um length of 200.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 493
    testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerName")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerName(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerName", null, exampleTags);
#line 499
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table32.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table32.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table32.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table32.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table32.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table32.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table32.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 501
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table32, "Given ");
#line 510
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 511
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table33.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table33.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table33.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table33.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table33.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table33.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table33.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 513
 testRunner.And("the response body should contain:", ((string)(null)), table33, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerAddress")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", @"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerAddress(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerAddress", null, exampleTags);
#line 531
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table34.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table34.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table34.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table34.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table34.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 533
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table34, "Given ");
#line 540
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 541
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 542
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table35.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table35.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table35.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table35.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table35.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 543
 testRunner.And("the response body should contain:", ((string)(null)), table35, "And ");
#line 550
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 551
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 552
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 553
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerAddress")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", @"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901123456789012345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerAddress(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerAddress", null, exampleTags);
#line 561
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table36.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table36.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table36.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table36.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table36.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table36.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 563
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table36, "Given ");
#line 571
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 572
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 573
 testRunner.And("the error message should be \"The field EmployerAddress must be a string with a ma" +
                    "ximum length of 500\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 574
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerAddress")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerAddress(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerAddress", null, exampleTags);
#line 580
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table37.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table37.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table37.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table37.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table37.AddRow(new string[] {
                        "EmployerAddress",
                        "Some more text"});
            table37.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table37.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table37.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 582
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table37, "Given ");
#line 592
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 593
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table38.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table38.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table38.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table38.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table38.AddRow(new string[] {
                        "EmployerAddress",
                        "Some more text"});
            table38.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table38.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table38.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 595
 testRunner.And("the response body should contain:", ((string)(null)), table38, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerPostcode")]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE22 4DE", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE224DE", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerPostcode(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerPostcode", null, exampleTags);
#line 615
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table39.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table39.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table39.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table39.AddRow(new string[] {
                        "EmployerPostcode",
                        "ng1 1gn"});
            table39.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table39.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 617
testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table39, "Given ");
#line 625
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 626
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 627
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table40.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table40.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table40.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table40.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table40.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 628
 testRunner.And("the response body should contain:", ((string)(null)), table40, "And ");
#line 635
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 636
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 637
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 638
 testRunner.And("the captured table data should include key \"Longitude\" with value \"-1.50728\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 639
 testRunner.And("the captured table data should include key \"Latitude\" with value \"52.92878\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 640
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 641
 testRunner.And("the captured table data should include key \"Longitude\" with value \"-1.50728\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 642
 testRunner.And("the captured table data should include key \"Latitude\" with value \"52.92878\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerPostcode")]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE22 4def", "Please enter a valid postcode", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerPostcode(string field, string value, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerPostcode", null, exampleTags);
#line 649
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table41.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table41.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table41.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table41.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table41.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 651
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table41, "Given ");
#line 658
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 659
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 660
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerPostcode")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerPostcode(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerPostcode", null, exampleTags);
#line 667
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table42.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table42.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table42.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table42.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table42.AddRow(new string[] {
                        "EmployerAddress",
                        "Some more text"});
            table42.AddRow(new string[] {
                        "EmployerPostcode",
                        "De22 2ab"});
            table42.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table42.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table42.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 669
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table42, "Given ");
#line 680
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 681
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table43.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table43.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table43.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table43.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table43.AddRow(new string[] {
                        "EmployerAddress",
                        "Some more text"});
            table43.AddRow(new string[] {
                        "EmployerPostcode",
                        "De22 2ab"});
            table43.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table43.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table43.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 683
 testRunner.And("the response body should contain:", ((string)(null)), table43, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch to Employment Progression received from another touchpoint")]
        public virtual void PatchToEmploymentProgressionReceivedFromAnotherTouchpoint()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch to Employment Progression received from another touchpoint", null, ((string[])(null)));
#line 761
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table44.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table44.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table44.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table44.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table44.AddRow(new string[] {
                        "EmployerAddress",
                        "Some more text"});
            table44.AddRow(new string[] {
                        "EmployerPostcode",
                        "De22 2ab"});
            table44.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table44.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table44.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 763
  testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table44, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table45.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "2"});
#line 774
  testRunner.When("I patch the following via a different touchpoint", ((string)(null)), table45, "When ");
#line 777
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 778
  testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 779
  testRunner.And("the response body should have different LastUpdatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table46.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "2"});
#line 780
  testRunner.And("the response body should contain:", ((string)(null)), table46, "And ");
#line 783
  testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 784
  testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment Progression with value for LastModifiedTouchpointID")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedTouchpointID", "99999999", null)]
        public virtual void PatchEmploymentProgressionWithValueForLastModifiedTouchpointID(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment Progression with value for LastModifiedTouchpointID", null, @__tags);
#line 788
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table47.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table47.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table47.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table47.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table47.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table47.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table47.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table47.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table47.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table47.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table47.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 790
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table47, "Given ");
#line 803
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 804
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table48.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table48.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table48.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table48.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table48.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table48.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table48.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table48.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table48.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table48.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table48.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 806
 testRunner.And("the response body should contain:", ((string)(null)), table48, "And ");
#line 819
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 820
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

