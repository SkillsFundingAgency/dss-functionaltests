// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.EmploymentProgression
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EmploymentProgression_Patch")]
    [NUnit.Framework.CategoryAttribute("postV3")]
    [NUnit.Framework.CategoryAttribute("patchV3")]
    public partial class EmploymentProgression_PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EmploymentProgression_Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EmploymentProgression_Patch", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV3",
                        "patchV3"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table1.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 7
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table2.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 11
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment Progression with  all values")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchEmploymentProgressionWithAllValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment Progression with  all values", null, new string[] {
                        "EmploymentProgression",
                        "smoke"});
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table3.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table3.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table3.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table3.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table3.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table3.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table3.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table3.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table3.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table3.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 19
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-21T00:00:00Z"});
            table4.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "1"});
            table4.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table4.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text2"});
            table4.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd2"});
            table4.AddRow(new string[] {
                        "EmployerAddress",
                        "124 Peat Street"});
            table4.AddRow(new string[] {
                        "EmployerPostcode",
                        "DE22 4DE"});
            table4.AddRow(new string[] {
                        "EmploymentHours",
                        "2"});
            table4.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-24T00:00:00Z"});
            table4.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-25T00:00:00Z"});
            table4.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "2"});
#line 32
 testRunner.When("I patch the following:", ((string)(null)), table4, "When ");
#line 45
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-21T00:00:00Z"});
            table5.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "1"});
            table5.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table5.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text2"});
            table5.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd2"});
            table5.AddRow(new string[] {
                        "EmployerAddress",
                        "124 Peat Street"});
            table5.AddRow(new string[] {
                        "EmployerPostcode",
                        "DE22 4DE"});
            table5.AddRow(new string[] {
                        "EmploymentHours",
                        "2"});
            table5.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-24T00:00:00Z"});
            table5.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-25T00:00:00Z"});
            table5.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "2"});
#line 47
 testRunner.And("the response body should contain:", ((string)(null)), table5, "And ");
#line 59
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And("the captured table data should include key \"Longitude\" with value \"-1.50728\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("the captured table data should include key \"Latitude\" with value \"52.92878\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And("the captured table data should include key \"Longitude\" with value \"-1.50728\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("the captured table data should include key \"Latitude\" with value \"52.92878\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2019-08-20T00:00:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for DateProgressionRecorded", null, @__tags);
#line 72
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table6.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table6.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table6.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table6.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table6.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table6.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table6.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table6.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table6.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 73
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table6, "Given ");
#line 85
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table7.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table7.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table7.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table7.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table7.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table7.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table7.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table7.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table7.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 88
 testRunner.And("the response body should contain:", ((string)(null)), table7, "And ");
#line 100
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "gtfr-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1D", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now +1H", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1Y", "DateProgressionRecorded must be less than or equal to now.", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for DateProgressionRecorded", null, @__tags);
#line 112
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table8.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table8.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table8.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table8.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table8.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 114
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table8, "Given ");
#line 123
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 125
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for DateProgressionRecorded", null, @__tags);
#line 139
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table9.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table9.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table9.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table9.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 141
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table9, "Given ");
#line 148
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table10.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table10.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table10.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table10.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 151
 testRunner.And("the response body should contain:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for CurrentEmploymentStatus")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "9", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "10", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "11", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "12", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "13", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "99", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForCurrentEmploymentStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for CurrentEmploymentStatus", null, @__tags);
#line 168
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table11.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table11.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table11.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table11.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 170
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table11, "Given ");
#line 177
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 179
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table12.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table12.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table12.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 180
 testRunner.And("the response body should contain:", ((string)(null)), table12, "And ");
#line 186
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for CurrentEmploymentStatus")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "-1", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "0", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "14", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "98", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "100", "CurrentEmploymentStatus must have a valid Employment Status", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForCurrentEmploymentStatus(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for CurrentEmploymentStatus", null, @__tags);
#line 209
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table13.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table13.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table13.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table13.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 211
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table13, "Given ");
#line 218
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 219
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 220
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for CurrentEmploymentStatus")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForCurrentEmploymentStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for CurrentEmploymentStatus", null, @__tags);
#line 231
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table14.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table14.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table14.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table14.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 233
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table14, "Given ");
#line 240
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 241
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table15.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table15.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table15.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table15.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 243
 testRunner.And("the response body should contain:", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with CurrentEmploymentStatus in 1, 4, 5, 8, 9 where " +
            "no value for EmploymentHours or DateOfEmployment  exists")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "9", null)]
        public virtual void PatchEmploymentProgressionWithCurrentEmploymentStatusIn14589WhereNoValueForEmploymentHoursOrDateOfEmploymentExists(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with CurrentEmploymentStatus in 1, 4, 5, 8, 9 where " +
                    "no value for EmploymentHours or DateOfEmployment  exists", null, @__tags);
#line 256
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table16.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table16.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
            table16.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table16.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
#line 258
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table16, "Given ");
#line 265
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 266
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 267
 testRunner.And("the error message should be \"EmploymentHours must have a value when CurrentEmploy" +
                    "mentStatus is Apprenticeship, Employed, EmployedAndVoluntaryWork, RetiredAndVolu" +
                    "ntaryWork or SelfEmployed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 268
 testRunner.And("the error message should be \"DateOfEmployment must have a value when CurrentEmplo" +
                    "ymentStatus is Apprenticeship, Employed, EmployedAndVoluntaryWork, RetiredAndVol" +
                    "untaryWork or SelfEmployed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 269
 testRunner.And("the number of errors returned should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with CurrentEmploymentStatus not in 1, 4, 5, 8, 9 wh" +
            "ere no value for EmploymentHours or DateOfEmployment exists")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "10", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "11", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "12", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "13", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "99", null)]
        public virtual void PatchEmploymentProgressionWithCurrentEmploymentStatusNotIn14589WhereNoValueForEmploymentHoursOrDateOfEmploymentExists(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with CurrentEmploymentStatus not in 1, 4, 5, 8, 9 wh" +
                    "ere no value for EmploymentHours or DateOfEmployment exists", null, @__tags);
#line 280
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table17.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table17.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
            table17.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table17.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
#line 282
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table17, "Given ");
#line 289
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 290
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 291
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table18.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
            table18.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table18.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
#line 292
 testRunner.And("the response body should contain:", ((string)(null)), table18, "And ");
#line 298
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 299
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 301
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "3", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EconomicShockStatus", null, @__tags);
#line 321
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table19.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table19.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table19.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table19.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table19.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 323
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table19, "Given ");
#line 331
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 332
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 333
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table20.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table20.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 334
 testRunner.And("the response body should contain:", ((string)(null)), table20, "And ");
#line 339
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 340
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 341
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 342
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "0", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "99", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EconomicShockStatus", null, @__tags);
#line 351
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table21.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table21.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table21.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table21.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table21.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 353
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table21, "Given ");
#line 361
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 362
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 363
 testRunner.And("the error message should be \"EconomicShockStatus must have a valid Economic Shock" +
                    " Status\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 364
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
            "Shock where no value has been set for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        public virtual void PatchEmploymentProgressionFieldEconomicShockStatusToValueGovernmentDefinedShockWhereNoValueHasBeenSetForEconomicShockStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
                    "Shock where no value has been set for EconomicShockStatus", null, new string[] {
                        "EmploymentProgression"});
#line 375
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table22.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table22.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table22.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table22.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 377
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table22, "Given ");
#line 384
 testRunner.When("I patch the element EconomicShockStatus with 2:", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 385
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 386
 testRunner.And("the response body should include EconomicShockCode must have a value when Governm" +
                    "ent Defined Economic Shock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
            "Shock where a value exists for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        public virtual void PatchEmploymentProgressionFieldEconomicShockStatusToValueGovernmentDefinedShockWhereAValueExistsForEconomicShockStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression field EconomicShockStatus to value GovernmentDefined" +
                    "Shock where a value exists for EconomicShockStatus", null, new string[] {
                        "EmploymentProgression"});
#line 389
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table23.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table23.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table23.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table23.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some text"});
            table23.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 391
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table23, "Given ");
#line 399
 testRunner.When("I patch the element EconomicShockStatus with 2:", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 400
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table24.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table24.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table24.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some text"});
            table24.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 402
 testRunner.And("the response body should contain:", ((string)(null)), table24, "And ");
#line 409
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 410
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 411
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 412
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EconomicShockStatus")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EconomicShockStatus", null, @__tags);
#line 415
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table25.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table25.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table25.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table25.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 417
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table25, "Given ");
#line 424
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 425
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table26.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table26.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table26.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table26.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 427
 testRunner.And("the response body should contain:", ((string)(null)), table26, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EconomicShockCode")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "12345678901234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EconomicShockCode", null, @__tags);
#line 444
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table27.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table27.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table27.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table27.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table27.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 446
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table27, "Given ");
#line 453
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 454
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 455
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table28.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table28.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table28.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table28.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 456
 testRunner.And("the response body should contain:", ((string)(null)), table28, "And ");
#line 463
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 464
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 465
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 466
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EconomicShockCode")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "123456789012345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EconomicShockCode", null, @__tags);
#line 474
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table29.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table29.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table29.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table29.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table29.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table29.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 476
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table29, "Given ");
#line 484
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 485
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 486
 testRunner.And("the error message should be \"The field EconomicShockCode must be a string with a " +
                    "maximum length of 50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 487
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EconomicShockCode")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EconomicShockCode", null, @__tags);
#line 494
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table30.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table30.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table30.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table30.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table30.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table30.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 496
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table30, "Given ");
#line 504
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 505
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table31.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table31.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table31.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table31.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table31.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 507
 testRunner.And("the response body should contain:", ((string)(null)), table31, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerName")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerName(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerName", null, @__tags);
#line 525
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table32.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table32.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table32.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table32.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table32.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 527
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table32, "Given ");
#line 534
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 535
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 536
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table33.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table33.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table33.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table33.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table33.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 537
 testRunner.And("the response body should contain:", ((string)(null)), table33, "And ");
#line 544
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 545
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 546
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 547
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerName")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "2345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerName(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerName", null, @__tags);
#line 555
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table34.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table34.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table34.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table34.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table34.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table34.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 557
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table34, "Given ");
#line 565
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 566
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 567
 testRunner.And("the error message should be \"The field EmployerName must be a string with a maxim" +
                    "um length of 200.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 568
    testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerName")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerName(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerName", null, @__tags);
#line 575
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table35.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table35.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table35.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table35.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table35.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table35.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table35.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 577
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table35, "Given ");
#line 586
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 587
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table36.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table36.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table36.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table36.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table36.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table36.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table36.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 589
 testRunner.And("the response body should contain:", ((string)(null)), table36, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerAddress")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", @"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerAddress(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerAddress", null, @__tags);
#line 608
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table37.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table37.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table37.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table37.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table37.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 610
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table37, "Given ");
#line 617
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 618
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 619
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table38.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table38.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table38.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table38.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table38.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 620
 testRunner.And("the response body should contain:", ((string)(null)), table38, "And ");
#line 627
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 628
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 629
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 630
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerAddress")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", @"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901123456789012345678901234567890123456789012345678901", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerAddress(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerAddress", null, @__tags);
#line 639
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table39.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table39.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table39.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table39.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table39.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table39.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 641
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table39, "Given ");
#line 649
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 650
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 651
 testRunner.And("the error message should be \"The field EmployerAddress must be a string with a ma" +
                    "ximum length of 500\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 652
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerAddress")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerAddress(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerAddress", null, @__tags);
#line 659
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table40.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table40.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table40.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table40.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table40.AddRow(new string[] {
                        "EmployerAddress",
                        "Some more text"});
            table40.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table40.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table40.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 661
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table40, "Given ");
#line 671
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 672
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table41.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table41.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table41.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table41.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table41.AddRow(new string[] {
                        "EmployerAddress",
                        "Some more text"});
            table41.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table41.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table41.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 674
 testRunner.And("the response body should contain:", ((string)(null)), table41, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmployerPostcode")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE22 4DE", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE224DE", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmployerPostcode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmployerPostcode", null, @__tags);
#line 695
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table42.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table42.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table42.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table42.AddRow(new string[] {
                        "EmployerPostcode",
                        "ng1 1gn"});
            table42.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table42.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 697
testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table42, "Given ");
#line 705
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 706
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 707
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table43.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table43.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table43.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table43.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table43.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 708
 testRunner.And("the response body should contain:", ((string)(null)), table43, "And ");
#line 715
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 716
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 717
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 718
 testRunner.And("the captured table data should include key \"Longitude\" with value \"-1.50728\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 719
 testRunner.And("the captured table data should include key \"Latitude\" with value \"52.92878\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 720
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 721
 testRunner.And("the captured table data should include key \"Longitude\" with value \"-1.50728\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 722
 testRunner.And("the captured table data should include key \"Latitude\" with value \"52.92878\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmployerPostcode")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE22 4def", "Please enter a valid postcode", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmployerPostcode(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmployerPostcode", null, @__tags);
#line 730
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table44.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table44.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table44.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table44.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table44.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 732
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table44, "Given ");
#line 739
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 740
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 741
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for EmployerPostcode")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmployerPostcode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for EmployerPostcode", null, @__tags);
#line 749
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table45.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table45.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table45.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table45.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table45.AddRow(new string[] {
                        "EmployerAddress",
                        "Some more text"});
            table45.AddRow(new string[] {
                        "EmployerPostcode",
                        "De22 2ab"});
            table45.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table45.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table45.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 751
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table45, "Given ");
#line 762
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 763
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table46.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table46.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table46.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table46.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table46.AddRow(new string[] {
                        "EmployerAddress",
                        "Some more text"});
            table46.AddRow(new string[] {
                        "EmployerPostcode",
                        "De22 2ab"});
            table46.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table46.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table46.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 765
 testRunner.And("the response body should contain:", ((string)(null)), table46, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for EmploymentHours")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "1", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "2", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "98", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "99", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForEmploymentHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for EmploymentHours", null, @__tags);
#line 796
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table47.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table47.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table47.AddRow(new string[] {
                        "EmployerPostcode",
                        "ng1 1gn"});
            table47.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table47.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 798
testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table47, "Given ");
#line 805
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 806
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 807
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table48.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table48.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table48.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table48.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 808
 testRunner.And("the response body should contain:", ((string)(null)), table48, "And ");
#line 814
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 815
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 816
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 817
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for EmploymentHours")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "-1", "EmploymentHours must be a valid employment hours", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "0", "EmploymentHours must be a valid employment hours", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "97", "EmploymentHours must be a valid employment hours", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "100", "EmploymentHours must be a valid employment hours", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForEmploymentHours(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for EmploymentHours", null, @__tags);
#line 829
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table49.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table49.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table49.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table49.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 831
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table49, "Given ");
#line 837
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 838
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 839
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(": Patch Employment progression with no value for EmploymentHours")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForEmploymentHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(": Patch Employment progression with no value for EmploymentHours", null, @__tags);
#line 850
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table50.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table50.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table50.AddRow(new string[] {
                        "EmployerPostcode",
                        "ng1 1gn"});
            table50.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table50.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 852
testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table50, "Given ");
#line 859
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 860
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 861
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table51.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table51.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table51.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table51.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table51.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
#line 862
 testRunner.And("the response body should contain:", ((string)(null)), table51, "And ");
#line 869
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 870
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 871
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 872
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for DateOfEmployment")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "2018-06-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Now", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForDateOfEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for DateOfEmployment", null, @__tags);
#line 884
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table52.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table52.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table52.AddRow(new string[] {
                        "EmployerPostcode",
                        "ng1 1gn"});
            table52.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table52.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 886
testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table52, "Given ");
#line 893
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 894
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table53.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table53.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table53.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table53.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
#line 896
 testRunner.And("the response body should contain:", ((string)(null)), table53, "And ");
#line 902
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 903
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 904
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 905
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for DateOfEmployment")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Today +1D", "DateOfEmployment must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Now +1H", "DateOfEmployment must be less than or equal to now", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForDateOfEmployment(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for DateOfEmployment", null, @__tags);
#line 914
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table54.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table54.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table54.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 916
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table54, "Given ");
#line 921
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 922
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 923
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with no value for DateOfEmployment")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForDateOfEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with no value for DateOfEmployment", null, @__tags);
#line 932
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table55.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table55.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table55.AddRow(new string[] {
                        "EmployerPostcode",
                        "ng1 1gn"});
            table55.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 934
testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table55, "Given ");
#line 941
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 942
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 943
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table56.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table56.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table56.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table56.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table56.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
#line 944
 testRunner.And("the response body should contain:", ((string)(null)), table56, "And ");
#line 951
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 952
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 953
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 954
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for DateOfLastEmployment")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "2018-06-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Now", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForDateOfLastEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for DateOfLastEmployment", null, @__tags);
#line 966
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table57.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table57.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table57.AddRow(new string[] {
                        "EmployerPostcode",
                        "ng1 1gn"});
            table57.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table57.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 968
testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table57, "Given ");
#line 975
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 976
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table58.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table58.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table58.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table58.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table58.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
#line 978
 testRunner.And("the response body should contain:", ((string)(null)), table58, "And ");
#line 985
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 986
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 987
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 988
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for DateOfLastEmployment")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Today +1D", "DateOfLastEmployment must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Now +1H", "DateOfLastEmployment must be less than or equal to now", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForDateOfLastEmployment(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for DateOfLastEmployment", null, @__tags);
#line 997
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table59.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table59.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table59.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 999
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table59, "Given ");
#line 1004
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1005
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1006
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for DateOfLastEmployment")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "", null)]
        public virtual void PostEmploymentProgressionWithNoValueForDateOfLastEmployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for DateOfLastEmployment", null, @__tags);
#line 1016
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table60.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table60.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table60.AddRow(new string[] {
                        "EmployerPostcode",
                        "ng1 1gn"});
            table60.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table60.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 1019
testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table60, "Given ");
#line 1026
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1027
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1028
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table61.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table61.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table61.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table61.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table61.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
            table61.AddRow(new string[] {
                        "DateOfLastEmployment",
                        ""});
#line 1029
 testRunner.And("the response body should contain:", ((string)(null)), table61, "And ");
#line 1037
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1038
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1039
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1040
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with valid values for LengthOfUnemployment")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "2", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "3", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "4", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "5", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "6", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "99", null)]
        public virtual void PatchEmploymentProgressionWithValidValuesForLengthOfUnemployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with valid values for LengthOfUnemployment", null, @__tags);
#line 1051
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table62.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table62.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table62.AddRow(new string[] {
                        "EmployerPostcode",
                        "ng1 1gn"});
            table62.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table62.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 1053
   testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table62, "Given ");
#line 1060
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1061
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1062
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table63.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table63.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table63.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table63.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 1063
 testRunner.And("the response body should contain:", ((string)(null)), table63, "And ");
#line 1069
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1070
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1071
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1072
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment progression with invalid values for LengthOfUnemployment")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "-1", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "0", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "7", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "97", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "100", "Please supply a valid value for Length Of Unemployment", null)]
        public virtual void PatchEmploymentProgressionWithInvalidValuesForLengthOfUnemployment(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment progression with invalid values for LengthOfUnemployment", null, @__tags);
#line 1088
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table64.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table64.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table64.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table64.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 1090
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table64, "Given ");
#line 1096
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1097
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1098
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(": Patch Employment progression with no value for LengthOfUnemployment")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "", null)]
        public virtual void PatchEmploymentProgressionWithNoValueForLengthOfUnemployment(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(": Patch Employment progression with no value for LengthOfUnemployment", null, @__tags);
#line 1110
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table65.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table65.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table65.AddRow(new string[] {
                        "EmployerPostcode",
                        "ng1 1gn"});
            table65.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table65.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 1112
testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table65, "Given ");
#line 1119
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1120
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1121
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table66.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table66.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table66.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table66.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table66.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
            table66.AddRow(new string[] {
                        "LengthOfUnemployment",
                        ""});
#line 1122
 testRunner.And("the response body should contain:", ((string)(null)), table66, "And ");
#line 1130
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1131
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1132
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1133
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch to Employment Progression received from another touchpoint")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        public virtual void PatchToEmploymentProgressionReceivedFromAnotherTouchpoint()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch to Employment Progression received from another touchpoint", null, new string[] {
                        "EmploymentProgression"});
#line 1159
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table67.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table67.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table67.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table67.AddRow(new string[] {
                        "EmployerName",
                        "Some text"});
            table67.AddRow(new string[] {
                        "EmployerAddress",
                        "Some more text"});
            table67.AddRow(new string[] {
                        "EmployerPostcode",
                        "De22 2ab"});
            table67.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table67.AddRow(new string[] {
                        "EconomicShockCode",
                        "some text"});
            table67.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 1161
  testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table67, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table68.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "2"});
#line 1172
  testRunner.When("I patch the following via a different touchpoint", ((string)(null)), table68, "When ");
#line 1175
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1176
  testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1177
  testRunner.And("the response body should have different LastUpdatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table69.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "2"});
#line 1178
  testRunner.And("the response body should contain:", ((string)(null)), table69, "And ");
#line 1181
  testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1182
  testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Employment Progression with value for LastModifiedTouchpointID")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedTouchpointID", "99999999", null)]
        public virtual void PatchEmploymentProgressionWithValueForLastModifiedTouchpointID(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EmploymentProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Employment Progression with value for LastModifiedTouchpointID", null, @__tags);
#line 1186
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table70.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table70.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table70.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table70.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table70.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table70.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table70.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table70.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table70.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table70.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table70.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 1188
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table70, "Given ");
#line 1201
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1202
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table71.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table71.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table71.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table71.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table71.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table71.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table71.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table71.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table71.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table71.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table71.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 1204
 testRunner.And("the response body should contain:", ((string)(null)), table71, "And ");
#line 1217
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1218
 testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

