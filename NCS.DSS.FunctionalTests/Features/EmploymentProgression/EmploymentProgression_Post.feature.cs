// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.EmploymentProgression
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EmploymentProgression_Post")]
    [NUnit.Framework.CategoryAttribute("postV3")]
    public partial class EmploymentProgression_PostFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EmploymentProgression_Post.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EmploymentProgression_Post", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV3"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table1.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 5
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table2.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 9
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post employment progression with all values")]
        [NUnit.Framework.CategoryAttribute("EmploymentProgression")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostEmploymentProgressionWithAllValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post employment progression with all values", null, new string[] {
                        "EmploymentProgression",
                        "smoke"});
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table3.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table3.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table3.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table3.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table3.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table3.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table3.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table3.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table3.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table3.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 17
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table3, "Given ");
#line 30
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table4.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "8"});
            table4.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table4.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table4.AddRow(new string[] {
                        "EmployerName",
                        "One Ltd"});
            table4.AddRow(new string[] {
                        "EmployerAddress",
                        "123 Peat Street"});
            table4.AddRow(new string[] {
                        "EmployerPostcode",
                        "P01 9UX"});
            table4.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table4.AddRow(new string[] {
                        "DateOfEmployment",
                        "2019-01-23T00:00:00Z"});
            table4.AddRow(new string[] {
                        "DateOfLastEmployment",
                        "2019-01-23T00:00:00Z"});
            table4.AddRow(new string[] {
                        "LengthOfUnemployment",
                        "1"});
#line 31
 testRunner.And("the response body should contain:", ((string)(null)), table4, "And ");
#line 44
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post employment progression with mandatory values")]
        public virtual void PostEmploymentProgressionWithMandatoryValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post employment progression with mandatory values", null, ((string[])(null)));
#line 49
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table5.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "10"});
            table5.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 51
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table5, "Given ");
#line 56
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table6.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "10"});
            table6.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 57
 testRunner.And("the response body should contain:", ((string)(null)), table6, "And ");
#line 62
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-06-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now -1H", null)]
        public virtual void PostEmploymentProgressionWithValidValuesForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for DateProgressionRecorded", null, @__tags);
#line 71
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 73
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table7.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 74
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table7, "Given ");
#line 78
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 79
 testRunner.And("the response body should contain:", ((string)(null)), table8, "And ");
#line 82
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for DateProgressionRecorded")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PostEmploymentProgressionWithInvalidValuesForDateProgressionRecorded(string field, string date, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for DateProgressionRecorded", null, exampleTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 95
 testRunner.Given(string.Format("I want to send {0} with value <Value> in the following request", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table9.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table9.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 96
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table9, "Given ");
#line 101
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 102
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with future value for DateProgressionRecorded")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1D", "DateProgressionRecorded must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now +1H", "DateProgressionRecorded must be less than or equal to now", null)]
        public virtual void PostEmploymentProgressionWithFutureValueForDateProgressionRecorded(string field, string date, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with future value for DateProgressionRecorded", null, exampleTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 114
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, date), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table10.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 115
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table10, "Given ");
#line 119
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 120
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for DateProgressionRecorded")]
        public virtual void PostEmploymentProgressionWithNoValueForDateProgressionRecorded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for DateProgressionRecorded", null, ((string[])(null)));
#line 127
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "DateProgressionRecorded",
                        ""});
            table11.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table11.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 129
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table11, "Given ");
#line 134
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 135
 testRunner.And("the date field DateProgressionRecorded should hold a recent value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for CurrentEmploymentStatus")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "9", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "10", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "11", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "12", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "13", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "99", null)]
        public virtual void PostEmploymentProgressionWithValidValuesForCurrentEmploymentStatus(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for CurrentEmploymentStatus", null, exampleTags);
#line 139
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 141
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table12.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table12.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table12.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 142
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table12, "Given ");
#line 148
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
#line 149
 testRunner.And("the response body should contain:", ((string)(null)), table13, "And ");
#line 152
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for CurrentEmploymentStatus")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "14", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "100", null)]
        public virtual void PostEmploymentProgressionWithInvalidValuesForCurrentEmploymentStatus(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for CurrentEmploymentStatus", null, exampleTags);
#line 174
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 176
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table14.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table14.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table14.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table14.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 177
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table14, "Given ");
#line 184
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 185
 testRunner.And("the error message should be \"CurrentEmploymentStatus must have a valid Employment" +
                    " Status\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for CurrentEmploymentStatus")]
        public virtual void PostEmploymentProgressionWithNoValueForCurrentEmploymentStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for CurrentEmploymentStatus", null, ((string[])(null)));
#line 195
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table15.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table15.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        ""});
#line 197
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table15, "Given ");
#line 202
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 203
 testRunner.And("the error message should be \"The CurrentEmploymentStatus field is required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for EconomicShockStatus")]
        public virtual void PostEmploymentProgressionWithInvalidValuesForEconomicShockStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for EconomicShockStatus", null, ((string[])(null)));
#line 209
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for EconomicShockStatus")]
        public virtual void PostEmploymentProgressionWithNoValueForEconomicShockStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for EconomicShockStatus", null, ((string[])(null)));
#line 210
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for EconomicShockStatus")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "3", null)]
        public virtual void PostEmploymentProgressionWithValidValuesForEconomicShockStatus(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for EconomicShockStatus", null, exampleTags);
#line 213
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 215
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table16.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table16.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
            table16.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table16.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 216
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table16, "Given ");
#line 223
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table17.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 224
 testRunner.And("the response body should contain:", ((string)(null)), table17, "And ");
#line 228
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for EconomicShockCode")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "Some Text", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "12345678901234567890123456789012345678901234567890", null)]
        public virtual void PostEmploymentProgressionWithValidValuesForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for EconomicShockCode", null, exampleTags);
#line 243
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 245
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table18.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table18.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table18.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table18.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 246
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table18, "Given ");
#line 253
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table19.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 254
 testRunner.And("the response body should contain:", ((string)(null)), table19, "And ");
#line 258
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for EconomicShockCode")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockCode", "123456789012345678901234567890123456789012345678901", null)]
        public virtual void PostEmploymentProgressionWithInvalidValuesForEconomicShockCode(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for EconomicShockCode", null, exampleTags);
#line 268
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 270
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table20.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table20.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "1"});
            table20.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table20.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table20.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 271
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table20, "Given ");
#line 279
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 280
 testRunner.And("the error message should be \"The field EconomicShockCode must be a string with a " +
                    "maximum length of 50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for EconomicShockCode where EconomicSho" +
            "ckStatus is 2 - Government defined economic shock")]
        public virtual void PostEmploymentProgressionWithNoValueForEconomicShockCodeWhereEconomicShockStatusIs2_GovernmentDefinedEconomicShock()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for EconomicShockCode where EconomicSho" +
                    "ckStatus is 2 - Government defined economic shock", null, ((string[])(null)));
#line 287
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table21.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table21.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table21.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table21.AddRow(new string[] {
                        "EconomicShockStatus",
                        "2"});
            table21.AddRow(new string[] {
                        "EconomicShockCode",
                        ""});
#line 289
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table21, "Given ");
#line 297
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 298
 testRunner.And("the error message should be \"EconomicShockCode must have a value when Government " +
                    "Defined Economic Shock.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 299
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for EconomicShockCode where EconomicSho" +
            "ckStatus is not 2 - Government defined economic shock")]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("EconomicShockStatus", "3", null)]
        public virtual void PostEmploymentProgressionWithNoValueForEconomicShockCodeWhereEconomicShockStatusIsNot2_GovernmentDefinedEconomicShock(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for EconomicShockCode where EconomicSho" +
                    "ckStatus is not 2 - Government defined economic shock", null, exampleTags);
#line 301
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 303
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table22.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table22.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table22.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table22.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
#line 304
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table22, "Given ");
#line 311
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table23.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table23.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table23.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table23.AddRow(new string[] {
                        "EconomicShockCode",
                        "Some Text"});
#line 312
 testRunner.And("the response body should contain:", ((string)(null)), table23, "And ");
#line 319
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 320
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 321
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for EmployerName")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "Some Value", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "234567890123456789012345678901234567890", null)]
        public virtual void PostEmploymentProgressionWithValidValuesForEmployerName(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for EmployerName", null, exampleTags);
#line 331
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 333
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table24.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table24.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table24.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table24.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 334
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table24, "Given ");
#line 341
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table25.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 342
 testRunner.And("the response body should contain:", ((string)(null)), table25, "And ");
#line 346
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 347
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 349
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for EmployerName")]
        [NUnit.Framework.TestCaseAttribute("EmployerName", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
            "2345678901234567890123456789012345678901", null)]
        public virtual void PostEmploymentProgressionWithInvalidValuesForEmployerName(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for EmployerName", null, exampleTags);
#line 356
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 358
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table26.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table26.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table26.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table26.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 359
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table26, "Given ");
#line 366
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 367
 testRunner.And("the error message should be \"The field EmployerName must be a string with a maxim" +
                    "um length of 200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 368
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for EmployerName")]
        public virtual void PostEmploymentProgressionWithNoValueForEmployerName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for EmployerName", null, ((string[])(null)));
#line 374
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table27.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table27.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table27.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table27.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table27.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table27.AddRow(new string[] {
                        "EmployerName",
                        ""});
#line 376
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table27, "Given ");
#line 384
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table28.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table28.AddRow(new string[] {
                        "EmployerName",
                        ""});
#line 385
 testRunner.And("the response body should contain:", ((string)(null)), table28, "And ");
#line 390
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 391
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 392
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 393
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for EmployerAddress")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", "Some Value", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", @"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", null)]
        public virtual void PostEmploymentProgressionWithValidValuesForEmployerAddress(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for EmployerAddress", null, exampleTags);
#line 397
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 399
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table29.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table29.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table29.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table29.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table29.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 400
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table29, "Given ");
#line 407
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table30.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table30.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 408
 testRunner.And("the response body should contain:", ((string)(null)), table30, "And ");
#line 412
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 413
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 414
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 415
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for EmployerAddress")]
        [NUnit.Framework.TestCaseAttribute("EmployerAddress", @"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901", null)]
        public virtual void PostEmploymentProgressionWithInvalidValuesForEmployerAddress(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for EmployerAddress", null, exampleTags);
#line 422
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 424
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table31.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table31.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table31.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table31.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 425
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table31, "Given ");
#line 432
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 433
 testRunner.And("the error message should be \"The field EmployerAddress must be a string with a ma" +
                    "ximum length of 500\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 434
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for EmployerAddress")]
        public virtual void PostEmploymentProgressionWithNoValueForEmployerAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for EmployerAddress", null, ((string[])(null)));
#line 440
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table32.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table32.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table32.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table32.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table32.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table32.AddRow(new string[] {
                        "EmployerAddress",
                        ""});
#line 442
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table32, "Given ");
#line 450
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table33.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table33.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table33.AddRow(new string[] {
                        "EmployerAddress",
                        ""});
#line 451
 testRunner.And("the response body should contain:", ((string)(null)), table33, "And ");
#line 456
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 457
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 458
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 459
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for EmployerPostcode")]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE22 4DE", null)]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE224DE", null)]
        public virtual void PostEmploymentProgressionWithValidValuesForEmployerPostcode(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for EmployerPostcode", null, exampleTags);
#line 464
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 466
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table34.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table34.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table34.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table34.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table34.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 467
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table34, "Given ");
#line 474
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table35.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table35.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 475
 testRunner.And("the response body should contain:", ((string)(null)), table35, "And ");
#line 479
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 480
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 481
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 482
 testRunner.And("the captured table data should include key \"Longitude\" with value \"-1.50728\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 483
 testRunner.And("the captured table data should include key \"Latitude\" with value \"52.92878\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 484
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 485
 testRunner.And("the captured table data should include key \"Longitude\" with value \"-1.50728\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 486
 testRunner.And("the captured table data should include key \"Latitude\" with value \"52.92878\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for EmployerPostcode")]
        [NUnit.Framework.TestCaseAttribute("EmployerPostcode", "DE22 4def", null)]
        public virtual void PostEmploymentProgressionWithInvalidValuesForEmployerPostcode(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for EmployerPostcode", null, exampleTags);
#line 493
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 495
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table36.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table36.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table36.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table36.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table36.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 496
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table36, "Given ");
#line 503
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 504
 testRunner.And("the error message should be \"Please enter a valid postcode\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 505
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for EmployerPostcode")]
        public virtual void PostEmploymentProgressionWithNoValueForEmployerPostcode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for EmployerPostcode", null, ((string[])(null)));
#line 511
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table37.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table37.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table37.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table37.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
            table37.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table37.AddRow(new string[] {
                        "EmployerPostcode",
                        ""});
#line 513
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table37, "Given ");
#line 521
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table38.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table38.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table38.AddRow(new string[] {
                        "EmployerPostcode",
                        ""});
#line 522
 testRunner.And("the response body should contain:", ((string)(null)), table38, "And ");
#line 527
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 528
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 529
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 530
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for Longitude and Latitude")]
        public virtual void PostEmploymentProgressionWithValidValuesForLongitudeAndLatitude()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for Longitude and Latitude", null, ((string[])(null)));
#line 535
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for Longitude and Latitude")]
        public virtual void PostEmploymentProgressionWithInvalidValuesForLongitudeAndLatitude()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for Longitude and Latitude", null, ((string[])(null)));
#line 536
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for Longitude and Latitude")]
        public virtual void PostEmploymentProgressionWithNoValueForLongitudeAndLatitude()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for Longitude and Latitude", null, ((string[])(null)));
#line 537
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid employer postcode supplied")]
        public virtual void PostEmploymentProgressionWithValidEmployerPostcodeSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid employer postcode supplied", null, ((string[])(null)));
#line 538
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for EmploymentHours")]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "1", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "2", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "98", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "99", null)]
        public virtual void PostEmploymentProgressionWithValidValuesForEmploymentHours(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for EmploymentHours", null, exampleTags);
#line 542
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 544
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table39.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table39.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table39.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 545
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table39, "Given ");
#line 550
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table40.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table40.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 551
 testRunner.And("the response body should contain:", ((string)(null)), table40, "And ");
#line 555
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 556
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 557
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 558
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for EmploymentHours")]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "0", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "3", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "97", null)]
        [NUnit.Framework.TestCaseAttribute("EmploymentHours", "100", null)]
        public virtual void PostEmploymentProgressionWithInvalidValuesForEmploymentHours(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for EmploymentHours", null, exampleTags);
#line 567
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 569
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table41.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table41.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table41.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 570
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table41, "Given ");
#line 575
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 576
 testRunner.And("the error message should be \"EmploymentHours must be a valid employment hours\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 577
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for EmploymentHours and CurrentEmployme" +
            "ntStatus in 1, 4, 5, 8, 9")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "9", null)]
        public virtual void PostEmploymentProgressionWithNoValueForEmploymentHoursAndCurrentEmploymentStatusIn14589(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for EmploymentHours and CurrentEmployme" +
                    "ntStatus in 1, 4, 5, 8, 9", null, exampleTags);
#line 587
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 589
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table42.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table42.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table42.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
            table42.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table42.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 590
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table42, "Given ");
#line 597
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 598
 testRunner.And("the error message should be \"EmploymentHours must have a value when CurrentEmploy" +
                    "mentStatus is Apprenticeship, Employed, EmployedAndVoluntaryWork, RetiredAndVolu" +
                    "ntaryWork or SelfEmployed.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 599
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for EmploymentHours and CurrentEmployme" +
            "ntStatus not in 1, 4, 5, 8, 9")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "10", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "11", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "12", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "13", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "99", null)]
        public virtual void PostEmploymentProgressionWithNoValueForEmploymentHoursAndCurrentEmploymentStatusNotIn14589(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for EmploymentHours and CurrentEmployme" +
                    "ntStatus not in 1, 4, 5, 8, 9", null, exampleTags);
#line 609
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 611
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table43.AddRow(new string[] {
                        "Field",
                        "Value"});
            table43.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table43.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
            table43.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 612
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table43, "Given ");
#line 618
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table44.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table44.AddRow(new string[] {
                        "EmploymentHours",
                        ""});
            table44.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 619
 testRunner.And("the response body should contain:", ((string)(null)), table44, "And ");
#line 624
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 625
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 626
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 627
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for DateOfEmployment")]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "2019-08-20T00:00:00Z", null)]
        public virtual void PostEmploymentProgressionWithValidValuesForDateOfEmployment(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for DateOfEmployment", null, exampleTags);
#line 644
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 646
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table45.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table45.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table45.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 647
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table45, "Given ");
#line 652
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table46.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table46.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 653
 testRunner.And("the response body should contain:", ((string)(null)), table46, "And ");
#line 657
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 658
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 659
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 660
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for DateOfEmployment")]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Today +1D", "DateOfEmployment must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "Now +1H", "DateOfEmployment must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfEmployment", "2019-13-01", "Could not convert string to DateTime", null)]
        public virtual void PostEmploymentProgressionWithInvalidValuesForDateOfEmployment(string field, string value, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for DateOfEmployment", null, exampleTags);
#line 668
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 670
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table47.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table47.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table47.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 671
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table47, "Given ");
#line 676
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 677
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 678
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for DateOfEmployment and CurrentEmploym" +
            "entStatus not in 1, 4, 5, 8, 9")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "10", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "11", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "12", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "13", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "99", null)]
        public virtual void PostEmploymentProgressionWithNoValueForDateOfEmploymentAndCurrentEmploymentStatusNotIn14589(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for DateOfEmployment and CurrentEmploym" +
                    "entStatus not in 1, 4, 5, 8, 9", null, exampleTags);
#line 687
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 689
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table48.AddRow(new string[] {
                        "Field",
                        "Value"});
            table48.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table48.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table48.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 690
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table48, "Given ");
#line 696
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table49.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table49.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table49.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 697
 testRunner.And("the response body should contain:", ((string)(null)), table49, "And ");
#line 702
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 703
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 704
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 705
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with no value for DateOfEmployment and CurrentEmploym" +
            "entStatus in 1, 4, 5, 8, 9")]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentEmploymentStatus", "9", null)]
        public virtual void PostEmploymentProgressionWithNoValueForDateOfEmploymentAndCurrentEmploymentStatusIn14589(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with no value for DateOfEmployment and CurrentEmploym" +
                    "entStatus in 1, 4, 5, 8, 9", null, exampleTags);
#line 719
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 721
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table50.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table50.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table50.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table50.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 722
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table50, "Given ");
#line 728
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 729
 testRunner.And("the error message should be \"DateOfEmployment must have a value when CurrentEmplo" +
                    "ymentStatus is Apprenticeship, Employed, EmployedAndVoluntaryWork, RetiredAndVol" +
                    "untaryWork or SelfEmployed.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 730
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for DateOfLastEmployment")]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "2019-08-20T00:00:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "", null)]
        public virtual void PostEmploymentProgressionWithValidValuesForDateOfLastEmployment(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for DateOfLastEmployment", null, exampleTags);
#line 742
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 744
testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table51.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table51.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table51.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 745
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table51, "Given ");
#line 750
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table52.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table52.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 751
 testRunner.And("the response body should contain:", ((string)(null)), table52, "And ");
#line 755
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 756
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 757
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 758
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for DateOfLastEmployment")]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Today +1D", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateOfLastEmployment", "Now +1H", "Could not convert string to DateTime", null)]
        public virtual void PostEmploymentProgressionWithInvalidValuesForDateOfLastEmployment(string field, string date, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for DateOfLastEmployment", null, exampleTags);
#line 767
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 769
 testRunner.Given(string.Format("I want to send {0} with value <Value> in the following request", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table53.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table53.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table53.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 770
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table53, "Given ");
#line 775
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 776
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with valid values for LengthOfUnemployment")]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "2", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "3", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "4", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "5", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "6", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "99", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "", null)]
        public virtual void PostEmploymentProgressionWithValidValuesForLengthOfUnemployment(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with valid values for LengthOfUnemployment", null, exampleTags);
#line 793
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 795
testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table54.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table54.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table54.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
#line 796
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table54, "Given ");
#line 801
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table55.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-08-20T00:00:00Z"});
            table55.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
#line 802
 testRunner.And("the response body should contain:", ((string)(null)), table55, "And ");
#line 806
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 807
 testRunner.And("the \"employmentprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 808
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 809
 testRunner.And("there should be a record in the employmentprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 810
    testRunner.And("there should be a record in the employmentprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Employment progression with invalid values for LengthOfUnemployment")]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "-1", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "0", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "97", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "100", "Please supply a valid value for Length Of Unemployment", null)]
        [NUnit.Framework.TestCaseAttribute("LengthOfUnemployment", "thing", "Error converting value", null)]
        public virtual void PostEmploymentProgressionWithInvalidValuesForLengthOfUnemployment(string field, string value, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Employment progression with invalid values for LengthOfUnemployment", null, exampleTags);
#line 824
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 826
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table56.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table56.AddRow(new string[] {
                        "CurrentEmploymentStatus",
                        "99"});
            table56.AddRow(new string[] {
                        "EmploymentHours",
                        "1"});
            table56.AddRow(new string[] {
                        "DateOfEmployment",
                        ""});
            table56.AddRow(new string[] {
                        "EconomicShockStatus",
                        "1"});
            table56.AddRow(new string[] {
                        "DateOfEmployment",
                        "2018-06-19T09:01:00Z"});
#line 827
 testRunner.Given("I post a Employment Progression record with the following details:", ((string)(null)), table56, "Given ");
#line 835
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 836
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 837
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

