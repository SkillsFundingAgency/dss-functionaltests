// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Diversity
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DiversityV2_Patch")]
    public partial class DiversityV2_PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Diversity", "DiversityV2_Patch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table372 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table372.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table372.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details V2:", ((string)(null)), table372, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table373 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table373.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table373.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
            table373.AddRow(new string[] {
                        "PriorityGroups",
                        "1,3"});
#line 8
 testRunner.And("I post a Customer with the following details V3:", ((string)(null)), table373, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with all values")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDiversityWithAllValues()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with all values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table374 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table374.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table374.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table374.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table374.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table374.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table374.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table374.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table374.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 16
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table374, "When ");
#line hidden
#line 26
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table375 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table375.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table375.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table375.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table375.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table375.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table375.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table375.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table375.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table375.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 27
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table375, "Given ");
#line hidden
#line 38
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table376 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table376.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table376.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table376.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table376.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table376.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table376.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table376.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table376.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table376.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 39
 testRunner.And("the response body should contain:", ((string)(null)), table376, "And ");
#line hidden
#line 51
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.Given("I wait for 10 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
 testRunner.Then("there should be a record in the dss-diversitydetails table with DiversityId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "car", null)]
        public virtual void PatchDiversityWithInvalidValuesForConsentToCollectLLDDHealth(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for ConsentToCollectLLDDHealth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table377 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table377.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table377.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table377.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table377.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table377.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table377.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table377.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table377.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 63
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table377, "When ");
#line hidden
#line 73
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table378 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 74
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table378, "Given ");
#line hidden
#line 76
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration" +
            "")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "3", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "8", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "10", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "99", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table379 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table379.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table379.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table379.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table379.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table379.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table379.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table379.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table379.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 91
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table379, "When ");
#line hidden
#line 101
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table380 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 102
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table380, "Given ");
#line hidden
#line 104
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
 testRunner.And("the error message should be \"Please supply a valid Learning Difficulty Or Disabil" +
                        "ity Declaration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for PrimaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table381 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table381.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table381.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table381.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table381.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table381.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table381.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table381.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table381.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 124
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table381, "When ");
#line hidden
#line 134
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table382 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 135
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table382, "Given ");
#line hidden
#line 137
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
 testRunner.And("the error message should be \"Please supply a valid Primary Learning Difficulty Or" +
                        " Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for SecondaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for SecondaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 158
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table383 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table383.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table383.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table383.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table383.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table383.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table383.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table383.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table383.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 159
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table383, "When ");
#line hidden
#line 169
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table384 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 170
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table384, "Given ");
#line hidden
#line 172
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 173
 testRunner.And("the error message should be \"Please supply a valid Secondary Learning Difficulty " +
                        "Or Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for DateAndTimeLDDHealthConsentCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "today +1Day", null)]
        public virtual void PatchDiversityWithInvalidValuesForDateAndTimeLDDHealthConsentCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for DateAndTimeLDDHealthConsentCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 193
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table385 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table385.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table385.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table385.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table385.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table385.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table385.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table385.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table385.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 194
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table385, "When ");
#line hidden
#line 204
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table386 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 205
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table386, "Given ");
#line hidden
#line 207
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
 testRunner.And("the error message should be \"Date And Time LLDD Health Consent Collected must be " +
                        "less the current date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "30", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "48", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "50", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "90", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "97", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for Ethnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 222
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table387 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table387.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table387.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table387.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table387.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table387.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table387.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table387.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table387.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 223
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table387, "When ");
#line hidden
#line 233
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table388 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 234
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table388, "Given ");
#line hidden
#line 236
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 237
 testRunner.And("the error message should be \"Please supply a valid Ethnicity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "today +1Day", null)]
        public virtual void PatchDiversityWithInvalidValuesForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for DateAndTimeEthnicityCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 255
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table389 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table389.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table389.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table389.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table389.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table389.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table389.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table389.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table389.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 256
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table389, "When ");
#line hidden
#line 266
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table390 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 267
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table390, "Given ");
#line hidden
#line 269
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 270
 testRunner.And("the error message should be \"Date And Time Ethnicity Collected must be less the c" +
                        "urrent date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
