// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Diversity
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DiversityV2_Patch")]
    public partial class DiversityV2_PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Diversity", "DiversityV2_Patch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table667 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table667.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table667.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table667, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table668 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table668.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table668.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 8
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table668, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with all values")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDiversityWithAllValues()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with all values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table669 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table669.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table669.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table669.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table669.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table669.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table669.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table669.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table669.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 15
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table669, "When ");
#line hidden
#line 25
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table670 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table670.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table670.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table670.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table670.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table670.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table670.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table670.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table670.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table670.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 26
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table670, "Given ");
#line hidden
#line 37
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table671 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table671.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table671.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table671.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table671.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table671.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table671.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table671.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table671.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table671.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 38
 testRunner.And("the response body should contain:", ((string)(null)), table671, "And ");
#line hidden
#line 50
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.Given("I wait for 10 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
 testRunner.Then("there should be a record in the dss-diversitydetails table with DiversityId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "True", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "False", null)]
        public virtual void PatchDiversityWithValidValuesForConsentToCollectLLDDHealth(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for ConsentToCollectLLDDHealth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table672 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table672.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table672.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table672.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table672.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table672.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table672.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table672.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table672.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 60
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table672, "When ");
#line hidden
#line 70
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table673 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 71
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table673, "Given ");
#line hidden
#line 73
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "car", null)]
        public virtual void PatchDiversityWithInvalidValuesForConsentToCollectLLDDHealth(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for ConsentToCollectLLDDHealth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table674 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table674.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table674.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table674.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table674.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table674.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table674.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table674.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table674.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 83
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table674, "When ");
#line hidden
#line 93
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table675 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 94
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table675, "Given ");
#line hidden
#line 96
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for LearningDifficultyOrDisabilityDeclaration")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "2", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "9", null)]
        public virtual void PatchDiversityWithValidValuesForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for LearningDifficultyOrDisabilityDeclaration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table676 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table676.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table676.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table676.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table676.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table676.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table676.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table676.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table676.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 127
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table676, "When ");
#line hidden
#line 137
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table677 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 138
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table677, "Given ");
#line hidden
#line 140
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table678 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table678.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table678.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table678.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
#line 141
 testRunner.And("the response body should contain:", ((string)(null)), table678, "And ");
#line hidden
#line 146
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration" +
            "")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "3", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "8", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "10", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "99", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 155
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table679 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table679.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table679.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table679.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table679.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table679.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table679.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table679.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table679.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 156
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table679, "When ");
#line hidden
#line 166
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table680 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 167
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table680, "Given ");
#line hidden
#line 169
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
 testRunner.And("the error message should be \"Please supply a valid Learning Difficulty Or Disabil" +
                        "ity Declaration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for LearningDifficultyOrDisabilityDeclarat" +
            "ion")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for LearningDifficultyOrDisabilityDeclarat" +
                    "ion", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 184
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table681 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table681.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table681.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table681.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table681.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table681.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table681.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table681.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table681.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 185
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table681, "When ");
#line hidden
#line 195
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table682 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 196
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table682, "Given ");
#line hidden
#line 198
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table683 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table683.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table683.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table683.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table683.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table683.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table683.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table683.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table683.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 199
 testRunner.And("the response body should contain:", ((string)(null)), table683, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "4", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "5", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "6", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "7", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "8", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "9", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "10", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "11", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "12", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "13", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "14", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "15", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "16", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "17", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "93", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "94", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "95", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "96", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "97", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "98", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "99", null)]
        public virtual void PatchDiversityWithValidValuesForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for PrimaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 218
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table684 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table684.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table684.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table684.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table684.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table684.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table684.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table684.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table684.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 219
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table684, "When ");
#line hidden
#line 229
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table685 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 230
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table685, "Given ");
#line hidden
#line 232
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table686 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table686.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table686.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table686.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
#line 233
 testRunner.And("the response body should contain:", ((string)(null)), table686, "And ");
#line hidden
#line 238
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for PrimaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 265
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table687 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table687.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table687.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table687.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table687.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table687.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table687.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table687.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table687.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 266
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table687, "When ");
#line hidden
#line 276
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table688 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 277
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table688, "Given ");
#line hidden
#line 279
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 280
 testRunner.And("the error message should be \"Please supply a valid Primary Learning Difficulty Or" +
                        " Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for PrimaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 297
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table689 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table689.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table689.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table689.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table689.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table689.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table689.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table689.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table689.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 298
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table689, "When ");
#line hidden
#line 308
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table690 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 309
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table690, "Given ");
#line hidden
#line 311
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table691 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table691.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table691.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table691.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table691.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table691.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table691.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table691.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table691.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 312
 testRunner.And("the response body should contain:", ((string)(null)), table691, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for SecondaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "4", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "5", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "6", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "7", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "8", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "9", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "10", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "11", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "12", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "13", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "14", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "15", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "16", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "17", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "93", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "94", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "95", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "96", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "97", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "98", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "99", null)]
        public virtual void PatchDiversityWithValidValuesForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for SecondaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 331
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table692 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table692.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table692.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table692.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table692.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table692.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table692.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table692.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table692.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 332
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table692, "When ");
#line hidden
#line 342
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table693 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 343
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table693, "Given ");
#line hidden
#line 345
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 346
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for SecondaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for SecondaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 373
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table694 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table694.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table694.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table694.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table694.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table694.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table694.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table694.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table694.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 374
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table694, "When ");
#line hidden
#line 384
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table695 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 385
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table695, "Given ");
#line hidden
#line 387
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 388
 testRunner.And("the error message should be \"Please supply a valid Secondary Learning Difficulty " +
                        "Or Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for SecondaryLearningDifficultyOrDisabilit" +
            "y")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for SecondaryLearningDifficultyOrDisabilit" +
                    "y", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 405
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table696 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table696.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table696.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table696.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table696.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table696.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table696.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table696.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table696.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 406
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table696, "When ");
#line hidden
#line 416
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table697 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 417
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table697, "Given ");
#line hidden
#line 419
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table698 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table698.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table698.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table698.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table698.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table698.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table698.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table698.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table698.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 420
 testRunner.And("the response body should contain:", ((string)(null)), table698, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for DateAndTimeLLDDHealthConsentCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "now", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "today", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "2018-08-25T11:21:00Z", null)]
        public virtual void PatchDiversityWithValidValuesForDateAndTimeLLDDHealthConsentCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for DateAndTimeLLDDHealthConsentCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 439
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table699 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table699.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table699.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table699.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table699.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table699.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table699.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table699.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table699.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 440
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table699, "When ");
#line hidden
#line 450
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table700 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 451
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table700, "Given ");
#line hidden
#line 453
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for DateAndTimeLDDHealthConsentCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "today +1Day", null)]
        public virtual void PatchDiversityWithInvalidValuesForDateAndTimeLDDHealthConsentCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for DateAndTimeLDDHealthConsentCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 463
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table701 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table701.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table701.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table701.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table701.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table701.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table701.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table701.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table701.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 464
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table701, "When ");
#line hidden
#line 474
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table702 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 475
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table702, "Given ");
#line hidden
#line 477
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 478
 testRunner.And("the error message should be \"Date And Time LLDD Health Consent Collected must be " +
                        "less the current date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "True", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "False", null)]
        public virtual void PatchDiversityWithValidValuesForConsentToCollectEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for ConsentToCollectEthnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 489
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table703 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table703.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table703.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table703.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table703.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table703.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table703.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table703.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table703.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 490
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table703, "When ");
#line hidden
#line 500
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table704 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 501
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table704, "Given ");
#line hidden
#line 503
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 504
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "abc", null)]
        public virtual void PatchDiversityWithInvalidValuesForConsentToCollectEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for ConsentToCollectEthnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 512
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table705 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table705.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table705.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table705.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table705.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table705.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table705.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table705.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table705.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 513
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table705, "When ");
#line hidden
#line 523
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table706 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 524
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table706, "Given ");
#line hidden
#line 526
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForConsentToCollectEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for ConsentToCollectEthnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 534
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table707 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table707.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table707.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table707.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table707.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table707.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table707.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table707.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table707.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 535
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table707, "When ");
#line hidden
#line 545
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table708 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 546
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table708, "Given ");
#line hidden
#line 548
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table709 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table709.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table709.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table709.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table709.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table709.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table709.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table709.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table709.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 549
 testRunner.And("the response body should contain:", ((string)(null)), table709, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with ConsentToCollectEthnicity where no value exists for DateAndT" +
            "imeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PatchDiversityWithConsentToCollectEthnicityWhereNoValueExistsForDateAndTimeEthnicityCollected()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with ConsentToCollectEthnicity where no value exists for DateAndT" +
                    "imeEthnicityCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 565
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table710 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table710.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table710.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table710.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table710.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table710.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table710.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table710.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table710.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            ""});
#line 566
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table710, "When ");
#line hidden
                TechTalk.SpecFlow.Table table711 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table711.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
#line 576
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table711, "Given ");
#line hidden
#line 579
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table712 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table712.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table712.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table712.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table712.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table712.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table712.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table712.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
#line 580
 testRunner.And("the response body should contain:", ((string)(null)), table712, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "31", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "32", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "33", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "34", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "35", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "36", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "37", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "38", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "39", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "40", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "41", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "42", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "43", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "44", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "45", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "46", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "47", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "98", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "99", null)]
        public virtual void PatchDiversityWithValidValuesForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for Ethnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 596
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table713 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table713.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table713.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table713.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table713.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table713.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table713.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table713.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table713.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 597
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table713, "When ");
#line hidden
#line 607
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table714 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 608
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table714, "Given ");
#line hidden
#line 610
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 611
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "30", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "48", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "50", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "90", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "97", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for Ethnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 636
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table715 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table715.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table715.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table715.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table715.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table715.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table715.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table715.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table715.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 637
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table715, "When ");
#line hidden
#line 647
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table716 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 648
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table716, "Given ");
#line hidden
#line 650
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 651
 testRunner.And("the error message should be \"Please supply a valid Ethnicity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for Ethnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 664
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table717 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table717.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table717.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table717.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table717.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table717.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table717.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table717.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table717.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 665
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table717, "When ");
#line hidden
#line 675
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table718 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 676
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table718, "Given ");
#line hidden
#line 678
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table719 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table719.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table719.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table719.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table719.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table719.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table719.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table719.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table719.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 679
 testRunner.And("the response body should contain:", ((string)(null)), table719, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "now", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "today", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "2018-08-25T11:21:00Z", null)]
        public virtual void PatchDiversityWithValidValuesForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for DateAndTimeEthnicityCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 698
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table720 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table720.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table720.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table720.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table720.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table720.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table720.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table720.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table720.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 699
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table720, "When ");
#line hidden
#line 709
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table721 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 710
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table721, "Given ");
#line hidden
#line 712
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "today +1Day", null)]
        public virtual void PatchDiversityWithInvalidValuesForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for DateAndTimeEthnicityCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 722
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table722 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table722.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table722.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table722.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table722.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table722.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table722.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table722.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table722.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 723
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table722, "When ");
#line hidden
#line 733
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table723 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 734
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table723, "Given ");
#line hidden
#line 736
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 737
 testRunner.And("the error message should be \"Date And Time Ethnicity Collected must be less the c" +
                        "urrent date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for DateAndTimeEthnicityCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 745
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table724 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table724.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table724.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table724.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table724.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table724.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table724.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table724.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table724.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 746
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table724, "When ");
#line hidden
#line 756
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table725 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 757
 testRunner.Given("I patch the following DiversityDetail V2:", ((string)(null)), table725, "Given ");
#line hidden
#line 759
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table726 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table726.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table726.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table726.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table726.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table726.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table726.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table726.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table726.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 760
 testRunner.And("the response body should contain:", ((string)(null)), table726, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
