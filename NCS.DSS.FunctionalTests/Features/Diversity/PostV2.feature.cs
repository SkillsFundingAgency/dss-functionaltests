// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Diversity
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DiversityV2_Post")]
    public partial class DiversityV2_PostFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Diversity", "DiversityV2_Post", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table391 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table391.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table391.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details V2:", ((string)(null)), table391, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table392 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table392.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table392.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
            table392.AddRow(new string[] {
                        "PriorityGroups",
                        "1,3"});
#line 8
 testRunner.And("I post a Customer with the following details V3:", ((string)(null)), table392, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with all values")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostDiversityWithAllValues()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with all values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table393 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table393.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table393.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table393.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table393.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table393.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table393.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table393.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table393.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table393.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 16
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table393, "When ");
#line hidden
#line 27
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table394.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table394.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table394.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table394.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table394.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table394.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table394.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table394.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table394.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 28
 testRunner.And("the response body should contain:", ((string)(null)), table394, "And ");
#line hidden
#line 40
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
 testRunner.Then("there should be a record in the dss-diversitydetails table with DiversityId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "car", null)]
        public virtual void PostDiversityWithInvalidValuesForConsentToCollectLLDDHealth(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for ConsentToCollectLLDDHealth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 49
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table395.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table395.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table395.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 50
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table395, "When ");
#line hidden
#line 55
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForConsentToCollectLLDDHealth()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for ConsentToCollectLLDDHealth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table396.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table396.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table396.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
                table396.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            ""});
#line 64
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table396, "When ");
#line hidden
#line 70
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
 testRunner.And("the error message should be \"The ConsentToCollectLLDDHealth field is required.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "3", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "8", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "10", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "99", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 78
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table397.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table397.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table397.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 79
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table397, "When ");
#line hidden
#line 84
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
 testRunner.And("the error message should be \"Please supply a valid Learning Difficulty Or Disabil" +
                        "ity Declaration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for PrimaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 104
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table398.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table398.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table398.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 105
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table398, "When ");
#line hidden
#line 110
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
 testRunner.And("the error message should be \"Please supply a valid Primary Learning Difficulty Or" +
                        " Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for SecondaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for SecondaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 131
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table399.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table399.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table399.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 132
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table399, "When ");
#line hidden
#line 137
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
 testRunner.And("the error message should be \"Please supply a valid Secondary Learning Difficulty " +
                        "Or Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for SecondaryLearningDifficultyOrDisability" +
            "")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForSecondaryLearningDifficultyOrDisability()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for SecondaryLearningDifficultyOrDisability" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table400.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table400.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table400.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table400.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table400.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table400.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table400.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table400.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table400.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 155
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table400, "When ");
#line hidden
#line 166
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table401.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table401.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table401.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "99"});
                table401.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table401.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table401.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table401.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table401.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 167
 testRunner.And("the response body should contain:", ((string)(null)), table401, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for DateAndTimeLLDDHealthConsentCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "today +1Day", null)]
        public virtual void PostDiversityWithInvalidValuesForDateAndTimeLLDDHealthConsentCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for DateAndTimeLLDDHealthConsentCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 182
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 183
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table402.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table402.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table402.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 184
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table402, "When ");
#line hidden
#line 189
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 190
 testRunner.And("the error message should be \"Date And Time LLDD Health Consent Collected must be " +
                        "less the current date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "abc", null)]
        public virtual void PostDiversityWithInvalidValuesForConsentToCollectEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for ConsentToCollectEthnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 204
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 205
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table403.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table403.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table403.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 206
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table403, "When ");
#line hidden
#line 211
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForConsentToCollectEthnicity()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for ConsentToCollectEthnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 220
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table404.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table404.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table404.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table404.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table404.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table404.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            ""});
                table404.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table404.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 221
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table404, "When ");
#line hidden
#line 231
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 232
 testRunner.And("the error message should be \"The ConsentToCollectEthnicity field is required.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "30", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "48", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "50", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "90", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "97", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for Ethnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 238
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 239
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table405.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table405.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
#line 240
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table405, "When ");
#line hidden
#line 244
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 245
 testRunner.And("the error message should be \"Please supply a valid Ethnicity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "today +1Day", null)]
        public virtual void PostDiversityWithInvalidValuesForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for DateAndTimeEthnicityCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 262
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 263
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table406.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table406.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table406.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table406.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 264
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table406, "When ");
#line hidden
#line 270
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 271
 testRunner.And("the error message should be \"Date And Time Ethnicity Collected must be less the c" +
                        "urrent date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post a second Diversity record")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostASecondDiversityRecord()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a second Diversity record", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 290
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table407.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table407.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table407.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table407.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table407.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table407.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table407.AddRow(new string[] {
                            "EthnicityID",
                            "32"});
                table407.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 291
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table407, "When ");
#line hidden
                TechTalk.SpecFlow.Table table408 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table408.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table408.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table408.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table408.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table408.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table408.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table408.AddRow(new string[] {
                            "EthnicityID",
                            "32"});
                table408.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 301
 testRunner.And("I post a DiversityDetail with the following details V2:", ((string)(null)), table408, "And ");
#line hidden
#line 311
 testRunner.Then("there should be a 409 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post diversity for a terminated customer")]
        public virtual void PostDiversityForATerminatedCustomer()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post diversity for a terminated customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 314
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table409 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table409.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-20T21:45:00Z"});
                table409.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
#line 315
 testRunner.When("I patch the following Customer V3:", ((string)(null)), table409, "When ");
#line hidden
                TechTalk.SpecFlow.Table table410 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table410.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table410.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table410.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table410.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table410.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table410.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table410.AddRow(new string[] {
                            "EthnicityID",
                            "32"});
                table410.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 319
 testRunner.And("I post a DiversityDetail with the following details V2:", ((string)(null)), table410, "And ");
#line hidden
#line 329
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
