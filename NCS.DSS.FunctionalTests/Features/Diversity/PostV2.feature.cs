// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Diversity
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DiversityV2_Post")]
    public partial class DiversityV2_PostFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Diversity", "DiversityV2_Post", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table727 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table727.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table727.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table727, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table728 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table728.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table728.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 8
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table728, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with all values")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostDiversityWithAllValues()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with all values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table729 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table729.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table729.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table729.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table729.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table729.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table729.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table729.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table729.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table729.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 15
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table729, "When ");
#line hidden
#line 26
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table730 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table730.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table730.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table730.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table730.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table730.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table730.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table730.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table730.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table730.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 27
 testRunner.And("the response body should contain:", ((string)(null)), table730, "And ");
#line hidden
#line 39
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.Then("there should be a record in the dss-diversitydetails table with DiversityId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with all mandatory values")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithAllMandatoryValues()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with all mandatory values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table731 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table731.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table731.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table731.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table731.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 46
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table731, "When ");
#line hidden
#line 52
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table732 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table732.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table732.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table732.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table732.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 53
 testRunner.And("the response body should contain:", ((string)(null)), table732, "And ");
#line hidden
#line 60
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "True", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "False", null)]
        public virtual void PostDiversityWithValidValuesForConsentToCollectLLDDHealth(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for ConsentToCollectLLDDHealth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 69
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table733 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table733.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table733.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table733.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 70
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table733, "When ");
#line hidden
#line 75
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table734 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table734.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table734.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table734.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 76
 testRunner.And("the response body should contain:", ((string)(null)), table734, "And ");
#line hidden
#line 81
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "car", null)]
        public virtual void PostDiversityWithInvalidValuesForConsentToCollectLLDDHealth(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for ConsentToCollectLLDDHealth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 90
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table735 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table735.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table735.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table735.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 91
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table735, "When ");
#line hidden
#line 96
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForConsentToCollectLLDDHealth()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for ConsentToCollectLLDDHealth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table736 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table736.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table736.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table736.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
                table736.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            ""});
#line 105
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table736, "When ");
#line hidden
#line 111
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 112
 testRunner.And("the error message should be \"The ConsentToCollectLLDDHealth field is required.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for LearningDifficultyOrDisabilityDeclaration")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "2", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "9", null)]
        public virtual void PostDiversityWithValidValuesForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for LearningDifficultyOrDisabilityDeclaration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 119
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table737 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table737.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table737.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table737.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 120
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table737, "When ");
#line hidden
#line 125
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table738 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table738.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table738.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table738.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 126
 testRunner.And("the response body should contain:", ((string)(null)), table738, "And ");
#line hidden
#line 131
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "3", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "8", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "10", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "99", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 140
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 141
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table739 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table739.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table739.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table739.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 142
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table739, "When ");
#line hidden
#line 147
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
 testRunner.And("the error message should be \"Please supply a valid Learning Difficulty Or Disabil" +
                        "ity Declaration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for LearningDifficultyOrDisabilityDeclarati" +
            "on")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForLearningDifficultyOrDisabilityDeclaration()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for LearningDifficultyOrDisabilityDeclarati" +
                    "on", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 162
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table740 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table740.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table740.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table740.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table740.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table740.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table740.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table740.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table740.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table740.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 163
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table740, "When ");
#line hidden
#line 174
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table741 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table741.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
#line 175
 testRunner.And("the response body should contain:", ((string)(null)), table741, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "4", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "5", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "6", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "7", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "8", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "9", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "10", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "11", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "12", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "13", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "14", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "15", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "16", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "17", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "93", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "94", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "95", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "96", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "97", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "98", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "99", null)]
        public virtual void PostDiversityWithValidValuesForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for PrimaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 183
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 184
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table742 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table742.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table742.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table742.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
                table742.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
#line 185
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table742, "When ");
#line hidden
#line 191
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table743 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table743.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table743.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table743.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
                table743.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
#line 192
 testRunner.And("the response body should contain:", ((string)(null)), table743, "And ");
#line hidden
#line 198
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for PrimaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 225
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 226
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table744 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table744.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table744.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table744.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 227
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table744, "When ");
#line hidden
#line 232
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 233
 testRunner.And("the error message should be \"Please supply a valid Primary Learning Difficulty Or" +
                        " Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForPrimaryLearningDifficultyOrDisability()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for PrimaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 249
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table745 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table745.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table745.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table745.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            ""});
                table745.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table745.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table745.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table745.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table745.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table745.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 250
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table745, "When ");
#line hidden
#line 261
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table746 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table746.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table746.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table746.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "99"});
                table746.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table746.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table746.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table746.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table746.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table746.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 262
 testRunner.And("the response body should contain:", ((string)(null)), table746, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for SecondaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "4", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "5", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "6", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "7", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "8", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "9", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "10", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "11", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "12", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "13", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "14", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "15", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "16", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "17", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "93", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "94", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "95", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "96", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "97", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "98", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "99", null)]
        public virtual void PostDiversityWithValidValuesForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for SecondaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 278
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 279
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table747 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table747.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table747.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table747.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 280
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table747, "When ");
#line hidden
#line 285
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table748 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table748.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table748.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table748.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 286
 testRunner.And("the response body should contain:", ((string)(null)), table748, "And ");
#line hidden
#line 291
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for SecondaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for SecondaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 318
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 319
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table749 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table749.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table749.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table749.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 320
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table749, "When ");
#line hidden
#line 325
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 326
 testRunner.And("the error message should be \"Please supply a valid Secondary Learning Difficulty " +
                        "Or Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for SecondaryLearningDifficultyOrDisability" +
            "")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForSecondaryLearningDifficultyOrDisability()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for SecondaryLearningDifficultyOrDisability" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 342
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table750 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table750.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table750.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table750.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table750.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table750.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table750.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table750.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table750.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table750.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 343
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table750, "When ");
#line hidden
#line 354
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table751 = new TechTalk.SpecFlow.Table(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table751.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table751.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table751.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "99"});
                table751.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table751.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table751.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table751.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table751.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 355
 testRunner.And("the response body should contain:", ((string)(null)), table751, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for DateAndTimeLLDDHealthConsentCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "now", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "today", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "2018-08-25T11:21:00Z", null)]
        public virtual void PostDiversityWithValidValuesForDateAndTimeLLDDHealthConsentCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for DateAndTimeLLDDHealthConsentCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 370
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 371
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table752 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table752.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table752.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table752.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 372
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table752, "When ");
#line hidden
#line 377
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table753 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table753.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table753.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table753.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 378
 testRunner.And("the response body should contain:", ((string)(null)), table753, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for DateAndTimeLLDDHealthConsentCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "today +1Day", null)]
        public virtual void PostDiversityWithInvalidValuesForDateAndTimeLLDDHealthConsentCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for DateAndTimeLLDDHealthConsentCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 393
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 394
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table754 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table754.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table754.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table754.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 395
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table754, "When ");
#line hidden
#line 400
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 401
 testRunner.And("the error message should be \"Date And Time LLDD Health Consent Collected must be " +
                        "less the current date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for DateAndTimeLLDDHealthConsentCollected w" +
            "ith no consent to collect  LDD Health data given")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForDateAndTimeLLDDHealthConsentCollectedWithNoConsentToCollectLDDHealthDataGiven()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for DateAndTimeLLDDHealthConsentCollected w" +
                    "ith no consent to collect  LDD Health data given", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 409
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table755 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table755.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table755.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table755.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table755.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table755.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table755.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table755.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table755.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 410
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table755, "When ");
#line hidden
#line 420
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table756 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table756.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table756.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table756.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table756.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "99"});
                table756.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table756.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table756.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table756.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 421
 testRunner.And("the response body should contain:", ((string)(null)), table756, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for DateAndTimeLLDDHealthConsentCollected w" +
            "ith consent to collect LDD Health data given")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForDateAndTimeLLDDHealthConsentCollectedWithConsentToCollectLDDHealthDataGiven()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for DateAndTimeLLDDHealthConsentCollected w" +
                    "ith consent to collect LDD Health data given", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 433
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table757 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table757.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table757.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table757.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table757.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table757.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table757.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table757.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table757.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 434
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table757, "When ");
#line hidden
#line 444
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table758 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table758.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table758.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table758.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table758.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "99"});
                table758.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table758.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table758.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 445
 testRunner.And("the response body should contain:", ((string)(null)), table758, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "True", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "False", null)]
        public virtual void PostDiversityWithValidValuesForConsentToCollectEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for ConsentToCollectEthnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 461
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 462
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table759 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table759.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table759.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table759.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 463
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table759, "When ");
#line hidden
#line 468
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table760 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table760.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 469
 testRunner.And("the response body should contain:", ((string)(null)), table760, "And ");
#line hidden
#line 472
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "abc", null)]
        public virtual void PostDiversityWithInvalidValuesForConsentToCollectEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for ConsentToCollectEthnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 480
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 481
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table761 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table761.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table761.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table761.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 482
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table761, "When ");
#line hidden
#line 487
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForConsentToCollectEthnicity()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for ConsentToCollectEthnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 496
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table762 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table762.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table762.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table762.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table762.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table762.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table762.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            ""});
                table762.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table762.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 497
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table762, "When ");
#line hidden
#line 507
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 508
 testRunner.And("the error message should be \"The ConsentToCollectEthnicity field is required.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "31", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "32", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "33", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "34", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "35", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "36", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "37", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "38", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "39", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "40", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "41", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "42", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "43", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "44", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "45", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "46", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "47", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "98", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "99", null)]
        public virtual void PostDiversityWithValidValuesForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for Ethnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 514
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 515
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table763 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table763.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table763.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table763.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
#line 516
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table763, "When ");
#line hidden
#line 521
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table764 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table764.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table764.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
#line 522
 testRunner.And("the response body should contain:", ((string)(null)), table764, "And ");
#line hidden
#line 526
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "30", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "48", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "50", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "90", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "97", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for Ethnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 551
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 552
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table765 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table765.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table765.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
#line 553
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table765, "When ");
#line hidden
#line 557
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 558
 testRunner.And("the error message should be \"Please supply a valid Ethnicity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForEthnicity()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for Ethnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 571
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table766 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table766.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table766.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table766.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table766.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table766.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table766.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table766.AddRow(new string[] {
                            "Ethnicity",
                            ""});
#line 572
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table766, "When ");
#line hidden
#line 581
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table767 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table767.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 582
 testRunner.And("the response body should contain:", ((string)(null)), table767, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "now", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "today", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "2018-08-25T11:21:00Z", null)]
        public virtual void PostDiversityWithValidValuesForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for DateAndTimeEthnicityCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 590
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 591
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table768 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table768.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table768.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table768.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table768.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 592
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table768, "When ");
#line hidden
#line 598
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table769 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table769.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table769.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table769.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 599
 testRunner.And("the response body should contain:", ((string)(null)), table769, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "today +1Day", null)]
        public virtual void PostDiversityWithInvalidValuesForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for DateAndTimeEthnicityCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 613
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 614
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table770 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table770.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table770.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table770.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table770.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 615
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table770, "When ");
#line hidden
#line 621
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 622
 testRunner.And("the error message should be \"Date And Time Ethnicity Collected must be less the c" +
                        "urrent date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for DateAndTimeEthnicityCollected and no co" +
            "nsent to collect  Ethnicity data given")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForDateAndTimeEthnicityCollectedAndNoConsentToCollectEthnicityDataGiven()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for DateAndTimeEthnicityCollected and no co" +
                    "nsent to collect  Ethnicity data given", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 630
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table771 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table771.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table771.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table771.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table771.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table771.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table771.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table771.AddRow(new string[] {
                            "Ethnicity",
                            "38"});
                table771.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            ""});
#line 631
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table771, "When ");
#line hidden
#line 641
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table772 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table772.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table772.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table772.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table772.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "99"});
                table772.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table772.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table772.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            ""});
#line 642
 testRunner.And("the response body should contain:", ((string)(null)), table772, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for DateAndTimeEthnicityCollected with cons" +
            "ent to collect Ethnicity data given")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForDateAndTimeEthnicityCollectedWithConsentToCollectEthnicityDataGiven()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for DateAndTimeEthnicityCollected with cons" +
                    "ent to collect Ethnicity data given", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 653
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table773 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table773.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table773.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table773.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table773.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table773.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table773.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table773.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            ""});
#line 654
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table773, "When ");
#line hidden
#line 663
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post a second Diversity record")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostASecondDiversityRecord()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a second Diversity record", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 676
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table774 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table774.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table774.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table774.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table774.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table774.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table774.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table774.AddRow(new string[] {
                            "EthnicityID",
                            "32"});
                table774.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 677
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table774, "When ");
#line hidden
                TechTalk.SpecFlow.Table table775 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table775.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table775.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table775.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table775.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table775.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table775.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table775.AddRow(new string[] {
                            "EthnicityID",
                            "32"});
                table775.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 687
 testRunner.And("I post a DiversityDetail with the following details V2:", ((string)(null)), table775, "And ");
#line hidden
#line 697
 testRunner.Then("there should be a 409 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post diversity for a terminated customer")]
        public virtual void PostDiversityForATerminatedCustomer()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post diversity for a terminated customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 700
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table776 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table776.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-20T21:45:00Z"});
                table776.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
#line 701
 testRunner.When("I patch the following Customer:", ((string)(null)), table776, "When ");
#line hidden
                TechTalk.SpecFlow.Table table777 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table777.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table777.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table777.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table777.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table777.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table777.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table777.AddRow(new string[] {
                            "EthnicityID",
                            "32"});
                table777.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 705
 testRunner.And("I post a DiversityDetail with the following details V2:", ((string)(null)), table777, "And ");
#line hidden
#line 715
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
