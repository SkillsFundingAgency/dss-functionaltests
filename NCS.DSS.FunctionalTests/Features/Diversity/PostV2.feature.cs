// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Diversity
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DiversityV2_Post")]
    public partial class DiversityV2_PostFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Diversity", "DiversityV2_Post", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table593 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table593.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table593.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table593, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table594 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table594.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table594.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 8
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table594, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with all values")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostDiversityWithAllValues()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with all values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table595 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table595.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table595.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table595.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table595.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table595.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table595.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table595.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table595.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table595.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 15
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table595, "When ");
#line hidden
#line 26
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table596 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table596.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table596.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table596.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table596.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table596.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table596.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table596.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table596.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table596.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 27
 testRunner.And("the response body should contain:", ((string)(null)), table596, "And ");
#line hidden
#line 39
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with all mandatory values")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithAllMandatoryValues()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with all mandatory values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table597 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table597.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table597.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table597.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table597.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 45
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table597, "When ");
#line hidden
#line 51
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table598 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table598.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table598.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table598.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table598.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 52
 testRunner.And("the response body should contain:", ((string)(null)), table598, "And ");
#line hidden
#line 59
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "True", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "False", null)]
        public virtual void PostDiversityWithValidValuesForConsentToCollectLLDDHealth(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for ConsentToCollectLLDDHealth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 68
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table599 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table599.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table599.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table599.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 69
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table599, "When ");
#line hidden
#line 74
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table600 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table600.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table600.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table600.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 75
 testRunner.And("the response body should contain:", ((string)(null)), table600, "And ");
#line hidden
#line 80
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "car", null)]
        public virtual void PostDiversityWithInvalidValuesForConsentToCollectLLDDHealth(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for ConsentToCollectLLDDHealth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 89
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table601 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table601.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table601.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table601.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 90
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table601, "When ");
#line hidden
#line 95
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForConsentToCollectLLDDHealth()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for ConsentToCollectLLDDHealth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table602 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table602.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table602.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table602.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
                table602.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            ""});
#line 104
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table602, "When ");
#line hidden
#line 110
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
 testRunner.And("the error message should be \"The ConsentToCollectLLDDHealth field is required.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for LearningDifficultyOrDisabilityDeclaration")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "2", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "9", null)]
        public virtual void PostDiversityWithValidValuesForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for LearningDifficultyOrDisabilityDeclaration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 118
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table603 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table603.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table603.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table603.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 119
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table603, "When ");
#line hidden
#line 124
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table604 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table604.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table604.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table604.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 125
 testRunner.And("the response body should contain:", ((string)(null)), table604, "And ");
#line hidden
#line 130
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "3", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "8", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "10", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "99", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 139
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 140
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table605 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table605.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table605.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table605.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 141
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table605, "When ");
#line hidden
#line 146
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
 testRunner.And("the error message should be \"Please supply a valid Learning Difficulty Or Disabil" +
                        "ity Declaration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for LearningDifficultyOrDisabilityDeclarati" +
            "on")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForLearningDifficultyOrDisabilityDeclaration()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for LearningDifficultyOrDisabilityDeclarati" +
                    "on", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 161
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table606 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table606.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table606.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table606.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table606.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table606.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table606.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table606.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table606.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table606.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 162
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table606, "When ");
#line hidden
#line 173
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table607 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table607.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
#line 174
 testRunner.And("the response body should contain:", ((string)(null)), table607, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "4", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "5", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "6", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "7", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "8", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "9", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "10", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "11", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "12", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "13", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "14", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "15", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "16", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "17", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "93", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "94", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "95", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "96", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "97", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "98", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "99", null)]
        public virtual void PostDiversityWithValidValuesForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for PrimaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 182
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 183
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table608 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table608.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table608.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table608.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
                table608.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
#line 184
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table608, "When ");
#line hidden
#line 190
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table609 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table609.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table609.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table609.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
                table609.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
#line 191
 testRunner.And("the response body should contain:", ((string)(null)), table609, "And ");
#line hidden
#line 197
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for PrimaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 224
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 225
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table610 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table610.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table610.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table610.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 226
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table610, "When ");
#line hidden
#line 231
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 232
 testRunner.And("the error message should be \"Please supply a valid Primary Learning Difficulty Or" +
                        " Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForPrimaryLearningDifficultyOrDisability()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for PrimaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 248
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table611 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table611.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table611.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table611.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            ""});
                table611.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table611.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table611.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table611.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table611.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table611.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 249
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table611, "When ");
#line hidden
#line 260
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table612 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table612.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table612.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table612.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "99"});
                table612.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table612.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table612.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table612.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table612.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table612.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 261
 testRunner.And("the response body should contain:", ((string)(null)), table612, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for SecondaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "4", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "5", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "6", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "7", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "8", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "9", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "10", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "11", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "12", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "13", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "14", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "15", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "16", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "17", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "93", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "94", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "95", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "96", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "97", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "98", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "99", null)]
        public virtual void PostDiversityWithValidValuesForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for SecondaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 277
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 278
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table613 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table613.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table613.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table613.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 279
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table613, "When ");
#line hidden
#line 284
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table614 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table614.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table614.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table614.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 285
 testRunner.And("the response body should contain:", ((string)(null)), table614, "And ");
#line hidden
#line 290
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for SecondaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for SecondaryLearningDifficultyOrDisability", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 317
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 318
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table615 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table615.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table615.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table615.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 319
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table615, "When ");
#line hidden
#line 324
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 325
 testRunner.And("the error message should be \"Please supply a valid Secondary Learning Difficulty " +
                        "Or Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for SecondaryLearningDifficultyOrDisability" +
            "")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForSecondaryLearningDifficultyOrDisability()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for SecondaryLearningDifficultyOrDisability" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 341
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table616 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table616.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table616.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table616.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table616.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table616.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table616.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table616.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table616.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table616.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 342
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table616, "When ");
#line hidden
#line 353
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table617 = new TechTalk.SpecFlow.Table(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table617.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table617.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table617.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "99"});
                table617.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table617.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table617.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table617.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
                table617.AddRow(new string[] {
                            "LastModifiedDate",
                            "2018-08-25T11:21:00Z"});
#line 354
 testRunner.And("the response body should contain:", ((string)(null)), table617, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for DateAndTimeLLDDHealthConsentCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "now", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "today", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "2018-08-25T11:21:00Z", null)]
        public virtual void PostDiversityWithValidValuesForDateAndTimeLLDDHealthConsentCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for DateAndTimeLLDDHealthConsentCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 369
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 370
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table618 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table618.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table618.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table618.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 371
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table618, "When ");
#line hidden
#line 376
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table619 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table619.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table619.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table619.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 377
 testRunner.And("the response body should contain:", ((string)(null)), table619, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for DateAndTimeLLDDHealthConsentCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "today +1Day", null)]
        public virtual void PostDiversityWithInvalidValuesForDateAndTimeLLDDHealthConsentCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for DateAndTimeLLDDHealthConsentCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 392
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 393
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table620 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table620.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table620.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table620.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 394
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table620, "When ");
#line hidden
#line 399
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 400
 testRunner.And("the error message should be \"Date And Time LLDD Health Consent Collected must be " +
                        "less the current date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for DateAndTimeLLDDHealthConsentCollected w" +
            "ith no consent to collect  LDD Health data given")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForDateAndTimeLLDDHealthConsentCollectedWithNoConsentToCollectLDDHealthDataGiven()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for DateAndTimeLLDDHealthConsentCollected w" +
                    "ith no consent to collect  LDD Health data given", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 408
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table621 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table621.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table621.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table621.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table621.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table621.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table621.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table621.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table621.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 409
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table621, "When ");
#line hidden
#line 419
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table622 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table622.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table622.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table622.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table622.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "99"});
                table622.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table622.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table622.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table622.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 420
 testRunner.And("the response body should contain:", ((string)(null)), table622, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for DateAndTimeLLDDHealthConsentCollected w" +
            "ith consent to collect LDD Health data given")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForDateAndTimeLLDDHealthConsentCollectedWithConsentToCollectLDDHealthDataGiven()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for DateAndTimeLLDDHealthConsentCollected w" +
                    "ith consent to collect LDD Health data given", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 432
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table623 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table623.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table623.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table623.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table623.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table623.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table623.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table623.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table623.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 433
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table623, "When ");
#line hidden
#line 443
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table624 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table624.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table624.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table624.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table624.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "99"});
                table624.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table624.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table624.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 444
 testRunner.And("the response body should contain:", ((string)(null)), table624, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "True", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "False", null)]
        public virtual void PostDiversityWithValidValuesForConsentToCollectEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for ConsentToCollectEthnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 460
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 461
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table625 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table625.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table625.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table625.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 462
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table625, "When ");
#line hidden
#line 467
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table626 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table626.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 468
 testRunner.And("the response body should contain:", ((string)(null)), table626, "And ");
#line hidden
#line 471
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "abc", null)]
        public virtual void PostDiversityWithInvalidValuesForConsentToCollectEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for ConsentToCollectEthnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 479
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 480
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table627 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table627.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "9"});
                table627.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table627.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 481
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table627, "When ");
#line hidden
#line 486
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForConsentToCollectEthnicity()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for ConsentToCollectEthnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 495
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table628 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table628.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table628.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table628.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table628.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table628.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table628.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            ""});
                table628.AddRow(new string[] {
                            "Ethnicity",
                            "32"});
                table628.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 496
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table628, "When ");
#line hidden
#line 506
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 507
 testRunner.And("the error message should be \"The ConsentToCollectEthnicity field is required.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "31", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "32", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "33", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "34", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "35", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "36", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "37", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "38", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "39", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "40", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "41", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "42", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "43", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "44", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "45", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "46", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "47", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "98", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "99", null)]
        public virtual void PostDiversityWithValidValuesForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for Ethnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 513
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 514
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table629 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table629.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table629.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table629.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
#line 515
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table629, "When ");
#line hidden
#line 520
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table630 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table630.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table630.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
#line 521
 testRunner.And("the response body should contain:", ((string)(null)), table630, "And ");
#line hidden
#line 525
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "30", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "48", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "50", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "90", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "97", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "100", null)]
        public virtual void PostDiversityWithInvalidValuesForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for Ethnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 550
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 551
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table631 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table631.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table631.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
#line 552
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table631, "When ");
#line hidden
#line 556
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 557
 testRunner.And("the error message should be \"Please supply a valid Ethnicity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForEthnicity()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for Ethnicity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 570
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table632 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table632.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table632.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table632.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table632.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table632.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table632.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table632.AddRow(new string[] {
                            "Ethnicity",
                            ""});
#line 571
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table632, "When ");
#line hidden
#line 580
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table633 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table633.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 581
 testRunner.And("the response body should contain:", ((string)(null)), table633, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with valid values for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "now", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "today", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "2018-08-25T11:21:00Z", null)]
        public virtual void PostDiversityWithValidValuesForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with valid values for DateAndTimeEthnicityCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 589
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 590
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table634 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table634.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table634.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table634.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table634.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 591
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table634, "When ");
#line hidden
#line 597
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table635 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table635.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table635.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table635.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 598
 testRunner.And("the response body should contain:", ((string)(null)), table635, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with invalid values for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "today +1Day", null)]
        public virtual void PostDiversityWithInvalidValuesForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with invalid values for DateAndTimeEthnicityCollected", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 612
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 613
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table636 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table636.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table636.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table636.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table636.AddRow(new string[] {
                            "Ethnicity",
                            "99"});
#line 614
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table636, "When ");
#line hidden
#line 620
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 621
 testRunner.And("the error message should be \"Date And Time Ethnicity Collected must be less the c" +
                        "urrent date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for DateAndTimeEthnicityCollected and no co" +
            "nsent to collect  Ethnicity data given")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForDateAndTimeEthnicityCollectedAndNoConsentToCollectEthnicityDataGiven()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for DateAndTimeEthnicityCollected and no co" +
                    "nsent to collect  Ethnicity data given", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 629
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table637 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table637.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table637.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table637.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table637.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table637.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table637.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table637.AddRow(new string[] {
                            "Ethnicity",
                            "38"});
                table637.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            ""});
#line 630
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table637, "When ");
#line hidden
#line 640
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table638 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table638.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table638.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table638.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table638.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "99"});
                table638.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table638.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "false"});
                table638.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            ""});
#line 641
 testRunner.And("the response body should contain:", ((string)(null)), table638, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Diversity with no value supplied for DateAndTimeEthnicityCollected with cons" +
            "ent to collect Ethnicity data given")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostDiversityWithNoValueSuppliedForDateAndTimeEthnicityCollectedWithConsentToCollectEthnicityDataGiven()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Diversity with no value supplied for DateAndTimeEthnicityCollected with cons" +
                    "ent to collect Ethnicity data given", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 652
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table639 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table639.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "false"});
                table639.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            ""});
                table639.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "5"});
                table639.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            ""});
                table639.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            ""});
                table639.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table639.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            ""});
#line 653
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table639, "When ");
#line hidden
#line 662
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post a second Diversity record")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PostASecondDiversityRecord()
        {
            string[] tagsOfScenario = new string[] {
                    "diversitydetails"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a second Diversity record", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 675
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table640 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table640.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table640.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table640.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table640.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table640.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table640.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table640.AddRow(new string[] {
                            "EthnicityID",
                            "32"});
                table640.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 676
 testRunner.When("I post a DiversityDetail with the following details V2:", ((string)(null)), table640, "When ");
#line hidden
                TechTalk.SpecFlow.Table table641 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table641.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table641.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table641.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table641.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table641.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table641.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table641.AddRow(new string[] {
                            "EthnicityID",
                            "32"});
                table641.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 686
 testRunner.And("I post a DiversityDetail with the following details V2:", ((string)(null)), table641, "And ");
#line hidden
#line 696
 testRunner.Then("there should be a 409 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post diversity for a terminated customer")]
        public virtual void PostDiversityForATerminatedCustomer()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post diversity for a terminated customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 699
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table642 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table642.AddRow(new string[] {
                            "DateOfTermination",
                            "2018-07-20T21:45:00Z"});
                table642.AddRow(new string[] {
                            "ReasonForTermination",
                            "1"});
#line 700
 testRunner.When("I patch the following Customer:", ((string)(null)), table642, "When ");
#line hidden
                TechTalk.SpecFlow.Table table643 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table643.AddRow(new string[] {
                            "ConsentToCollectLLDDHealth",
                            "true"});
                table643.AddRow(new string[] {
                            "LearningDifficultyOrDisabilityDeclaration",
                            "1"});
                table643.AddRow(new string[] {
                            "PrimaryLearningDifficultyOrDisability",
                            "4"});
                table643.AddRow(new string[] {
                            "SecondaryLearningDifficultyOrDisability",
                            "5"});
                table643.AddRow(new string[] {
                            "DateAndTimeLLDDHealthConsentCollected",
                            "2018-06-25T11:21:00Z"});
                table643.AddRow(new string[] {
                            "ConsentToCollectEthnicity",
                            "true"});
                table643.AddRow(new string[] {
                            "EthnicityID",
                            "32"});
                table643.AddRow(new string[] {
                            "DateAndTimeEthnicityCollected",
                            "2018-06-25T11:22:00Z"});
#line 704
 testRunner.And("I post a DiversityDetail with the following details V2:", ((string)(null)), table643, "And ");
#line hidden
#line 714
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
