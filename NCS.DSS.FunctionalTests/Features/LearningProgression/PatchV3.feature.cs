// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.LearningProgression
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LearningProgression_Patch")]
    public partial class LearningProgression_PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV3.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/LearningProgression", "LearningProgression_Patch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table662 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table662.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table662.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details V2:", ((string)(null)), table662, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table663 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table663.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table663.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
            table663.AddRow(new string[] {
                        "PriorityGroups",
                        "1,3"});
#line 8
 testRunner.And("I post a Customer with the following details V3:", ((string)(null)), table663, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with  all values")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchLearningProgressionWithAllValues()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with  all values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table664 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table664.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table664.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table664.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table664.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table664.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table664.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table664.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 16
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table664, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table665 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table665.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table665.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table665.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table665.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table665.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table665.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table665.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table665.AddRow(new string[] {
                            "LastModifiedDate",
                            "2019-07-25T11:21:00Z"});
#line 25
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table665, "When ");
#line hidden
#line 35
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table666 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table666.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table666.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table666.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table666.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table666.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table666.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table666.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 36
 testRunner.And("the response body should contain:", ((string)(null)), table666, "And ");
#line hidden
#line 46
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with valid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2019-06-19T09:01:00Z", null)]
        public virtual void PatchLearningProgressionWithValidValuesForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with valid values for DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table667 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table667.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table667.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table667.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table667.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table667.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table667.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 56
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table667, "Given ");
#line hidden
#line 64
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table668 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 65
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table668, "When ");
#line hidden
#line 67
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table669 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table669.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table669.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table669.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table669.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table669.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table669.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 68
 testRunner.And("the response body should contain:", ((string)(null)), table669, "And ");
#line hidden
#line 77
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 79
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "gtfr-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table670 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table670.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table670.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table670.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table670.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table670.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table670.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table670.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 89
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table670, "Given ");
#line hidden
#line 98
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table671 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 99
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table671, "When ");
#line hidden
#line 101
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future dated DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1D", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now + 1H", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1Y", "DateProgressionRecorded must be less than or equal to now.", null)]
        public virtual void PatchLearningProgressionWithFutureDatedDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future dated DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table672 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table672.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table672.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table672.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table672.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table672.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table672.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table672.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 115
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table672, "Given ");
#line hidden
#line 124
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table673 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 125
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table673, "When ");
#line hidden
#line 127
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "", null)]
        public virtual void PatchLearningProgressionWithEmptyDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table674 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table674.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table674.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table674.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table674.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table674.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table674.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table674.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 139
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table674, "Given ");
#line hidden
#line 148
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table675 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 149
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table675, "When ");
#line hidden
#line 151
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table676 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table676.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table676.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table676.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table676.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table676.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table676.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table676.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
#line 153
 testRunner.And("the response body should contain:", ((string)(null)), table676, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PatchLearningProgressionWithCurrentLearningStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with CurrentLearningStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table677 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table677.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table677.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table677.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table677.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table677.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table677.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table677.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 172
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table677, "Given ");
#line hidden
#line 181
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table678 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 182
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table678, "When ");
#line hidden
#line 184
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table679 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table679.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table679.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table679.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table679.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table679.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table679.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 186
 testRunner.And("the response body should contain:", ((string)(null)), table679, "And ");
#line hidden
#line 195
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 197
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "-1", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "0", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "4", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "97", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "100", "CurrentLearningStatus must be a valid current Learning Status", null)]
        public virtual void PatchLearningProgressionWithInvalidCurrentLearningStatus(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid CurrentLearningStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 208
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table680 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table680.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table680.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table680.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table680.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table680.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table680.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table680.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 209
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table680, "Given ");
#line hidden
#line 218
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table681 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 219
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table681, "When ");
#line hidden
#line 221
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 222
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 223
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "", null)]
        public virtual void PatchLearningProgressionWithEmptyCurrentLearningStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty CurrentLearningStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table682 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table682.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table682.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table682.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table682.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table682.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table682.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table682.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 235
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table682, "Given ");
#line hidden
#line 244
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table683 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 245
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table683, "When ");
#line hidden
#line 247
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table684 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table684.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table684.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table684.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table684.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table684.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table684.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table684.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 248
 testRunner.And("the response body should contain:", ((string)(null)), table684, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression to set CurrentLearningStatus to a new valid value wher" +
            "e there was no previous value for CurrentLearningStatus or LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PatchLearningProgressionToSetCurrentLearningStatusToANewValidValueWhereThereWasNoPreviousValueForCurrentLearningStatusOrLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression to set CurrentLearningStatus to a new valid value wher" +
                    "e there was no previous value for CurrentLearningStatus or LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 263
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table685 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table685.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table685.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table685.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table685.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table685.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 264
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table685, "Given ");
#line hidden
#line 271
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table686 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 272
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table686, "When ");
#line hidden
#line 274
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 275
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table687 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table687.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table687.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table687.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table687.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 276
 testRunner.And("the response body should contain:", ((string)(null)), table687, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted where there was no previous value for CurrentLearningStatus or LearningHo" +
            "urs")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedWhereThereWasNoPreviousValueForCurrentLearningStatusOrLearningHours()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted where there was no previous value for CurrentLearningStatus or LearningHo" +
                    "urs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 312
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table688 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table688.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table688.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table688.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table688.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table688.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-23T11:21:00Z"});
                table688.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 313
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table688, "Given ");
#line hidden
#line 321
 testRunner.Given("I want to send <Field> with value <Value> in the following request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table689 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table689.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table689.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-23T11:21:00Z"});
#line 322
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table689, "When ");
#line hidden
#line 326
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 327
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                        "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 328
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
            "o previous value for CurrentLearningStatus or DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusWhereThereWasNoPreviousValueForCurrentLearningStatusOrDateLearningStarted()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
                    "o previous value for CurrentLearningStatus or DateLearningStarted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 331
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table690 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table690.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table690.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table690.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table690.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table690.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-23T11:21:00Z"});
                table690.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 332
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table690, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table691 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table691.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
#line 340
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table691, "When ");
#line hidden
#line 343
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 344
 testRunner.And("the response body should include \"LearningHours must have a value when Current Le" +
                        "arning Status is InLearning.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 345
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted where there was no previous value for CurrentLearningStatus or DateLearni" +
            "ngStarted or LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedWhereThereWasNoPreviousValueForCurrentLearningStatusOrDateLearningStartedOrLearningHours()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted where there was no previous value for CurrentLearningStatus or DateLearni" +
                    "ngStarted or LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 348
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table692 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table692.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table692.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table692.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table692.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table692.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 349
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table692, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table693 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table693.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table693.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-23T11:21:00Z"});
#line 356
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table693, "When ");
#line hidden
#line 360
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 361
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                        "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 362
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
            "o previous value for CurrentLearningStatus, DateLearningStarted or LearningHours" +
            "")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusWhereThereWasNoPreviousValueForCurrentLearningStatusDateLearningStartedOrLearningHours()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
                    "o previous value for CurrentLearningStatus, DateLearningStarted or LearningHours" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 365
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table694 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table694.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table694.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table694.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table694.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table694.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 366
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table694, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table695 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table695.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
#line 373
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table695, "When ");
#line hidden
#line 376
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 377
 testRunner.And("the response body should include DateLearningStarted must have a value when Curre" +
                        "nt Learning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 378
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                        "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 379
 testRunner.And("the number of errors returned should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted AND LearningHours where there was no previous value for CurrentLearningSt" +
            "atus, DateLearningStarted or LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedANDLearningHoursWhereThereWasNoPreviousValueForCurrentLearningStatusDateLearningStartedOrLearningHours()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted AND LearningHours where there was no previous value for CurrentLearningSt" +
                    "atus, DateLearningStarted or LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 382
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table696 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table696.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table696.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table696.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table696.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table696.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 383
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table696, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table697 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table697.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table697.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-24T11:21:00Z"});
                table697.AddRow(new string[] {
                            "LearningHours",
                            "2"});
#line 390
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table697, "When ");
#line hidden
#line 395
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table698 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table698.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table698.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table698.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table698.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table698.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table698.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-24T11:21:00Z"});
                table698.AddRow(new string[] {
                            "LearningHours",
                            "2"});
#line 396
 testRunner.And("the response body should contain:", ((string)(null)), table698, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "2", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "99", null)]
        public virtual void PatchLearningProgressionWithLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 410
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table699 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table699.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table699.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table699.AddRow(new string[] {
                            "LearningHours",
                            "99"});
                table699.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table699.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table699.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table699.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 411
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table699, "Given ");
#line hidden
#line 420
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table700 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 421
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table700, "When ");
#line hidden
#line 423
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 424
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table701 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table701.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table701.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table701.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table701.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table701.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 425
 testRunner.And("the response body should contain:", ((string)(null)), table701, "And ");
#line hidden
#line 433
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 434
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 435
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "-1", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "0", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "3", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "97", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "100", "LearningHours must have a valid Learning Hours value", null)]
        public virtual void PatchLearningProgressionWithInvalidLearningHours(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 445
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table702 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table702.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table702.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table702.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table702.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table702.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table702.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table702.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 446
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table702, "Given ");
#line hidden
#line 455
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table703 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 456
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table703, "When ");
#line hidden
#line 458
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 459
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 460
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "", null)]
        public virtual void PatchLearningProgressionWithEmptyLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 471
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table704 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table704.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table704.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table704.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table704.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table704.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table704.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table704.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 472
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table704, "Given ");
#line hidden
#line 481
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table705 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 482
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table705, "When ");
#line hidden
#line 484
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table706 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table706.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table706.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table706.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table706.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table706.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table706.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table706.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 485
 testRunner.And("the response body should contain:", ((string)(null)), table706, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-06-25T11:21:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today", null)]
        public virtual void PatchLearningProgressionWithDateLearningStarted(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with DateLearningStarted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 503
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table707 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table707.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table707.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table707.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table707.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table707.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table707.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table707.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 504
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table707, "Given ");
#line hidden
#line 513
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table708 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 514
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table708, "When ");
#line hidden
#line 516
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 517
 testRunner.And(string.Format("the response body should have {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table709 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table709.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table709.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table709.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table709.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table709.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table709.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 518
 testRunner.And("the response body should contain:", ((string)(null)), table709, "And ");
#line hidden
#line 527
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 528
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 529
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "dfgdf-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForDateLearningStarted(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for DateLearningStarted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 538
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table710 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table710.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table710.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table710.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table710.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table710.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table710.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table710.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 539
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table710, "Given ");
#line hidden
#line 548
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table711 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 549
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table711, "When ");
#line hidden
#line 551
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 552
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 553
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today +1D", "DateLearningStarted must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Now + 1H", "DateLearningStarted must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today +1Y", "DateLearningStarted must be less than or equal to now.", null)]
        public virtual void PatchLearningProgressionWithFutureValueForDateLearningStarted(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future value for DateLearningStarted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 564
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table712 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table712.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table712.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table712.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table712.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table712.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table712.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table712.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 565
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table712, "Given ");
#line hidden
#line 574
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table713 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 575
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table713, "When ");
#line hidden
#line 577
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 578
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 579
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "0", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PatchLearningProgressionWithCurrentQualificationLevel(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with CurrentQualificationLevel", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 591
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 592
 testRunner.Given("I want to set the scenario touchPointId header to 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table714 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table714.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table714.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table714.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table714.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table714.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table714.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table714.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 593
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table714, "Given ");
#line hidden
#line 602
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table715 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 603
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table715, "When ");
#line hidden
#line 605
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 606
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table716 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table716.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table716.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table716.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table716.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table716.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 607
 testRunner.And("the response body should contain:", ((string)(null)), table716, "And ");
#line hidden
#line 614
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 615
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 616
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 617
 testRunner.Given("I fetch a actions cosmos document from actions database using key ActionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 618
 testRunner.Then("the cosmos document should have property CreatedBy with value 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "-1", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "9", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "98", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "100", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForCurrentQualificationLevel(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for CurrentQualificationLevel", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 634
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table717 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table717.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table717.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table717.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table717.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table717.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table717.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table717.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 635
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table717, "Given ");
#line hidden
#line 644
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table718 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 645
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table718, "When ");
#line hidden
#line 647
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 648
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 649
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression to set CurrentQualificationLevel < 99 where there was " +
            "no previous value for CurrentQualificationLevel or DateQualificationLevelAchieve" +
            "d")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "8", null)]
        public virtual void PatchLearningProgressionToSetCurrentQualificationLevel99WhereThereWasNoPreviousValueForCurrentQualificationLevelOrDateQualificationLevelAchieved(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression to set CurrentQualificationLevel < 99 where there was " +
                    "no previous value for CurrentQualificationLevel or DateQualificationLevelAchieve" +
                    "d", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 659
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table719 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table719.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table719.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table719.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-23T11:21:00Z"});
                table719.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table719.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 660
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table719, "Given ");
#line hidden
#line 667
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table720 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 668
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table720, "When ");
#line hidden
#line 670
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 671
 testRunner.And("the response body should include DateQualificationLevelAchieved is required when " +
                        "QualificationLevel < NoQualification (99).", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 672
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-06-25T11:21:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today", null)]
        public virtual void PatchLearningProgressionWithDateQualificationLevelAchieved(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with DateQualificationLevelAchieved", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 683
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table721 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table721.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table721.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table721.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table721.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table721.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table721.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table721.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 684
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table721, "Given ");
#line hidden
#line 693
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table722 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 694
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table722, "When ");
#line hidden
#line 696
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table723 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table723.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table723.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table723.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table723.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table723.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table723.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 697
 testRunner.And("the response body should contain:", ((string)(null)), table723, "And ");
#line hidden
#line 706
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 707
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 708
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "sdfg-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForDateQualificationLevelAchieved(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for DateQualificationLevelAchieved", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 717
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table724 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table724.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table724.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table724.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table724.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table724.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table724.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table724.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 718
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table724, "Given ");
#line hidden
#line 727
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table725 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 728
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table725, "When ");
#line hidden
#line 730
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 731
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 732
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future value for DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today +1D", "DateQualificationLevelAchieved must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Now + 1H", "DateQualificationLevelAchieved must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today +1Y", "DateQualificationLevelAchieved must be less than or equal to now", null)]
        public virtual void PatchLearningProgressionWithFutureValueForDateQualificationLevelAchieved(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future value for DateQualificationLevelAchieved", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 743
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table726 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table726.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table726.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table726.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table726.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table726.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table726.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table726.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 744
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table726, "Given ");
#line hidden
#line 753
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table727 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 754
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table727, "When ");
#line hidden
#line 756
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 757
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 758
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LastLearningProvidersUKPRN")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "10000000", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "10000001", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "51234567", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "99999998", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "99999999", null)]
        public virtual void PatchLearningProgressionWithLastLearningProvidersUKPRN(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LastLearningProvidersUKPRN", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 770
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table728 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table728.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table728.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table728.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table728.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table728.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table728.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table728.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 771
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table728, "Given ");
#line hidden
#line 780
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table729 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 781
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table729, "When ");
#line hidden
#line 783
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 784
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table730 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table730.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table730.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table730.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table730.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table730.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
#line 785
 testRunner.And("the response body should contain:", ((string)(null)), table730, "And ");
#line hidden
#line 793
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 794
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 795
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid LastLearningProvidersUKPRN")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "9999999", "The field LastLearningProvidersUKPRN must be a string with a minimum length of 8 " +
            "and a maximum length of 8", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "1", "The field LastLearningProvidersUKPRN must be a string with a minimum length of 8 " +
            "and a maximum length of 8.", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "1234567A", "LastLearningProvidersUKPRN must be a Number", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "abcdefgh", "LastLearningProvidersUKPRN must be a Number", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "100000000", "The field LastLearningProvidersUKPRN must be a string with a minimum length of 8 " +
            "and a maximum length of 8", "1", null)]
        public virtual void PatchLearningProgressionWithInvalidLastLearningProvidersUKPRN(string field, string value, string errorMessage, string errorCount, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            argumentsOfScenario.Add("ErrorCount", errorCount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid LastLearningProvidersUKPRN", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 805
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table731 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table731.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table731.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table731.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table731.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table731.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table731.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table731.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 806
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table731, "Given ");
#line hidden
#line 815
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table732 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 816
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table732, "When ");
#line hidden
#line 818
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 819
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 820
 testRunner.And(string.Format("the number of errors returned should be {0}", errorCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression no value for LastLearningProvidersUKPRN")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "", null)]
        public virtual void PatchLearningProgressionNoValueForLastLearningProvidersUKPRN(string field, string value, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression no value for LastLearningProvidersUKPRN", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 830
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table733 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table733.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table733.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table733.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table733.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table733.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table733.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table733.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 831
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table733, "Given ");
#line hidden
#line 840
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 841
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table734 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 842
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table734, "When ");
#line hidden
#line 844
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table735 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table735.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table735.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table735.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table735.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table735.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table735.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table735.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 845
 testRunner.Then("the response body should contain:", ((string)(null)), table735, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2019-06-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "now", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "now + 1Hour", null)]
        public virtual void PatchLearningProgressionWithLastModifiedDate(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LastModifiedDate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 863
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table736 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table736.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table736.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table736.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table736.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table736.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table736.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table736.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 864
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table736, "Given ");
#line hidden
#line 873
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table737 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 874
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table737, "When ");
#line hidden
#line 876
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table738 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table738.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table738.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table738.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table738.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table738.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table738.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table738.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 877
 testRunner.And("the response body should contain:", ((string)(null)), table738, "And ");
#line hidden
#line 887
 testRunner.Given("I wait for 10 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 888
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "sdrg-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForLastModifiedDate(string field, string date, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Date", date);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for LastModifiedDate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 897
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table739 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table739.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table739.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table739.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table739.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table739.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table739.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table739.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 898
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table739, "Given ");
#line hidden
#line 907
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To <Value>", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table740 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 908
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table740, "When ");
#line hidden
#line 910
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 911
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 912
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch to Learning Progression received from another touchpoint")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchToLearningProgressionReceivedFromAnotherTouchpoint()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch to Learning Progression received from another touchpoint", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 926
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table741 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table741.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table741.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table741.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table741.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table741.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table741.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table741.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 927
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table741, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table742 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table742.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "1"});
#line 937
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table742, "When ");
#line hidden
#line 940
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 941
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table743 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table743.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "1"});
#line 943
 testRunner.And("the response body should contain:", ((string)(null)), table743, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
