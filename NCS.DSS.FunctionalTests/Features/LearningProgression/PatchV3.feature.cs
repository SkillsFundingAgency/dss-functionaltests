// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.LearningProgression
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LearningProgression_Patch")]
    public partial class LearningProgression_PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV3.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/LearningProgression", "LearningProgression_Patch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table541 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table541.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table541.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details V2:", ((string)(null)), table541, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table542 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table542.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table542.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
            table542.AddRow(new string[] {
                        "PriorityGroups",
                        "1,3"});
#line 8
 testRunner.And("I post a Customer with the following details V3:", ((string)(null)), table542, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with  all values")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchLearningProgressionWithAllValues()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with  all values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table543 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table543.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table543.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table543.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table543.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table543.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table543.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table543.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 16
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table543, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table544 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table544.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table544.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table544.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table544.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table544.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table544.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table544.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table544.AddRow(new string[] {
                            "LastModifiedDate",
                            "2019-07-25T11:21:00Z"});
#line 25
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table544, "When ");
#line hidden
#line 35
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table545 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table545.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table545.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table545.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table545.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table545.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table545.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table545.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 36
 testRunner.And("the response body should contain:", ((string)(null)), table545, "And ");
#line hidden
#line 46
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with valid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2019-06-19T09:01:00Z", null)]
        public virtual void PatchLearningProgressionWithValidValuesForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with valid values for DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table546 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table546.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table546.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table546.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table546.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table546.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table546.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 56
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table546, "Given ");
#line hidden
#line 64
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table547 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 65
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table547, "When ");
#line hidden
#line 67
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table548 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table548.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table548.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table548.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table548.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table548.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table548.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 68
 testRunner.And("the response body should contain:", ((string)(null)), table548, "And ");
#line hidden
#line 77
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 79
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "gtfr-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table549 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table549.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table549.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table549.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table549.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table549.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table549.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table549.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 89
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table549, "Given ");
#line hidden
#line 98
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table550 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 99
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table550, "When ");
#line hidden
#line 101
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future dated DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1D", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now + 1H", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1Y", "DateProgressionRecorded must be less than or equal to now.", null)]
        public virtual void PatchLearningProgressionWithFutureDatedDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future dated DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table551 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table551.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table551.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table551.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table551.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table551.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table551.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table551.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 115
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table551, "Given ");
#line hidden
#line 124
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table552 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 125
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table552, "When ");
#line hidden
#line 127
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "", null)]
        public virtual void PatchLearningProgressionWithEmptyDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table553 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table553.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table553.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table553.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table553.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table553.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table553.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table553.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 139
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table553, "Given ");
#line hidden
#line 148
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table554 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 149
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table554, "When ");
#line hidden
#line 151
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table555 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table555.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table555.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table555.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table555.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table555.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table555.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table555.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
#line 153
 testRunner.And("the response body should contain:", ((string)(null)), table555, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PatchLearningProgressionWithCurrentLearningStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with CurrentLearningStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table556 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table556.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table556.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table556.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table556.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table556.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table556.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table556.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 172
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table556, "Given ");
#line hidden
#line 181
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table557 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 182
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table557, "When ");
#line hidden
#line 184
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table558 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table558.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table558.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table558.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table558.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table558.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table558.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 186
 testRunner.And("the response body should contain:", ((string)(null)), table558, "And ");
#line hidden
#line 195
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 197
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "-1", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "0", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "4", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "97", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "100", "CurrentLearningStatus must be a valid current Learning Status", null)]
        public virtual void PatchLearningProgressionWithInvalidCurrentLearningStatus(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid CurrentLearningStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 208
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table559 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table559.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table559.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table559.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table559.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table559.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table559.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table559.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 209
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table559, "Given ");
#line hidden
#line 218
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table560 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 219
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table560, "When ");
#line hidden
#line 221
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 222
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 223
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "", null)]
        public virtual void PatchLearningProgressionWithEmptyCurrentLearningStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty CurrentLearningStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table561 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table561.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table561.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table561.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table561.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table561.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table561.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table561.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 235
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table561, "Given ");
#line hidden
#line 244
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table562 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 245
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table562, "When ");
#line hidden
#line 247
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table563 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table563.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table563.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table563.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table563.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table563.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table563.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table563.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 248
 testRunner.And("the response body should contain:", ((string)(null)), table563, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression to set CurrentLearningStatus to a new valid value wher" +
            "e there was no previous value for CurrentLearningStatus or LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PatchLearningProgressionToSetCurrentLearningStatusToANewValidValueWhereThereWasNoPreviousValueForCurrentLearningStatusOrLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression to set CurrentLearningStatus to a new valid value wher" +
                    "e there was no previous value for CurrentLearningStatus or LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 263
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table564 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table564.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table564.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table564.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table564.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table564.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 264
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table564, "Given ");
#line hidden
#line 271
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table565 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 272
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table565, "When ");
#line hidden
#line 274
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 275
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table566 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table566.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table566.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table566.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table566.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 276
 testRunner.And("the response body should contain:", ((string)(null)), table566, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted where there was no previous value for CurrentLearningStatus or LearningHo" +
            "urs")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedWhereThereWasNoPreviousValueForCurrentLearningStatusOrLearningHours()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted where there was no previous value for CurrentLearningStatus or LearningHo" +
                    "urs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 312
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table567 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table567.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table567.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table567.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table567.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table567.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-23T11:21:00Z"});
                table567.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 313
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table567, "Given ");
#line hidden
#line 321
 testRunner.Given("I want to send <Field> with value <Value> in the following request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table568 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table568.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table568.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-23T11:21:00Z"});
#line 322
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table568, "When ");
#line hidden
#line 326
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 327
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                        "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 328
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
            "o previous value for CurrentLearningStatus or DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusWhereThereWasNoPreviousValueForCurrentLearningStatusOrDateLearningStarted()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
                    "o previous value for CurrentLearningStatus or DateLearningStarted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 331
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table569 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table569.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table569.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table569.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table569.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table569.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-23T11:21:00Z"});
                table569.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 332
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table569, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table570 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table570.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
#line 340
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table570, "When ");
#line hidden
#line 343
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 344
 testRunner.And("the response body should include \"LearningHours must have a value when Current Le" +
                        "arning Status is InLearning.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 345
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted where there was no previous value for CurrentLearningStatus or DateLearni" +
            "ngStarted or LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedWhereThereWasNoPreviousValueForCurrentLearningStatusOrDateLearningStartedOrLearningHours()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted where there was no previous value for CurrentLearningStatus or DateLearni" +
                    "ngStarted or LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 348
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table571 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table571.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table571.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table571.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table571.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table571.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 349
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table571, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table572 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table572.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table572.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-23T11:21:00Z"});
#line 356
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table572, "When ");
#line hidden
#line 360
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 361
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                        "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 362
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
            "o previous value for CurrentLearningStatus, DateLearningStarted or LearningHours" +
            "")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusWhereThereWasNoPreviousValueForCurrentLearningStatusDateLearningStartedOrLearningHours()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
                    "o previous value for CurrentLearningStatus, DateLearningStarted or LearningHours" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 365
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table573 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table573.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table573.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table573.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table573.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table573.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 366
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table573, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table574 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table574.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
#line 373
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table574, "When ");
#line hidden
#line 376
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 377
 testRunner.And("the response body should include DateLearningStarted must have a value when Curre" +
                        "nt Learning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 378
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                        "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 379
 testRunner.And("the number of errors returned should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted AND LearningHours where there was no previous value for CurrentLearningSt" +
            "atus, DateLearningStarted or LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedANDLearningHoursWhereThereWasNoPreviousValueForCurrentLearningStatusDateLearningStartedOrLearningHours()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted AND LearningHours where there was no previous value for CurrentLearningSt" +
                    "atus, DateLearningStarted or LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 382
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table575 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table575.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table575.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table575.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table575.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table575.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 383
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table575, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table576 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table576.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table576.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-24T11:21:00Z"});
                table576.AddRow(new string[] {
                            "LearningHours",
                            "2"});
#line 390
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table576, "When ");
#line hidden
#line 395
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table577 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table577.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table577.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table577.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-24T11:21:00Z"});
                table577.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table577.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table577.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-24T11:21:00Z"});
                table577.AddRow(new string[] {
                            "LearningHours",
                            "2"});
#line 396
 testRunner.And("the response body should contain:", ((string)(null)), table577, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "2", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "99", null)]
        public virtual void PatchLearningProgressionWithLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 410
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table578 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table578.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table578.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table578.AddRow(new string[] {
                            "LearningHours",
                            "99"});
                table578.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table578.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table578.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table578.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 411
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table578, "Given ");
#line hidden
#line 420
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table579 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 421
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table579, "When ");
#line hidden
#line 423
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 424
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table580 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table580.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table580.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table580.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table580.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table580.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 425
 testRunner.And("the response body should contain:", ((string)(null)), table580, "And ");
#line hidden
#line 433
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 434
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 435
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "-1", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "0", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "3", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "97", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "100", "LearningHours must have a valid Learning Hours value", null)]
        public virtual void PatchLearningProgressionWithInvalidLearningHours(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 445
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table581 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table581.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table581.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table581.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table581.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table581.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table581.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table581.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 446
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table581, "Given ");
#line hidden
#line 455
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table582 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 456
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table582, "When ");
#line hidden
#line 458
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 459
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 460
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "", null)]
        public virtual void PatchLearningProgressionWithEmptyLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 471
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table583 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table583.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table583.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table583.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table583.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table583.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table583.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table583.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 472
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table583, "Given ");
#line hidden
#line 481
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table584 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 482
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table584, "When ");
#line hidden
#line 484
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table585 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table585.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table585.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table585.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table585.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table585.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table585.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table585.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 485
 testRunner.And("the response body should contain:", ((string)(null)), table585, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-06-25T11:21:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today", null)]
        public virtual void PatchLearningProgressionWithDateLearningStarted(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with DateLearningStarted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 503
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table586 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table586.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table586.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table586.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table586.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table586.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table586.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table586.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 504
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table586, "Given ");
#line hidden
#line 513
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table587 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 514
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table587, "When ");
#line hidden
#line 516
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 517
 testRunner.And(string.Format("the response body should have {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table588 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table588.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table588.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table588.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table588.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table588.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table588.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 518
 testRunner.And("the response body should contain:", ((string)(null)), table588, "And ");
#line hidden
#line 527
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 528
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 529
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "dfgdf-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForDateLearningStarted(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for DateLearningStarted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 538
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table589 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table589.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table589.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table589.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table589.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table589.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table589.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table589.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 539
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table589, "Given ");
#line hidden
#line 548
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table590 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 549
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table590, "When ");
#line hidden
#line 551
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 552
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 553
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today +1D", "DateLearningStarted must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Now + 1H", "DateLearningStarted must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today +1Y", "DateLearningStarted must be less than or equal to now.", null)]
        public virtual void PatchLearningProgressionWithFutureValueForDateLearningStarted(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future value for DateLearningStarted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 564
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table591 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table591.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table591.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table591.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table591.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table591.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table591.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table591.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 565
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table591, "Given ");
#line hidden
#line 574
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table592 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 575
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table592, "When ");
#line hidden
#line 577
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 578
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 579
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "0", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PatchLearningProgressionWithCurrentQualificationLevel(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with CurrentQualificationLevel", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 591
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 592
 testRunner.Given("I want to set the scenario touchPointId header to 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table593 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table593.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table593.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table593.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table593.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table593.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table593.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table593.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 593
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table593, "Given ");
#line hidden
#line 602
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table594 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 603
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table594, "When ");
#line hidden
#line 605
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 606
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table595 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table595.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table595.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table595.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table595.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table595.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 607
 testRunner.And("the response body should contain:", ((string)(null)), table595, "And ");
#line hidden
#line 614
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 615
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 616
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 617
 testRunner.Given("I fetch a actions cosmos document from actions database using key ActionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 618
 testRunner.Then("the cosmos document should have property CreatedBy with value 9111111111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "-1", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "9", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "98", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "100", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForCurrentQualificationLevel(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for CurrentQualificationLevel", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 634
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table596 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table596.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table596.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table596.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table596.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table596.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table596.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table596.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 635
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table596, "Given ");
#line hidden
#line 644
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table597 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 645
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table597, "When ");
#line hidden
#line 647
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 648
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 649
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression to set CurrentQualificationLevel < 99 where there was " +
            "no previous value for CurrentQualificationLevel or DateQualificationLevelAchieve" +
            "d")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "8", null)]
        public virtual void PatchLearningProgressionToSetCurrentQualificationLevel99WhereThereWasNoPreviousValueForCurrentQualificationLevelOrDateQualificationLevelAchieved(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression to set CurrentQualificationLevel < 99 where there was " +
                    "no previous value for CurrentQualificationLevel or DateQualificationLevelAchieve" +
                    "d", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 659
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table598 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table598.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table598.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
                table598.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-07-23T11:21:00Z"});
                table598.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table598.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 660
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table598, "Given ");
#line hidden
#line 667
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table599 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 668
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table599, "When ");
#line hidden
#line 670
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 671
 testRunner.And("the response body should include DateQualificationLevelAchieved is required when " +
                        "QualificationLevel < NoQualification (99).", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 672
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-06-25T11:21:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today", null)]
        public virtual void PatchLearningProgressionWithDateQualificationLevelAchieved(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with DateQualificationLevelAchieved", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 683
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table600 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table600.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table600.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table600.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table600.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table600.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table600.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table600.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 684
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table600, "Given ");
#line hidden
#line 693
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table601 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 694
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table601, "When ");
#line hidden
#line 696
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table602 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table602.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table602.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table602.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table602.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table602.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table602.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 697
 testRunner.And("the response body should contain:", ((string)(null)), table602, "And ");
#line hidden
#line 706
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 707
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 708
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "sdfg-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForDateQualificationLevelAchieved(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for DateQualificationLevelAchieved", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 717
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table603 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table603.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table603.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table603.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table603.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table603.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table603.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table603.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 718
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table603, "Given ");
#line hidden
#line 727
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table604 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 728
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table604, "When ");
#line hidden
#line 730
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 731
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 732
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future value for DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today +1D", "DateQualificationLevelAchieved must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Now + 1H", "DateQualificationLevelAchieved must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today +1Y", "DateQualificationLevelAchieved must be less than or equal to now", null)]
        public virtual void PatchLearningProgressionWithFutureValueForDateQualificationLevelAchieved(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future value for DateQualificationLevelAchieved", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 743
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table605 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table605.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table605.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table605.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table605.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table605.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table605.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table605.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 744
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table605, "Given ");
#line hidden
#line 753
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table606 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 754
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table606, "When ");
#line hidden
#line 756
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 757
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 758
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LastLearningProvidersUKPRN")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "10000000", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "10000001", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "51234567", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "99999998", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "99999999", null)]
        public virtual void PatchLearningProgressionWithLastLearningProvidersUKPRN(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LastLearningProvidersUKPRN", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 770
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table607 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table607.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table607.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table607.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table607.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table607.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table607.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table607.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 771
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table607, "Given ");
#line hidden
#line 780
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table608 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 781
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table608, "When ");
#line hidden
#line 783
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 784
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table609 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table609.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table609.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table609.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table609.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table609.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
#line 785
 testRunner.And("the response body should contain:", ((string)(null)), table609, "And ");
#line hidden
#line 793
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 794
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 795
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid LastLearningProvidersUKPRN")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "9999999", "The field LastLearningProvidersUKPRN must be a string with a minimum length of 8 " +
            "and a maximum length of 8", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "1", "The field LastLearningProvidersUKPRN must be a string with a minimum length of 8 " +
            "and a maximum length of 8.", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "1234567A", "LastLearningProvidersUKPRN must be a Number", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "abcdefgh", "LastLearningProvidersUKPRN must be a Number", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "100000000", "The field LastLearningProvidersUKPRN must be a string with a minimum length of 8 " +
            "and a maximum length of 8", "1", null)]
        public virtual void PatchLearningProgressionWithInvalidLastLearningProvidersUKPRN(string field, string value, string errorMessage, string errorCount, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            argumentsOfScenario.Add("ErrorCount", errorCount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid LastLearningProvidersUKPRN", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 805
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table610 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table610.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table610.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table610.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table610.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table610.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table610.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table610.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 806
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table610, "Given ");
#line hidden
#line 815
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table611 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 816
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table611, "When ");
#line hidden
#line 818
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 819
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 820
 testRunner.And(string.Format("the number of errors returned should be {0}", errorCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression no value for LastLearningProvidersUKPRN")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "", null)]
        public virtual void PatchLearningProgressionNoValueForLastLearningProvidersUKPRN(string field, string value, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression no value for LastLearningProvidersUKPRN", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 830
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table612 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table612.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table612.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table612.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table612.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table612.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table612.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table612.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 831
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table612, "Given ");
#line hidden
#line 840
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 841
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table613 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 842
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table613, "When ");
#line hidden
#line 844
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table614 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table614.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table614.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table614.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table614.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table614.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table614.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table614.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 845
 testRunner.Then("the response body should contain:", ((string)(null)), table614, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2019-06-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "now", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "now + 1Hour", null)]
        public virtual void PatchLearningProgressionWithLastModifiedDate(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LastModifiedDate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 863
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table615 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table615.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table615.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table615.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table615.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table615.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table615.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table615.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 864
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table615, "Given ");
#line hidden
#line 873
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table616 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 874
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table616, "When ");
#line hidden
#line 876
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table617 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table617.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table617.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table617.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table617.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table617.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table617.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table617.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 877
 testRunner.And("the response body should contain:", ((string)(null)), table617, "And ");
#line hidden
#line 887
 testRunner.Given("I wait for 10 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 888
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "sdrg-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForLastModifiedDate(string field, string date, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Date", date);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for LastModifiedDate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 897
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table618 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table618.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table618.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table618.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table618.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table618.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table618.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table618.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 898
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table618, "Given ");
#line hidden
#line 907
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To <Value>", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table619 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
#line 908
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table619, "When ");
#line hidden
#line 910
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 911
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 912
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch to Learning Progression received from another touchpoint")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchToLearningProgressionReceivedFromAnotherTouchpoint()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch to Learning Progression received from another touchpoint", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 926
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table620 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table620.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table620.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table620.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table620.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table620.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table620.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table620.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 927
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table620, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table621 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table621.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "1"});
#line 937
 testRunner.When("I patch the following LearningProgression V3:", ((string)(null)), table621, "When ");
#line hidden
#line 940
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 941
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table622 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table622.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "1"});
#line 943
 testRunner.And("the response body should contain:", ((string)(null)), table622, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
