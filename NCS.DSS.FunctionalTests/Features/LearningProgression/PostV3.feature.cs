// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.LearningProgression
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LearningProgression_Post")]
    public partial class LearningProgression_PostFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV3.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/LearningProgression", "LearningProgression_Post", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table818 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table818.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table818.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details V2:", ((string)(null)), table818, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table819 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table819.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table819.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
            table819.AddRow(new string[] {
                        "PriorityGroups",
                        "1,3"});
#line 8
 testRunner.And("I post a Customer with the following details V3:", ((string)(null)), table819, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with all values")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostLearningProgressionWithAllValues()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with all values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table820 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table820.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table820.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table820.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table820.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table820.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table820.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table820.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 16
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table820, "Given ");
#line hidden
#line 25
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table821 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table821.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-25T11:21:00Z"});
                table821.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table821.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table821.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-25T11:21:00Z"});
                table821.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "2"});
                table821.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-07-25T11:21:00Z"});
                table821.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "12345678"});
#line 26
 testRunner.And("the response body should contain:", ((string)(null)), table821, "And ");
#line hidden
#line 36
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with all mandatory values")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-06-19T09:01:00Z", null)]
        public virtual void PostLearningProgressionWithAllMandatoryValues(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with all mandatory values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table822 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table822.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-06-25T11:21:00Z"});
                table822.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table822.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 42
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table822, "Given ");
#line hidden
#line 47
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table823 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table823.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-06-25T11:21:00Z"});
                table823.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table823.AddRow(new string[] {
                            "LearningHours",
                            ""});
                table823.AddRow(new string[] {
                            "DateLearningStarted",
                            ""});
                table823.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table823.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            ""});
                table823.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            ""});
#line 48
 testRunner.And("the response body should contain:", ((string)(null)), table823, "And ");
#line hidden
#line 58
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression supplying LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today", null)]
        public virtual void PostLearningProgressionSupplyingLastModifiedDate(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression supplying LastModifiedDate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 68
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table824 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table824.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-12-19T09:01:00Z"});
                table824.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table824.AddRow(new string[] {
                            "DateLearningStarted",
                            "Today"});
                table824.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table824.AddRow(new string[] {
                            "LastModifiedDate",
                            "2019-06-19T09:01:00Z"});
#line 69
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table824, "Given ");
#line hidden
#line 76
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table825 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table825.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-12-19T09:01:00Z"});
                table825.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table825.AddRow(new string[] {
                            "LearningHours",
                            ""});
                table825.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table825.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            ""});
                table825.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            ""});
                table825.AddRow(new string[] {
                            "LastModifiedDate",
                            "2019-06-19T09:01:00Z"});
#line 77
 testRunner.And("the response body should contain:", ((string)(null)), table825, "And ");
#line hidden
#line 87
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 89
 testRunner.Then("there should be a record in the dss-learningprogressions table with LearningProgr" +
                        "essionId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with valid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-12-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now", null)]
        public virtual void PostLearningProgressionWithValidValuesForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with valid values for DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 97
 testRunner.Given(string.Format("I want to send {0} with value Translate Date To {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
 testRunner.Given("I want to send DateLearningStarted with value Translate Date To Today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table826 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table826.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table826.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table826.AddRow(new string[] {
                            "LastModifiedDate",
                            "2019-06-19T09:01:00Z"});
#line 99
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table826, "Given ");
#line hidden
#line 104
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table827 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table827.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table827.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table827.AddRow(new string[] {
                            "LastModifiedDate",
                            "2019-06-19T09:01:00Z"});
#line 105
 testRunner.And("the response body should contain:", ((string)(null)), table827, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with valid values for CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PostLearningProgressionWithValidValuesForCurrentLearningStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with valid values for CurrentLearningStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 119
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table828 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table828.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-06-19T09:01:00Z"});
                table828.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table828.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table828.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-19T09:01:00Z"});
#line 120
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table828, "Given ");
#line hidden
#line 126
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table829 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table829.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2019-06-19T09:01:00Z"});
                table829.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table829.AddRow(new string[] {
                            "DateLearningStarted",
                            "2019-06-19T09:01:00Z"});
                table829.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 127
 testRunner.And("the response body should contain:", ((string)(null)), table829, "And ");
#line hidden
#line 133
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with valid values for LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "2", null)]
        public virtual void PostLearningProgressionWithValidValuesForLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with valid values for LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 145
 testRunner.Given("I want to send DateLearningStarted with value Translate Date To Today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 146
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table830 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table830.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-12-19T09:01:00Z"});
                table830.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table830.AddRow(new string[] {
                            "DateLearningStarted",
                            "Today"});
                table830.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table830.AddRow(new string[] {
                            "LastModifiedDate",
                            "2019-06-19T09:01:00Z"});
#line 147
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table830, "Given ");
#line hidden
#line 154
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table831 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table831.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-12-19T09:01:00Z"});
                table831.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table831.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table831.AddRow(new string[] {
                            "LastModifiedDate",
                            "2019-06-19T09:01:00Z"});
#line 155
 testRunner.And("the response body should contain:", ((string)(null)), table831, "And ");
#line hidden
#line 161
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with valid values for CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "0", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "99", null)]
        public virtual void PostLearningProgressionWithValidValuesForCurrentQualificationLevel(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with valid values for CurrentQualificationLevel", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 169
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 170
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table832 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table832.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table832.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table832.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-06-19T09:01:00Z"});
#line 171
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table832, "Given ");
#line hidden
#line 176
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table833 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table833.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table833.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table833.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            "2019-06-19T09:01:00Z"});
#line 177
 testRunner.And("the response body should contain:", ((string)(null)), table833, "And ");
#line hidden
#line 182
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with valid values for LastLearningProvidersUKPRN")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "10000000", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "12345678", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "54123234", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "99999999", null)]
        public virtual void PostLearningProgressionWithValidValuesForLastLearningProvidersUKPRN(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with valid values for LastLearningProvidersUKPRN", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 198
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 199
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table834 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table834.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table834.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table834.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 200
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table834, "Given ");
#line hidden
#line 205
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table835 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table835.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table835.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table835.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 206
 testRunner.And("the response body should contain:", ((string)(null)), table835, "And ");
#line hidden
#line 211
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with no value for LastLearningProvidersUKPRN")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithNoValueForLastLearningProvidersUKPRN()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with no value for LastLearningProvidersUKPRN", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 221
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 222
 testRunner.Given("I want to send <Field> with value <Value> in the following request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table836 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table836.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table836.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table836.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 223
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table836, "Given ");
#line hidden
#line 228
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table837 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table837.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table837.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table837.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table837.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            ""});
#line 229
 testRunner.And("the response body should contain:", ((string)(null)), table837, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with invalid value for LastLearningProvidersUKPRN")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "9999999", "The field LastLearningProvidersUKPRN must be a string with a minimum length of 8 " +
            "and a maximum length of 8.", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "100000000", "The field LastLearningProvidersUKPRN must be a string with a minimum length of 8 " +
            "and a maximum length of 8.", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "a", "LastLearningProvidersUKPRN must be a Number.", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "a1234567", "LastLearningProvidersUKPRN must be a Number.", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "sausages", "LastLearningProvidersUKPRN must be a Number.", null)]
        public virtual void PostLearningProgressionWithInvalidValueForLastLearningProvidersUKPRN(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with invalid value for LastLearningProvidersUKPRN", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 237
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 238
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 239
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table838 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table838.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table838.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 240
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table838, "Given ");
#line hidden
#line 244
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 245
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with invalid values for  CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "0", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "4", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "97", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "100", "CurrentLearningStatus must be a valid current Learning Status", null)]
        public virtual void PostLearningProgressionWithInvalidValuesForCurrentLearningStatus(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with invalid values for  CurrentLearningStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 256
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 257
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table839 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table839.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table839.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 258
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table839, "Given ");
#line hidden
#line 262
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 263
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with invalid values for  CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "-1", "CurrentQualificationLevel must be a valid current Qualification Level.", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "9", "CurrentQualificationLevel must be a valid current Qualification Level.", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "98", "CurrentQualificationLevel must be a valid current Qualification Level.", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "100", "CurrentQualificationLevel must be a valid current Qualification Level.", null)]
        public virtual void PostLearningProgressionWithInvalidValuesForCurrentQualificationLevel(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with invalid values for  CurrentQualificationLevel", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 289
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 290
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table840 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table840.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table840.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
#line 291
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table840, "Given ");
#line hidden
#line 295
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 296
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with invalid dates")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "018-0g-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PostLearningProgressionWithInvalidDates(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with invalid dates", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 306
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 307
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table841 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table841.AddRow(new string[] {
                            "DateProgressionRecorded",
                            "2018-06-19T09:01:00Z"});
                table841.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table841.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 308
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table841, "Given ");
#line hidden
#line 313
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 314
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future timestamped value for DateProgressionRecord" +
            "ed")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureTimestampedValueForDateProgressionRecorded()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future timestamped value for DateProgressionRecord" +
                    "ed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 329
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 330
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now +1H", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table842 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table842.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table842.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 331
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table842, "Given ");
#line hidden
#line 335
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 336
 testRunner.And("the error message should be \"DateProgressionRecorded must be less than or equal t" +
                        "o now\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 337
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future dated value for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureDatedValueForDateProgressionRecorded()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future dated value for DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 340
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 341
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now +1D", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table843 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table843.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table843.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "1"});
#line 342
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table843, "Given ");
#line hidden
#line 346
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 347
 testRunner.And("the response body should include DateProgressionRecorded must be less than or equ" +
                        "al to now.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future timestamped value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureTimestampedValueForDateLearningStarted()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future timestamped value for DateLearningStarted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 350
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 351
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 352
 testRunner.Given("I want to send DateLearningStarted with value Translate Date To Now + 1H", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table844 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table844.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "2"});
                table844.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "1"});
#line 353
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table844, "Given ");
#line hidden
#line 357
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 358
 testRunner.And("the response body should include DateLearningStarted must be less than or equal t" +
                        "o now.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future dated value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureDatedValueForDateLearningStarted()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future dated value for DateLearningStarted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 361
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 362
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 363
 testRunner.Given("I want to send DateLearningStarted with value Translate Date To Now +1D", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table845 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table845.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "3"});
                table845.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 364
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table845, "Given ");
#line hidden
#line 368
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 369
 testRunner.And("the response body should include DateLearningStarted must be less than or equal t" +
                        "o now.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future timestamped value for DateQualificationLeve" +
            "lAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureTimestampedValueForDateQualificationLevelAchieved()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future timestamped value for DateQualificationLeve" +
                    "lAchieved", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 372
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 373
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 374
 testRunner.Given("I want to send DateQualificationLevelAchieved with value Translate Date To Now +1" +
                        "H", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table846 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table846.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "3"});
                table846.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "1"});
#line 375
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table846, "Given ");
#line hidden
#line 379
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 380
 testRunner.And("the response body should include DateQualificationLevelAchieved must be less than" +
                        " or equal to now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future dated value for DateQualificationLevelAchie" +
            "ved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureDatedValueForDateQualificationLevelAchieved()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future dated value for DateQualificationLevelAchie" +
                    "ved", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 383
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 384
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 385
 testRunner.Given("I want to send DateQualificationLevelAchieved with value Translate Date To Now +1" +
                        "D", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table847 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table847.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "2"});
                table847.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "1"});
#line 386
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table847, "Given ");
#line hidden
#line 390
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 391
 testRunner.And("the response body should include DateQualificationLevelAchieved must be less than" +
                        " or equal to now.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with In Learning status and no value for LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithInLearningStatusAndNoValueForLearningHours()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with In Learning status and no value for LearningHours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 394
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 395
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 396
 testRunner.Given("I want to send DateLearningStarted with value Translate Date To Today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table848 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table848.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table848.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
#line 397
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table848, "Given ");
#line hidden
#line 401
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 402
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                        "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 403
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with In Learning status and invalid value for LearningH" +
            "ours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithInLearningStatusAndInvalidValueForLearningHours()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with In Learning status and invalid value for LearningH" +
                    "ours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 406
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 407
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 408
 testRunner.Given("I want to send DateLearningStarted with value Translate Date To Today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table849 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table849.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table849.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table849.AddRow(new string[] {
                            "LearningHours",
                            "93"});
#line 409
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table849, "Given ");
#line hidden
#line 414
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 415
 testRunner.And("the response body should include LearningHours must have a valid Learning Hours v" +
                        "alue.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with In Learning status and no value for DateLearningSt" +
            "arted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithInLearningStatusAndNoValueForDateLearningStarted()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with In Learning status and no value for DateLearningSt" +
                    "arted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 418
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 419
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table850 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table850.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table850.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table850.AddRow(new string[] {
                            "LearningHours",
                            "1"});
                table850.AddRow(new string[] {
                            "DateLearningStarted",
                            ""});
#line 420
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table850, "Given ");
#line hidden
#line 426
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 427
 testRunner.And("the error message should be \"DateLearningStarted must have a value when Current L" +
                        "earning Status is InLearning\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 428
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with In Learning status and future value for DateLearni" +
            "ngStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithInLearningStatusAndFutureValueForDateLearningStarted()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with In Learning status and future value for DateLearni" +
                    "ngStarted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 431
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 432
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 433
 testRunner.Given("I want to send DateLearningStarted with value Translate Date To Now +1H", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table851 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table851.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "1"});
                table851.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table851.AddRow(new string[] {
                            "LearningHours",
                            "1"});
#line 434
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table851, "Given ");
#line hidden
#line 439
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 440
 testRunner.And("the response body should include DateLearningStarted must be less than or equal t" +
                        "o now.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with a Current Qualification and no value for DateQuali" +
            "ficationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithACurrentQualificationAndNoValueForDateQualificationLevelAchieved()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with a Current Qualification and no value for DateQuali" +
                    "ficationLevelAchieved", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 443
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 444
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table852 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table852.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table852.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "1"});
                table852.AddRow(new string[] {
                            "DateQualificationLevelAchieved",
                            ""});
#line 445
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table852, "Given ");
#line hidden
#line 450
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 451
 testRunner.And("the response body should include DateQualificationLevelAchieved is required when " +
                        "QualificationLevel < NoQualification (99).", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with a Current Qualification and future value for DateQ" +
            "ualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithACurrentQualificationAndFutureValueForDateQualificationLevelAchieved()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with a Current Qualification and future value for DateQ" +
                    "ualificationLevelAchieved", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 454
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 455
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 456
 testRunner.Given("I want to send DateQualificationLevelAchieved with value Translate Date To Now +1" +
                        "H", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table853 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table853.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table853.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "8"});
#line 457
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table853, "Given ");
#line hidden
#line 461
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 462
 testRunner.And("the response body should include DateQualificationLevelAchieved must be less than" +
                        " or equal to now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression missing CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionMissingCurrentLearningStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression missing CurrentLearningStatus", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 465
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 466
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 467
 testRunner.Given("I want to send DateLearningStarted with value Translate Date To Today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table854 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table854.AddRow(new string[] {
                            "CurrentLearningStatus",
                            ""});
                table854.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table854.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "00000000"});
#line 468
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table854, "Given ");
#line hidden
#line 473
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 474
 testRunner.And("the response body should include The CurrentLearningStatus field is required", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression missing CurrentQualification")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionMissingCurrentQualification()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression missing CurrentQualification", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 477
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 478
 testRunner.Given("I want to send DateProgressionRecorded with value Translate Date To Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 479
 testRunner.Given("I want to send DateLearningStarted with value Translate Date To Today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table855 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table855.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table855.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            ""});
                table855.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "00000000"});
#line 480
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table855, "Given ");
#line hidden
#line 485
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 486
 testRunner.And("the response body should include The CurrentQualificationLevel field is required." +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression missing DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionMissingDateProgressionRecorded()
        {
            string[] tagsOfScenario = new string[] {
                    "learningprogressions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression missing DateProgressionRecorded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 489
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 490
 testRunner.Given("I want to send DateLearningStarted with value Translate Date To Today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table856 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table856.AddRow(new string[] {
                            "DateProgressionRecorded",
                            ""});
                table856.AddRow(new string[] {
                            "CurrentLearningStatus",
                            "99"});
                table856.AddRow(new string[] {
                            "CurrentQualificationLevel",
                            "99"});
                table856.AddRow(new string[] {
                            "LastLearningProvidersUKPRN",
                            "00000000"});
#line 491
 testRunner.Given("I post a Learning Progression record with the following details V3:", ((string)(null)), table856, "Given ");
#line hidden
#line 497
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 498
 testRunner.And("the date field DateProgressionRecorded should hold a recent value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
