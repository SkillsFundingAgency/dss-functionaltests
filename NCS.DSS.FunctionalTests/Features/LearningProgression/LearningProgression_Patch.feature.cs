// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.LearningProgression
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LearningProgression_Patch")]
    [NUnit.Framework.CategoryAttribute("patchV2")]
    public partial class LearningProgression_PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LearningProgression_Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LearningProgression_Patch", null, ProgrammingLanguage.CSharp, new string[] {
                        "patchV2"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table1.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 6
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table2.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 10
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table3.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table3.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table3.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 14
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table3, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with  all values")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchLearningProgressionWithAllValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with  all values", null, new string[] {
                        "LearningProgression",
                        "smoke"});
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table4.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table4.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table4.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table4.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table4.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table4.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table4.AddRow(new string[] {
                        "LastModifiedDate",
                        "2019-07-25T11:21:00Z"});
#line 26
 testRunner.When("I patch the following:", ((string)(null)), table4, "When ");
#line 36
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.And("the response body should have <Field> with value <Value>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table5.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table5.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table5.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table5.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table5.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table5.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 38
 testRunner.And("the response body should contain:", ((string)(null)), table5, "And ");
#line 46
 testRunner.And("the \"learningprogression\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with SubcontractorId")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.CategoryAttribute("SubcontractorId")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2019-06-19T09:01:00Z", null)]
        public virtual void PatchLearningProgressionWithSubcontractorId(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression",
                    "SubcontractorId"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with SubcontractorId", null, @__tags);
#line 54
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 56
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table6.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table6.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table6.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table6.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table6.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table6.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 59
 testRunner.And("the response body should contain:", ((string)(null)), table6, "And ");
#line 67
 testRunner.And("the \"learningprogression\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.And("the response body should contain the SubContractorId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with valid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2019-06-19T09:01:00Z", null)]
        public virtual void PatchLearningProgressionWithValidValuesForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with valid values for DateProgressionRecorded", null, @__tags);
#line 82
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 83
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table7.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table7.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table7.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table7.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table7.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table7.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 86
 testRunner.And("the response body should contain:", ((string)(null)), table7, "And ");
#line 94
 testRunner.And("the \"learningprogression\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "018-06-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-00-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-13-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-00T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-32T09:01:00Z", "placeholder", null)]
        public virtual void PatchLearningProgressionWithInvalidDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid DateProgressionRecorded", null, @__tags);
#line 104
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 106
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
 testRunner.And("the response body should include <ErrorMessage>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future dated DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1D", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now + 1H", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1Y", "placeholder", null)]
        public virtual void PatchLearningProgressionWithFutureDatedDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future dated DateProgressionRecorded", null, @__tags);
#line 120
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 122
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
 testRunner.And("the response body should include <ErrorMessage>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "", null)]
        public virtual void PatchLearningProgressionWithEmptyDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty DateProgressionRecorded", null, @__tags);
#line 135
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 136
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 138
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table8.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table8.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table8.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table8.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table8.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table8.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 139
 testRunner.And("the response body should contain:", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PatchLearningProgressionWithCurrentLearningStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with CurrentLearningStatus", null, @__tags);
#line 158
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 159
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 160
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 161
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table9.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table9.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table9.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table9.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table9.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 162
 testRunner.And("the response body should contain:", ((string)(null)), table9, "And ");
#line 170
 testRunner.And("the \"learningprogression\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "-1", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "0", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "4", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "97", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "100", "placeholder", null)]
        public virtual void PatchLearningProgressionWithInvalidCurrentLearningStatus(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid CurrentLearningStatus", null, @__tags);
#line 186
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 188
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 189
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 190
 testRunner.And("the response body should include <ErrorMessage>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
 testRunner.And("the \"learningprogression\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "2", null)]
        public virtual void PatchLearningProgressionWithEmptyCurrentLearningStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty CurrentLearningStatus", null, @__tags);
#line 206
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 207
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 208
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table10.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table10.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table10.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table10.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table10.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table10.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 209
 testRunner.And("the response body should contain:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
            "o previous value for CurrentLearningStatus or LearningHours")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "2", "PlaceHolder", null)]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusWhereThereWasNoPreviousValueForCurrentLearningStatusOrLearningHours(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
                    "o previous value for CurrentLearningStatus or LearningHours", null, @__tags);
#line 224
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table11.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table11.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table11.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 225
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table11, "Given ");
#line 231
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 232
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 233
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted where there was no previous value for CurrentLearningStatus or LearningHo" +
            "urs")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedWhereThereWasNoPreviousValueForCurrentLearningStatusOrLearningHours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted where there was no previous value for CurrentLearningStatus or LearningHo" +
                    "urs", null, new string[] {
                        "LearningProgression"});
#line 240
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table12.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table12.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-24T11:21:00Z"});
            table12.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table12.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-23T11:21:00Z"});
#line 242
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table13.AddRow(new string[] {
                        "LearningHours",
                        "1"});
#line 249
 testRunner.When("I patch the following:", ((string)(null)), table13, "When ");
#line 253
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 254
 testRunner.And("the response body should include \"Place Holder\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
            "o previous value for CurrentLearningStatus or DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusWhereThereWasNoPreviousValueForCurrentLearningStatusOrDateLearningStarted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
                    "o previous value for CurrentLearningStatus or DateLearningStarted", null, new string[] {
                        "LearningProgression"});
#line 257
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table14.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table14.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-24T11:21:00Z"});
            table14.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table14.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-23T11:21:00Z"});
#line 258
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
#line 265
 testRunner.When("I patch the following:", ((string)(null)), table15, "When ");
#line 269
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 270
 testRunner.And("the response body should include \"Place Holder\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted where there was no previous value for CurrentLearningStatus or DateLearni" +
            "ngStarted or LearningHours")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedWhereThereWasNoPreviousValueForCurrentLearningStatusOrDateLearningStartedOrLearningHours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted where there was no previous value for CurrentLearningStatus or DateLearni" +
                    "ngStarted or LearningHours", null, new string[] {
                        "LearningProgression"});
#line 273
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table16.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table16.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-24T11:21:00Z"});
            table16.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 274
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table17.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-23T11:21:00Z"});
#line 281
 testRunner.When("I patch the following:", ((string)(null)), table17, "When ");
#line 286
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 287
 testRunner.And("the response body should include \"Place Holder\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
            "o previous value for CurrentLearningStatus, DateLearningStarted or LearningHours" +
            "")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusWhereThereWasNoPreviousValueForCurrentLearningStatusDateLearningStartedOrLearningHours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
                    "o previous value for CurrentLearningStatus, DateLearningStarted or LearningHours" +
                    "", null, new string[] {
                        "LearningProgression"});
#line 290
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table18.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table18.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-24T11:21:00Z"});
            table18.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 291
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table18, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
#line 298
 testRunner.When("I patch the following:", ((string)(null)), table19, "When ");
#line 302
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 303
 testRunner.And("the response body should include \"Place Holder\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted AND LearningHours where there was no previous value for CurrentLearningSt" +
            "atus, DateLearningStarted or LearningHours")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedANDLearningHoursWhereThereWasNoPreviousValueForCurrentLearningStatusDateLearningStartedOrLearningHours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted AND LearningHours where there was no previous value for CurrentLearningSt" +
                    "atus, DateLearningStarted or LearningHours", null, new string[] {
                        "LearningProgression"});
#line 306
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table20.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table20.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-24T11:21:00Z"});
            table20.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 308
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table21.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-24T11:21:00Z"});
            table21.AddRow(new string[] {
                        "LearningHours",
                        "2"});
#line 315
 testRunner.When("I patch the following:", ((string)(null)), table21, "When ");
#line 321
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 322
 testRunner.And("the response body should include \"Place Holder\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LearningHours")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "2", null)]
        public virtual void PatchLearningProgressionWithLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LearningHours", null, @__tags);
#line 332
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 333
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 334
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 335
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table22.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table22.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table22.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table22.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table22.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 336
 testRunner.And("the response body should contain:", ((string)(null)), table22, "And ");
#line 344
 testRunner.And("the \"learningprogression\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 346
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 347
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid LearningHours")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "-1", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "0", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "3", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "99", "placeholder", null)]
        public virtual void PatchLearningProgressionWithInvalidLearningHours(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid LearningHours", null, @__tags);
#line 356
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 358
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 359
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 360
 testRunner.And("the response body should include <ErrorMessage>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty LearningHours")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "", null)]
        public virtual void PatchLearningProgressionWithEmptyLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty LearningHours", null, @__tags);
#line 372
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 374
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 375
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table23.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table23.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table23.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table23.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table23.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table23.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 376
 testRunner.And("the response body should contain:", ((string)(null)), table23, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-06-25T11:21:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today", null)]
        public virtual void PatchLearningProgressionWithDateLearningStarted(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with DateLearningStarted", null, @__tags);
#line 395
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 396
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 397
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 398
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table24.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table24.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table24.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table24.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table24.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table24.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 399
 testRunner.And("the response body should contain:", ((string)(null)), table24, "And ");
#line 408
 testRunner.And("the \"learningprogression\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 409
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 410
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 411
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "018-06-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-00-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-13-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-00T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-32T09:01:00Z", "placeholder", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForDateLearningStarted(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for DateLearningStarted", null, @__tags);
#line 421
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 422
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 423
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 424
 testRunner.And("the response body should include <ErrorMessage>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today +1D", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Now + 1H", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today +1Y", "placeholder", null)]
        public virtual void PatchLearningProgressionWithFutureValueForDateLearningStarted(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future value for DateLearningStarted", null, @__tags);
#line 435
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 437
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 438
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 439
 testRunner.And("the response body should include <ErrorMessage>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "0", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PatchLearningProgressionWithCurrentQualificationLevel(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with CurrentQualificationLevel", null, @__tags);
#line 452
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 454
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 455
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 456
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table25.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table25.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table25.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table25.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 457
 testRunner.And("the response body should contain:", ((string)(null)), table25, "And ");
#line 464
 testRunner.And("the \"learningprogression\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 465
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 466
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 467
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "-1", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "9", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "98", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "100", "placeholder", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForCurrentQualificationLevel(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for CurrentQualificationLevel", null, @__tags);
#line 483
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 485
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 486
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 487
 testRunner.And("the response body should include <ErrorMessage>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentQualificationLevel where there w" +
            "as no previous value for CurrentQualificationLevel or DateQualificationLevelAchi" +
            "eved")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        public virtual void PatchLearningProgressionWithValueForCurrentQualificationLevelWhereThereWasNoPreviousValueForCurrentQualificationLevelOrDateQualificationLevelAchieved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentQualificationLevel where there w" +
                    "as no previous value for CurrentQualificationLevel or DateQualificationLevelAchi" +
                    "eved", null, new string[] {
                        "LearningProgression"});
#line 497
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table26.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table26.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-23T11:21:00Z"});
#line 499
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table26, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table27.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
#line 504
 testRunner.When("I patch the following:", ((string)(null)), table27, "When ");
#line 507
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 508
 testRunner.And("the response body should include \"Place Holder\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-06-25T11:21:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today", null)]
        public virtual void PatchLearningProgressionWithDateQualificationLevelAchieved(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with DateQualificationLevelAchieved", null, @__tags);
#line 515
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 516
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 517
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 518
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table28.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table28.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table28.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table28.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table28.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table28.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 519
 testRunner.And("the response body should contain:", ((string)(null)), table28, "And ");
#line 528
 testRunner.And("the \"learningprogression\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 529
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 530
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 531
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "018-06-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-00-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-13-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-05-00T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-05-32T09:01:00Z", "placeholder", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForDateQualificationLevelAchieved(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for DateQualificationLevelAchieved", null, @__tags);
#line 541
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 542
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 543
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 544
 testRunner.And("the response body should include <ErrorMessage>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future value for DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today +1D", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Now + 1H", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today +1Y", "placeholder", null)]
        public virtual void PatchLearningProgressionWithFutureValueForDateQualificationLevelAchieved(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future value for DateQualificationLevelAchieved", null, @__tags);
#line 555
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 557
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 558
 testRunner.Then("there should be a 403 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 559
 testRunner.And("the response body should include <ErrorMessage>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LastLearningProvidersUKPRN")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "10000000", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "10000001", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "51234567", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99999998", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99999999", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "", null)]
        public virtual void PatchLearningProgressionWithLastLearningProvidersUKPRN(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LastLearningProvidersUKPRN", null, @__tags);
#line 574
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 576
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 577
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 578
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table29.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table29.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table29.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table29.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table29.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
#line 579
 testRunner.And("the response body should contain:", ((string)(null)), table29, "And ");
#line 586
 testRunner.And("the \"learningprogression\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 587
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 588
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 589
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid LastLearningProvidersUKPRN")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "00000001", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "9999999", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "1", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "1234567A", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "abcdefgh", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "100000000", "placeholder", null)]
        public virtual void PatchLearningProgressionWithInvalidLastLearningProvidersUKPRN(string field, string value, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid LastLearningProvidersUKPRN", null, exampleTags);
#line 601
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 603
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 604
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 605
 testRunner.And("the response body should include <ErrorMessage>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2019-06-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "Now + 1", null)]
        public virtual void PatchLearningProgressionWithLastModifiedDate(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LastModifiedDate", null, @__tags);
#line 622
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 623
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 624
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 625
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table30.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table30.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table30.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table30.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table30.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table30.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 626
 testRunner.And("the response body should contain:", ((string)(null)), table30, "And ");
#line 634
 testRunner.And("the \"learningprogression\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 635
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 636
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 637
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "018-06-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-00-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-13-19T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-05-00T09:01:00Z", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-05-32T09:01:00Z", "placeholder", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForLastModifiedDate(string field, string date, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for LastModifiedDate", null, @__tags);
#line 647
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 648
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 649
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 650
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch to Learning Progression received from another touchpoint")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        public virtual void PatchToLearningProgressionReceivedFromAnotherTouchpoint()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch to Learning Progression received from another touchpoint", null, new string[] {
                        "LearningProgression"});
#line 665
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
#line 667
  testRunner.When("I patch the following via a different touchpoint", ((string)(null)), table31, "When ");
#line 670
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 671
  testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 672
  testRunner.And("the response body should have different LastUpdatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table32.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
#line 673
  testRunner.And("the response body should contain:", ((string)(null)), table32, "And ");
#line 676
  testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 677
  testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for LastModifiedTouchpointID")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedTouchpointID", "99999999", null)]
        public virtual void PatchLearningProgressionWithValueForLastModifiedTouchpointID(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for LastModifiedTouchpointID", null, @__tags);
#line 681
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 682
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 683
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 684
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table33.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table33.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table33.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table33.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table33.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table33.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table33.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 685
 testRunner.And("the response body should contain:", ((string)(null)), table33, "And ");
#line 694
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 695
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CreatedBy")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("CreatedBy", "99999999", null)]
        public virtual void PatchLearningProgressionWithValueForCreatedBy(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CreatedBy", null, @__tags);
#line 702
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 703
 testRunner.When(string.Format("I patch the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 704
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 705
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table34.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table34.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table34.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table34.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table34.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table34.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table34.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 706
 testRunner.And("the response body should contain:", ((string)(null)), table34, "And ");
#line 715
 testRunner.And("there should be a record in the learningprogression ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 716
 testRunner.And("there should be a record in the learningprogression-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch unknown Learning Progression record")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "1", "PlaceHolder", null)]
        public virtual void PatchUnknownLearningProgressionRecord(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch unknown Learning Progression record", null, @__tags);
#line 723
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 725
 testRunner.When(string.Format("I patch an unknown resource with the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 726
 testRunner.Then("there should be a 204 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 727
 testRunner.And(string.Format("the response body should contain {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression record with incorrect CustomerId")]
        [NUnit.Framework.CategoryAttribute("LearningProgression")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "1", "PlaceHolder", null)]
        public virtual void PatchLearningProgressionRecordWithIncorrectCustomerId(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LearningProgression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression record with incorrect CustomerId", null, @__tags);
#line 734
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 736
 testRunner.When(string.Format("I patch an unknown resource with the element {0} with <value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 737
 testRunner.Then("there should be a 204 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 738
 testRunner.And(string.Format("the response body should contain {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

