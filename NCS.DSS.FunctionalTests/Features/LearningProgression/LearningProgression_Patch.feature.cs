// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.LearningProgression
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LearningProgression_Patch")]
    [NUnit.Framework.CategoryAttribute("postV3")]
    [NUnit.Framework.CategoryAttribute("patchV3")]
    public partial class LearningProgression_PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LearningProgression_Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LearningProgression_Patch", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV3",
                        "patchV3"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table1.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 6
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table2.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 10
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with  all values")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchLearningProgressionWithAllValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with  all values", null, new string[] {
                        "learningprogressions",
                        "smoke"});
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table3.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table3.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table3.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 26
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table4.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table4.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table4.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table4.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table4.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table4.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table4.AddRow(new string[] {
                        "LastModifiedDate",
                        "2019-07-25T11:21:00Z"});
#line 35
 testRunner.When("I patch the following:", ((string)(null)), table4, "When ");
#line 45
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table5.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table5.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table5.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table5.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table5.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table5.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 47
 testRunner.And("the response body should contain:", ((string)(null)), table5, "And ");
#line 56
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with valid values for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2019-06-19T09:01:00Z", null)]
        public virtual void PatchLearningProgressionWithValidValuesForDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with valid values for DateProgressionRecorded", null, @__tags);
#line 92
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table6.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table6.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table6.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table6.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table6.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 93
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table6, "Given ");
#line 101
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 103
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table7.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table7.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table7.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table7.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table7.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 104
 testRunner.And("the response body should contain:", ((string)(null)), table7, "And ");
#line 112
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "gtfr-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid DateProgressionRecorded", null, @__tags);
#line 122
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table8.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table8.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table8.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table8.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table8.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table8.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 124
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table8, "Given ");
#line 133
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 134
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 135
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future dated DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1D", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Now + 1H", "DateProgressionRecorded must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "Today +1Y", "DateProgressionRecorded must be less than or equal to now.", null)]
        public virtual void PatchLearningProgressionWithFutureDatedDateProgressionRecorded(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future dated DateProgressionRecorded", null, @__tags);
#line 148
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table9.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table9.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table9.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table9.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table9.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table9.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 150
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table9, "Given ");
#line 159
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 160
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 161
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 162
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "", null)]
        public virtual void PatchLearningProgressionWithEmptyDateProgressionRecorded(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty DateProgressionRecorded", null, @__tags);
#line 174
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table10.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table10.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table10.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table10.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table10.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table10.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 176
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table10, "Given ");
#line 185
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 186
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table11.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table11.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table11.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table11.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table11.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table11.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 188
 testRunner.And("the response body should contain:", ((string)(null)), table11, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PatchLearningProgressionWithCurrentLearningStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with CurrentLearningStatus", null, @__tags);
#line 207
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table12.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table12.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table12.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table12.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table12.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table12.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 209
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table12, "Given ");
#line 218
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 219
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 220
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table13.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table13.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table13.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table13.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table13.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 221
 testRunner.And("the response body should contain:", ((string)(null)), table13, "And ");
#line 229
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "-1", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "0", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "4", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "97", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "100", "CurrentLearningStatus must be a valid current Learning Status", null)]
        public virtual void PatchLearningProgressionWithInvalidCurrentLearningStatus(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid CurrentLearningStatus", null, @__tags);
#line 245
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table14.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table14.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table14.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table14.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table14.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table14.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 247
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table14, "Given ");
#line 256
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 257
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 258
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "", null)]
        public virtual void PatchLearningProgressionWithEmptyCurrentLearningStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty CurrentLearningStatus", null, @__tags);
#line 271
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table15.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table15.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table15.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table15.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table15.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table15.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 273
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table15, "Given ");
#line 282
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 283
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table16.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table16.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table16.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table16.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table16.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table16.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 284
 testRunner.And("the response body should contain:", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
            "o previous value for CurrentLearningStatus or LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "1", null)]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusWhereThereWasNoPreviousValueForCurrentLearningStatusOrLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
                    "o previous value for CurrentLearningStatus or LearningHours", null, @__tags);
#line 299
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table17.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table17.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table17.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table17.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
#line 301
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table17, "Given ");
#line 308
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 309
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 310
 testRunner.And("the response body should include DateLearningStarted must have a value when Curre" +
                    "nt Learning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 311
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                    "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
 testRunner.And("the number of errors returned should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted where there was no previous value for CurrentLearningStatus or LearningHo" +
            "urs")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedWhereThereWasNoPreviousValueForCurrentLearningStatusOrLearningHours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted where there was no previous value for CurrentLearningStatus or LearningHo" +
                    "urs", null, new string[] {
                        "learningprogressions"});
#line 319
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table18.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table18.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-24T11:21:00Z"});
            table18.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table18.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-23T11:21:00Z"});
            table18.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
#line 321
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table18, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table19.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-23T11:21:00Z"});
#line 329
 testRunner.When("I patch the following:", ((string)(null)), table19, "When ");
#line 333
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 334
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                    "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 335
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
            "o previous value for CurrentLearningStatus or DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusWhereThereWasNoPreviousValueForCurrentLearningStatusOrDateLearningStarted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
                    "o previous value for CurrentLearningStatus or DateLearningStarted", null, new string[] {
                        "learningprogressions"});
#line 338
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table20.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table20.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-24T11:21:00Z"});
            table20.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table20.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-23T11:21:00Z"});
            table20.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
#line 339
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
#line 347
 testRunner.When("I patch the following:", ((string)(null)), table21, "When ");
#line 351
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 352
 testRunner.And("the response body should include \"LearningHours must have a value when Current Le" +
                    "arning Status is InLearning.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 353
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted where there was no previous value for CurrentLearningStatus or DateLearni" +
            "ngStarted or LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedWhereThereWasNoPreviousValueForCurrentLearningStatusOrDateLearningStartedOrLearningHours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted where there was no previous value for CurrentLearningStatus or DateLearni" +
                    "ngStarted or LearningHours", null, new string[] {
                        "learningprogressions"});
#line 356
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table22.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table22.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-24T11:21:00Z"});
            table22.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table22.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
#line 357
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table22, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table23.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-23T11:21:00Z"});
#line 364
 testRunner.When("I patch the following:", ((string)(null)), table23, "When ");
#line 368
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 369
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                    "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 370
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
            "o previous value for CurrentLearningStatus, DateLearningStarted or LearningHours" +
            "")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusWhereThereWasNoPreviousValueForCurrentLearningStatusDateLearningStartedOrLearningHours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus where there was n" +
                    "o previous value for CurrentLearningStatus, DateLearningStarted or LearningHours" +
                    "", null, new string[] {
                        "learningprogressions"});
#line 373
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table24.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table24.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-24T11:21:00Z"});
            table24.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table24.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
#line 375
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table24, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
#line 382
 testRunner.When("I patch the following:", ((string)(null)), table25, "When ");
#line 385
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 386
 testRunner.And("the response body should include DateLearningStarted must have a value when Curre" +
                    "nt Learning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 387
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                    "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 388
 testRunner.And("the number of errors returned should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
            "tarted AND LearningHours where there was no previous value for CurrentLearningSt" +
            "atus, DateLearningStarted or LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentLearningStatusANDDateLearningStartedANDLearningHoursWhereThereWasNoPreviousValueForCurrentLearningStatusDateLearningStartedOrLearningHours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentLearningStatus AND DateLearningS" +
                    "tarted AND LearningHours where there was no previous value for CurrentLearningSt" +
                    "atus, DateLearningStarted or LearningHours", null, new string[] {
                        "learningprogressions"});
#line 391
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table26.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table26.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-24T11:21:00Z"});
            table26.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table26.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
#line 393
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table26, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table27.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table27.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-24T11:21:00Z"});
            table27.AddRow(new string[] {
                        "LearningHours",
                        "2"});
#line 401
 testRunner.When("I patch the following:", ((string)(null)), table27, "When ");
#line 407
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table28.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table28.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-24T11:21:00Z"});
            table28.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table28.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table28.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-24T11:21:00Z"});
            table28.AddRow(new string[] {
                        "LearningHours",
                        "2"});
#line 408
 testRunner.And("the response body should contain:", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "2", null)]
        public virtual void PatchLearningProgressionWithLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LearningHours", null, @__tags);
#line 426
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table29.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table29.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table29.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table29.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table29.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table29.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table29.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 428
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table29, "Given ");
#line 437
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 438
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 439
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table30.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table30.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table30.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table30.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table30.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 440
 testRunner.And("the response body should contain:", ((string)(null)), table30, "And ");
#line 448
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 449
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 450
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 451
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "-1", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "0", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "3", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "97", "LearningHours must have a valid Learning Hours value", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "100", "LearningHours must have a valid Learning Hours value", null)]
        public virtual void PatchLearningProgressionWithInvalidLearningHours(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid LearningHours", null, @__tags);
#line 460
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table31.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table31.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table31.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table31.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table31.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table31.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 462
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table31, "Given ");
#line 471
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 472
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 473
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 474
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with empty LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "", null)]
        public virtual void PatchLearningProgressionWithEmptyLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with empty LearningHours", null, @__tags);
#line 487
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table32.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table32.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table32.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table32.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table32.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table32.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table32.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 489
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table32, "Given ");
#line 498
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 499
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table33.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table33.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table33.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table33.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table33.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table33.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table33.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 500
 testRunner.And("the response body should contain:", ((string)(null)), table33, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-06-25T11:21:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today", null)]
        public virtual void PatchLearningProgressionWithDateLearningStarted(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with DateLearningStarted", null, @__tags);
#line 519
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table34.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table34.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table34.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table34.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table34.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table34.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table34.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 521
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table34, "Given ");
#line 530
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 531
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 532
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table35.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table35.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table35.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table35.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table35.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table35.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 534
 testRunner.And("the response body should contain:", ((string)(null)), table35, "And ");
#line 542
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 543
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 544
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 545
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "dfgdf-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForDateLearningStarted(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for DateLearningStarted", null, @__tags);
#line 555
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table36.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table36.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table36.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table36.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table36.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table36.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table36.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 557
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table36, "Given ");
#line 566
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 567
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 568
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 569
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today +1D", "DateLearningStarted must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Now + 1H", "DateLearningStarted must be less than or equal to now.", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "Today +1Y", "DateLearningStarted must be less than or equal to now.", null)]
        public virtual void PatchLearningProgressionWithFutureValueForDateLearningStarted(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future value for DateLearningStarted", null, @__tags);
#line 580
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table37.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table37.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table37.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table37.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table37.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table37.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table37.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 582
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table37, "Given ");
#line 591
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 592
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 593
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 594
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 595
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "0", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PatchLearningProgressionWithCurrentQualificationLevel(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with CurrentQualificationLevel", null, @__tags);
#line 608
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table38.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table38.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table38.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table38.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table38.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table38.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table38.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 610
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table38, "Given ");
#line 619
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 620
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 621
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table39.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table39.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table39.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table39.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table39.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 622
 testRunner.And("the response body should contain:", ((string)(null)), table39, "And ");
#line 629
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 630
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 631
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 632
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "-1", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "9", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "98", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "100", "CurrentQualificationLevel must be a valid current Qualification Level", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForCurrentQualificationLevel(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for CurrentQualificationLevel", null, @__tags);
#line 648
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table40.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table40.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table40.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table40.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table40.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table40.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table40.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 650
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table40, "Given ");
#line 659
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 660
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 661
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 662
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CurrentQualificationLevel where there w" +
            "as no previous value for CurrentQualificationLevel or DateQualificationLevelAchi" +
            "eved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchLearningProgressionWithValueForCurrentQualificationLevelWhereThereWasNoPreviousValueForCurrentQualificationLevelOrDateQualificationLevelAchieved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CurrentQualificationLevel where there w" +
                    "as no previous value for CurrentQualificationLevel or DateQualificationLevelAchi" +
                    "eved", null, new string[] {
                        "learningprogressions"});
#line 672
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table41.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table41.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
            table41.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-07-23T11:21:00Z"});
            table41.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table41.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
#line 674
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table41, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table42.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
#line 681
 testRunner.When("I patch the following:", ((string)(null)), table42, "When ");
#line 684
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 685
 testRunner.And("the response body should include DateQualificationLevelAchieved is required when " +
                    "QualificationLevel < NoQualification (99).", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 686
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-06-25T11:21:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today", null)]
        public virtual void PatchLearningProgressionWithDateQualificationLevelAchieved(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with DateQualificationLevelAchieved", null, @__tags);
#line 693
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table43.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table43.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table43.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table43.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table43.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table43.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table43.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 695
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table43, "Given ");
#line 704
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 705
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 706
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table44.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table44.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table44.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table44.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table44.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table44.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 708
 testRunner.And("the response body should contain:", ((string)(null)), table44, "And ");
#line 716
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 717
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 718
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 719
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "sdfg-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForDateQualificationLevelAchieved(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for DateQualificationLevelAchieved", null, @__tags);
#line 729
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table45.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table45.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table45.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table45.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table45.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table45.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table45.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 731
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table45, "Given ");
#line 740
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 741
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 742
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 743
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with future value for DateQualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today +1D", "DateQualificationLevelAchieved must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Now + 1H", "DateQualificationLevelAchieved must be less than or equal to now", null)]
        [NUnit.Framework.TestCaseAttribute("DateQualificationLevelAchieved", "Today +1Y", "DateQualificationLevelAchieved must be less than or equal to now", null)]
        public virtual void PatchLearningProgressionWithFutureValueForDateQualificationLevelAchieved(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with future value for DateQualificationLevelAchieved", null, @__tags);
#line 754
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table46.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table46.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table46.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table46.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table46.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table46.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table46.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 756
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table46, "Given ");
#line 765
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 766
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 767
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 768
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 769
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LastLearningProvidersUKPRN")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "10000000", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "10000001", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "51234567", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "99999998", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "99999999", null)]
        public virtual void PatchLearningProgressionWithLastLearningProvidersUKPRN(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LastLearningProvidersUKPRN", null, @__tags);
#line 784
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table47.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table47.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table47.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table47.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table47.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table47.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table47.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 786
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table47, "Given ");
#line 795
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 796
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 797
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table48.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table48.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table48.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table48.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table48.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
#line 798
 testRunner.And("the response body should contain:", ((string)(null)), table48, "And ");
#line 805
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 806
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 807
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 808
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid LastLearningProvidersUKPRN")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "9999999", "The field LastLearningProvidersUKPRN must be a string with a minimum length of 8 " +
            "and a maximum length of 8", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "1", "The field LastLearningProvidersUKPRN must be a string with a minimum length of 8 " +
            "and a maximum length of 8.", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "1234567A", "LastLearningProvidersUKPRN must be a Number", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "abcdefgh", "LastLearningProvidersUKPRN must be a Number", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "100000000", "The field LastLearningProvidersUKPRN must be a string with a minimum length of 8 " +
            "and a maximum length of 8", "1", null)]
        public virtual void PatchLearningProgressionWithInvalidLastLearningProvidersUKPRN(string field, string value, string errorMessage, string errorCount, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid LastLearningProvidersUKPRN", null, exampleTags);
#line 820
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table49.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table49.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table49.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table49.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table49.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table49.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table49.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 822
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table49, "Given ");
#line 831
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 832
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 833
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 834
 testRunner.And(string.Format("the number of errors returned should be {0}", errorCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2019-06-19T09:01:00Z", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "Now", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "Now + 1", null)]
        public virtual void PatchLearningProgressionWithLastModifiedDate(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with LastModifiedDate", null, @__tags);
#line 850
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table50.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table50.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table50.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table50.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table50.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table50.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table50.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 852
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table50, "Given ");
#line 861
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 862
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 863
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table51.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table51.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table51.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table51.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table51.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table51.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 865
 testRunner.And("the response body should contain:", ((string)(null)), table51, "And ");
#line 873
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 874
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 875
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 876
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with invalid value for LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "sdrg-06-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("LastModifiedDate", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PatchLearningProgressionWithInvalidValueForLastModifiedDate(string field, string date, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with invalid value for LastModifiedDate", null, @__tags);
#line 886
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table52.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table52.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table52.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table52.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table52.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table52.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table52.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 888
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table52, "Given ");
#line 897
 testRunner.When(string.Format("I patch the element {0} with <Value>:", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 898
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 899
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 900
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch to Learning Progression received from another touchpoint")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PatchToLearningProgressionReceivedFromAnotherTouchpoint()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch to Learning Progression received from another touchpoint", null, new string[] {
                        "learningprogressions"});
#line 915
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table53.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table53.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table53.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table53.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table53.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table53.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table53.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 917
  testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table53, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table54.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
#line 926
  testRunner.When("I patch the following via a different touchpoint", ((string)(null)), table54, "When ");
#line 929
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 930
  testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 931
  testRunner.And("the response body should have different LastUpdatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table55.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
#line 932
  testRunner.And("the response body should contain:", ((string)(null)), table55, "And ");
#line 935
  testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 936
  testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for LastModifiedTouchpointID")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastModifiedTouchpointID", "99999999", null)]
        public virtual void PatchLearningProgressionWithValueForLastModifiedTouchpointID(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for LastModifiedTouchpointID", null, @__tags);
#line 940
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table56.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table56.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table56.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table56.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table56.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table56.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table56.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 942
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table56, "Given ");
#line 951
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 952
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 953
 testRunner.And("the response body should have LastModifiedTouchpointId with value 9000000001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table57.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table57.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table57.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table57.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table57.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table57.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table57.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 954
 testRunner.And("the response body should contain:", ((string)(null)), table57, "And ");
#line 963
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 964
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression with value for CreatedBy")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CreatedBy", "99999999", null)]
        public virtual void PatchLearningProgressionWithValueForCreatedBy(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression with value for CreatedBy", null, @__tags);
#line 971
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table58.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table58.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table58.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table58.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table58.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table58.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table58.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 973
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table58, "Given ");
#line 982
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 983
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table59.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table59.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table59.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table59.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table59.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table59.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table59.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 985
 testRunner.And("the response body should contain:", ((string)(null)), table59, "And ");
#line 994
 testRunner.And("the \"learningprogressions\" cosmos document should have \"CreatedBy\" with value \"90" +
                    "00000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch unknown Learning Progression record")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "1", "PlaceHolder", null)]
        public virtual void PatchUnknownLearningProgressionRecord(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch unknown Learning Progression record", null, @__tags);
#line 1003
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table60.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table60.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table60.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table60.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table60.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table60.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table60.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 1005
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table60, "Given ");
#line 1014
 testRunner.When(string.Format("I patch an unknown resource with the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1015
 testRunner.Then("there should be a 204 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Learning Progression record with incorrect CustomerId")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "1", "PlaceHolder", null)]
        public virtual void PatchLearningProgressionRecordWithIncorrectCustomerId(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Learning Progression record with incorrect CustomerId", null, @__tags);
#line 1024
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table61.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table61.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table61.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table61.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table61.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table61.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table61.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 1026
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table61, "Given ");
#line 1035
 testRunner.When(string.Format("I patch an unknown resource with the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1036
 testRunner.Then("there should be a 204 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

