// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.LearningProgression
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LearningProgression_Post")]
    [NUnit.Framework.CategoryAttribute("postV3")]
    public partial class LearningProgression_PostFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LearningProgression_Post.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LearningProgression_Post", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV3"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table1.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 5
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table2.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 9
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with all values")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostLearningProgressionWithAllValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with all values", null, new string[] {
                        "learningprogressions",
                        "smoke"});
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table3.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table3.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table3.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 17
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table3, "Given ");
#line 26
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-25T11:21:00Z"});
            table4.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table4.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table4.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-25T11:21:00Z"});
            table4.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "2"});
            table4.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-07-25T11:21:00Z"});
            table4.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "12345678"});
#line 27
 testRunner.And("the response body should contain:", ((string)(null)), table4, "And ");
#line 36
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with all mandatory values")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithAllMandatoryValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with all mandatory values", null, new string[] {
                        "learningprogressions"});
#line 43
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-06-25T11:21:00Z"});
            table5.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table5.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
#line 44
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table5, "Given ");
#line 49
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-06-25T11:21:00Z"});
            table6.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table6.AddRow(new string[] {
                        "LearningHours",
                        ""});
            table6.AddRow(new string[] {
                        "DateLearningStarted",
                        ""});
            table6.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table6.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        ""});
            table6.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        ""});
#line 50
 testRunner.And("the response body should contain:", ((string)(null)), table6, "And ");
#line 59
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression supplying LastModifiedDate")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionSupplyingLastModifiedDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression supplying LastModifiedDate", null, new string[] {
                        "learningprogressions"});
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-12-19T09:01:00Z"});
            table7.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table7.AddRow(new string[] {
                        "DateLearningStarted",
                        "Today"});
            table7.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table7.AddRow(new string[] {
                        "LastModifiedDate",
                        "2019-06-19T09:01:00Z"});
#line 68
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table7, "Given ");
#line 75
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-12-19T09:01:00Z"});
            table8.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table8.AddRow(new string[] {
                        "LearningHours",
                        ""});
            table8.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table8.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        ""});
            table8.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        ""});
            table8.AddRow(new string[] {
                        "LastModifiedDate",
                        "2019-06-19T09:01:00Z"});
#line 76
 testRunner.And("the response body should contain:", ((string)(null)), table8, "And ");
#line 86
 testRunner.And("the \"learningprogressions\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("there should be a record in the learningprogressions ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("there should be a record in the learningprogressions-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with valid values for CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "98", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "99", null)]
        public virtual void PostLearningProgressionWithValidValuesForCurrentLearningStatus(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with valid values for CurrentLearningStatus", null, @__tags);
#line 92
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 93
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-06-19T09:01:00Z"});
            table9.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table9.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table9.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-19T09:01:00Z"});
#line 94
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table9, "Given ");
#line 100
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2019-06-19T09:01:00Z"});
            table10.AddRow(new string[] {
                        "DateLearningStarted",
                        "2019-06-19T09:01:00Z"});
            table10.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
#line 101
 testRunner.And("the response body should contain:", ((string)(null)), table10, "And ");
#line 108
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with valid values for LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "2", null)]
        public virtual void PostLearningProgressionWithValidValuesForLearningHours(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with valid values for LearningHours", null, @__tags);
#line 120
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 121
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-12-19T09:01:00Z"});
            table11.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table11.AddRow(new string[] {
                        "DateLearningStarted",
                        "Today"});
            table11.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table11.AddRow(new string[] {
                        "LastModifiedDate",
                        "2019-06-19T09:01:00Z"});
#line 122
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table11, "Given ");
#line 129
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-12-19T09:01:00Z"});
            table12.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table12.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table12.AddRow(new string[] {
                        "LastModifiedDate",
                        "2019-06-19T09:01:00Z"});
#line 130
 testRunner.And("the response body should contain:", ((string)(null)), table12, "And ");
#line 136
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with valid values for CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "0", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "3", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "4", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "6", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "7", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "8", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "99", null)]
        public virtual void PostLearningProgressionWithValidValuesForCurrentQualificationLevel(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with valid values for CurrentQualificationLevel", null, @__tags);
#line 147
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 148
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table13.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table13.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-06-19T09:01:00Z"});
#line 149
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table13, "Given ");
#line 154
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table14.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table14.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "2019-06-19T09:01:00Z"});
#line 155
 testRunner.And("the response body should contain:", ((string)(null)), table14, "And ");
#line 160
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with valid values for LastLearningProvidersUKPRN")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "10000000", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "12345678", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "54123234", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "99999999", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "", null)]
        public virtual void PostLearningProgressionWithValidValuesForLastLearningProvidersUKPRN(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with valid values for LastLearningProvidersUKPRN", null, @__tags);
#line 177
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 178
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table15.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table15.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
#line 179
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table15, "Given ");
#line 184
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table16.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table16.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
#line 185
 testRunner.And("the response body should contain:", ((string)(null)), table16, "And ");
#line 191
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with invalid value for LastLearningProvidersUKPRN")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "9999999", "The field LastLearningProvidersUKPRN must be a string with a maximum length of 8." +
            "", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "100000000", "The field LastLearningProvidersUKPRN must be a string with a maximum length of 8", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "a", "LastLearningProvidersUKPRN must be a Number.", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "a1234567", "LastLearningProvidersUKPRN must be a Number.", null)]
        [NUnit.Framework.TestCaseAttribute("LastLearningProvidersUKPRN", "sausages", "LastLearningProvidersUKPRN must be a Number.", null)]
        public virtual void PostLearningProgressionWithInvalidValueForLastLearningProvidersUKPRN(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with invalid value for LastLearningProvidersUKPRN", null, @__tags);
#line 204
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 206
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table17.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table17.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
#line 207
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table17, "Given ");
#line 212
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 213
  testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with invalid values for  CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "0", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "4", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "97", "CurrentLearningStatus must be a valid current Learning Status", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentLearningStatus", "100", "CurrentLearningStatus must be a valid current Learning Status", null)]
        public virtual void PostLearningProgressionWithInvalidValuesForCurrentLearningStatus(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with invalid values for  CurrentLearningStatus", null, @__tags);
#line 225
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 226
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table18.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
#line 227
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table18, "Given ");
#line 231
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 232
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with invalid values for  LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "0", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "3", "placeholder", null)]
        [NUnit.Framework.TestCaseAttribute("LearningHours", "99", "placeholder", null)]
        public virtual void PostLearningProgressionWithInvalidValuesForLearningHours(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with invalid values for  LearningHours", null, @__tags);
#line 242
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 243
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table19.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table19.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
#line 244
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table19, "Given ");
#line 249
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 250
 testRunner.And("the response body should include DateLearningStarted must have a value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with invalid values for  CurrentQualificationLevel")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "-1", "CurrentQualificationLevel must be a valid current Qualification Level.", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "9", "CurrentQualificationLevel must be a valid current Qualification Level.", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "98", "CurrentQualificationLevel must be a valid current Qualification Level.", null)]
        [NUnit.Framework.TestCaseAttribute("CurrentQualificationLevel", "100", "CurrentQualificationLevel must be a valid current Qualification Level.", null)]
        public virtual void PostLearningProgressionWithInvalidValuesForCurrentQualificationLevel(string field, string value, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with invalid values for  CurrentQualificationLevel", null, @__tags);
#line 259
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 260
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table20.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
#line 261
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table20, "Given ");
#line 265
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 266
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with invalid dates")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateProgressionRecorded", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "018-0g-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-00-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-13-19T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-00T09:01:00Z", "Could not convert string to DateTime", null)]
        [NUnit.Framework.TestCaseAttribute("DateLearningStarted", "2018-05-32T09:01:00Z", "Could not convert string to DateTime", null)]
        public virtual void PostLearningProgressionWithInvalidDates(string field, string date, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "learningprogressions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with invalid dates", null, @__tags);
#line 353
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 354
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, date), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "2018-06-19T09:01:00Z"});
            table21.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table21.AddRow(new string[] {
                        "DateLearningStarted",
                        "Today"});
            table21.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
#line 355
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table21, "Given ");
#line 361
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 362
 testRunner.And(string.Format("the response body should include {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future timestamped value for DateProgressionRecord" +
            "ed")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureTimestampedValueForDateProgressionRecorded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future timestamped value for DateProgressionRecord" +
                    "ed", null, new string[] {
                        "learningprogressions"});
#line 378
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now +1H"});
            table22.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table22.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
#line 380
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table22, "Given ");
#line 385
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 386
 testRunner.And("the error message should be \"DateProgressionRecorded must be less than or equal t" +
                    "o now\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 387
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future dated value for DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureDatedValueForDateProgressionRecorded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future dated value for DateProgressionRecorded", null, new string[] {
                        "learningprogressions"});
#line 390
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now +1D"});
            table23.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table23.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
#line 392
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table23, "Given ");
#line 397
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 398
 testRunner.And("the response body should include DateProgressionRecorded must be less than or equ" +
                    "al to now.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future timestamped value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureTimestampedValueForDateLearningStarted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future timestamped value for DateLearningStarted", null, new string[] {
                        "learningprogressions"});
#line 401
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table24.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "2"});
            table24.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
            table24.AddRow(new string[] {
                        "DateLearningStarted",
                        "Now + 1H"});
#line 403
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table24, "Given ");
#line 409
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 410
 testRunner.And("the response body should include DateLearningStarted must be less than or equal t" +
                    "o now.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future dated value for DateLearningStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureDatedValueForDateLearningStarted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future dated value for DateLearningStarted", null, new string[] {
                        "learningprogressions"});
#line 413
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table25.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "3"});
            table25.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table25.AddRow(new string[] {
                        "DateLearningStarted",
                        "Now +1D"});
#line 415
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table25, "Given ");
#line 421
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 422
 testRunner.And("the response body should include DateLearningStarted must be less than or equal t" +
                    "o now.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future timestamped value for DateQualificationLeve" +
            "lAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureTimestampedValueForDateQualificationLevelAchieved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future timestamped value for DateQualificationLeve" +
                    "lAchieved", null, new string[] {
                        "learningprogressions"});
#line 425
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table26.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "3"});
            table26.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
            table26.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "Now + 1H"});
#line 427
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table26, "Given ");
#line 433
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 434
 testRunner.And("the response body should include DateQualificationLevelAchieved must be less than" +
                    " or equal to now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with future dated value for DateQualificationLevelAchie" +
            "ved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithFutureDatedValueForDateQualificationLevelAchieved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with future dated value for DateQualificationLevelAchie" +
                    "ved", null, new string[] {
                        "learningprogressions"});
#line 437
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table27.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table27.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "2"});
            table27.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
            table27.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "Now +1D"});
#line 439
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table27, "Given ");
#line 445
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 446
 testRunner.And("the response body should include DateQualificationLevelAchieved must be less than" +
                    " or equal to now.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with In Learning status and no value for LearningHours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithInLearningStatusAndNoValueForLearningHours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with In Learning status and no value for LearningHours", null, new string[] {
                        "learningprogressions"});
#line 449
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table28.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table28.AddRow(new string[] {
                        "DateLearningStarted",
                        "Today"});
            table28.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
#line 451
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table28, "Given ");
#line 458
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 459
 testRunner.And("the response body should include LearningHours must have a value when Current Lea" +
                    "rning Status is InLearning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 460
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with In Learning status and invalid value for LearningH" +
            "ours")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithInLearningStatusAndInvalidValueForLearningHours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with In Learning status and invalid value for LearningH" +
                    "ours", null, new string[] {
                        "learningprogressions"});
#line 464
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table29.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table29.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table29.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table29.AddRow(new string[] {
                        "DateLearningStarted",
                        "Today"});
            table29.AddRow(new string[] {
                        "LearningHours",
                        "93"});
#line 466
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table29, "Given ");
#line 473
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 474
 testRunner.And("the response body should include LearningHours must have a valid Learning Hours v" +
                    "alue.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with In Learning status and no value for DateLearningSt" +
            "arted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithInLearningStatusAndNoValueForDateLearningStarted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with In Learning status and no value for DateLearningSt" +
                    "arted", null, new string[] {
                        "learningprogressions"});
#line 477
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table30.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table30.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table30.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table30.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table30.AddRow(new string[] {
                        "DateLearningStarted",
                        ""});
#line 479
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table30, "Given ");
#line 486
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 487
 testRunner.And("the error message should be \"DateLearningStarted must have a value when Current L" +
                    "earning Status is InLearning\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 488
 testRunner.And("the number of errors returned should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with In Learning status and future value for DateLearni" +
            "ngStarted")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithInLearningStatusAndFutureValueForDateLearningStarted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with In Learning status and future value for DateLearni" +
                    "ngStarted", null, new string[] {
                        "learningprogressions"});
#line 491
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table31.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "1"});
            table31.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table31.AddRow(new string[] {
                        "LearningHours",
                        "1"});
            table31.AddRow(new string[] {
                        "DateLearningStarted",
                        "Now +1H"});
#line 493
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table31, "Given ");
#line 500
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 501
  testRunner.And("the response body should include DateLearningStarted must be less than or equal t" +
                    "o now.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with a Current Qualification and no value for DateQuali" +
            "ficationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithACurrentQualificationAndNoValueForDateQualificationLevelAchieved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with a Current Qualification and no value for DateQuali" +
                    "ficationLevelAchieved", null, new string[] {
                        "learningprogressions"});
#line 504
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table32.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table32.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table32.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "1"});
            table32.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        ""});
#line 506
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table32, "Given ");
#line 512
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 513
  testRunner.And("the response body should include DateQualificationLevelAchieved is required when " +
                    "QualificationLevel < NoQualification (99).", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression with a Current Qualification and future value for DateQ" +
            "ualificationLevelAchieved")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionWithACurrentQualificationAndFutureValueForDateQualificationLevelAchieved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression with a Current Qualification and future value for DateQ" +
                    "ualificationLevelAchieved", null, new string[] {
                        "learningprogressions"});
#line 516
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table33.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table33.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table33.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "8"});
            table33.AddRow(new string[] {
                        "DateQualificationLevelAchieved",
                        "Now +1H"});
#line 518
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table33, "Given ");
#line 524
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 525
  testRunner.And("the response body should include DateQualificationLevelAchieved must be less than" +
                    " or equal to now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression missing CurrentLearningStatus")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionMissingCurrentLearningStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression missing CurrentLearningStatus", null, new string[] {
                        "learningprogressions"});
#line 530
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table34.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table34.AddRow(new string[] {
                        "CurrentLearningStatus",
                        ""});
            table34.AddRow(new string[] {
                        "DateLearningStarted",
                        "Today"});
            table34.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table34.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "00000000"});
#line 532
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table34, "Given ");
#line 539
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 540
  testRunner.And("the response body should include The CurrentLearningStatus field is required", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression missing CurrentQualification")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionMissingCurrentQualification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression missing CurrentQualification", null, new string[] {
                        "learningprogressions"});
#line 543
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table35.AddRow(new string[] {
                        "DateProgressionRecorded",
                        "Now"});
            table35.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table35.AddRow(new string[] {
                        "DateLearningStarted",
                        "Today"});
            table35.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        ""});
            table35.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "00000000"});
#line 545
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table35, "Given ");
#line 552
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 553
  testRunner.And("the response body should include The CurrentQualificationLevel field is required." +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post learning progression missing DateProgressionRecorded")]
        [NUnit.Framework.CategoryAttribute("learningprogressions")]
        public virtual void PostLearningProgressionMissingDateProgressionRecorded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post learning progression missing DateProgressionRecorded", null, new string[] {
                        "learningprogressions"});
#line 556
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table36.AddRow(new string[] {
                        "DateProgressionRecorded",
                        ""});
            table36.AddRow(new string[] {
                        "CurrentLearningStatus",
                        "99"});
            table36.AddRow(new string[] {
                        "CurrentQualificationLevel",
                        "99"});
            table36.AddRow(new string[] {
                        "DateLearningStarted",
                        "Today"});
            table36.AddRow(new string[] {
                        "LastLearningProvidersUKPRN",
                        "00000000"});
#line 559
 testRunner.Given("I post a Learning Progression record with the following details:", ((string)(null)), table36, "Given ");
#line 566
  testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 567
  testRunner.And("the date field DateProgressionRecorded should hold a recent value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

