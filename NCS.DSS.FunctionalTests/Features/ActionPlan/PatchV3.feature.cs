// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.ActionPlan
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ActionPlanPatchV3")]
    public partial class ActionPlanPatchV3Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV3.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ActionPlan", "ActionPlanPatchV3", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table7.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details V2:", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table8.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
            table8.AddRow(new string[] {
                        "PriorityGroups",
                        "1,3"});
#line 8
 testRunner.Given("I post a Customer with the following details V3:", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table9.AddRow(new string[] {
                        "Channel",
                        "2"});
            table9.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table9.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 13
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "DateandTimeOfSession",
                        "2018-06-21T14:45:00Z"});
            table10.AddRow(new string[] {
                        "VenuePostCode",
                        "NN1 2NN"});
#line 19
 testRunner.And("I post a session with the following details V2:", ((string)(null)), table10, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid CustomerCharterShownToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchValidCustomerCharterShownToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid CustomerCharterShownToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table11.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table11.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "false"});
                table11.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table11.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table11.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table11.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table11.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 26
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table11, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
#line 35
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table12, "When ");
#line hidden
#line 38
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table13.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table13.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table13.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table13.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table13.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table13.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 39
 testRunner.And("the response body should contain:", ((string)(null)), table13, "And ");
#line hidden
#line 47
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
 testRunner.Then("there should be a record in the dss-actionplans table with ActionPlanId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid DateActionPlanCreated")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidDateActionPlanCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid DateActionPlanCreated", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table14.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-29T09:00:00Z"});
                table14.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table14.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table14.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table14.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table14.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table14.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table14.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 84
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table14, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table15.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
#line 94
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table15, "When ");
#line hidden
#line 97
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table16.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table16.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table16.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table16.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table16.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table16.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table16.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 98
 testRunner.And("the response body should contain:", ((string)(null)), table16, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid DateActionPlanSentToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidDateActionPlanSentToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid DateActionPlanSentToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table17.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table17.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table17.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table17.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table17.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table17.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table17.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table17.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 110
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table17, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table18.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-31T09:00:00Z"});
#line 120
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table18, "When ");
#line hidden
#line 123
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table19.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table19.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table19.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table19.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-31T09:00:00Z"});
                table19.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table19.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table19.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 124
 testRunner.And("the response body should contain:", ((string)(null)), table19, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid DateActionPlanAcknowledged")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidDateActionPlanAcknowledged()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid DateActionPlanAcknowledged", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table20.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table20.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table20.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table20.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table20.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table20.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table20.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table20.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 136
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table20, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table21.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-31T09:00:00Z"});
#line 146
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table21, "When ");
#line hidden
#line 149
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table22.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table22.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table22.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table22.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table22.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table22.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-31T09:00:00Z"});
                table22.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 150
 testRunner.And("the response body should contain:", ((string)(null)), table22, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid ActionPlanDeliveryMethod")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidActionPlanDeliveryMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid ActionPlanDeliveryMethod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 161
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table23.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table23.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table23.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table23.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table23.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table23.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table23.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table23.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 162
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table23, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table24.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "2"});
#line 172
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table24, "When ");
#line hidden
#line 175
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table25.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table25.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table25.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table25.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table25.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "2"});
                table25.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table25.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 176
 testRunner.And("the response body should contain:", ((string)(null)), table25, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid PriorityCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidPriorityCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid PriorityCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 187
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table26.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table26.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table26.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table26.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table26.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table26.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table26.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table26.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 188
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table26, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table27.AddRow(new string[] {
                            "PriorityCustomer",
                            "2"});
#line 198
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table27, "When ");
#line hidden
#line 201
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table28.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table28.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table28.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table28.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table28.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table28.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table28.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 202
 testRunner.And("the response body should contain:", ((string)(null)), table28, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid CurrentSituation")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidCurrentSituation()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid CurrentSituation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table29.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table29.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table29.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table29.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table29.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table29.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table29.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 214
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table29, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table30.AddRow(new string[] {
                            "CurrentSituation",
                            "still looking"});
#line 223
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table30, "When ");
#line hidden
#line 226
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table31.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table31.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table31.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table31.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table31.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table31.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table31.AddRow(new string[] {
                            "CurrentSituation",
                            "still looking"});
#line 227
 testRunner.And("the response body should contain:", ((string)(null)), table31, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with SubcontractorId")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PatchWithSubcontractorId()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with SubcontractorId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 239
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table32.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table32.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table32.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table32.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table32.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table32.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table32.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table32.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 240
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table32, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table33.AddRow(new string[] {
                            "CurrentSituation",
                            "still looking"});
#line 250
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table33, "When ");
#line hidden
#line 253
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table34.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table34.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table34.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table34.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table34.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table34.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table34.AddRow(new string[] {
                            "CurrentSituation",
                            "still looking"});
#line 254
 testRunner.And("the response body should contain:", ((string)(null)), table34, "And ");
#line hidden
#line 263
 testRunner.And("the response body should contain the SubContractorId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateActionPlanCreated")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateActionPlanCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateActionPlanCreated", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 266
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table35.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-29T09:00:00Z"});
                table35.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table35.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table35.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table35.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table35.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table35.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table35.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 267
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table35, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table36.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-31T09:00:00Z"});
#line 277
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table36, "When ");
#line hidden
#line 280
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid CustomerCharterShownToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidCustomerCharterShownToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid CustomerCharterShownToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 283
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table37.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table37.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table37.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table37.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table37.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table37.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table37.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 284
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table37, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table38.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "1"});
#line 293
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table38, "When ");
#line hidden
#line 296
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateAndTimeCharterShown")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateAndTimeCharterShown()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateAndTimeCharterShown", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 301
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table39.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table39.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table39.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table39.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table39.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table39.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table39.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 302
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table39, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table40.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-29T09:00:00Z"});
#line 311
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table40, "When ");
#line hidden
#line 314
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateActionPlanSentToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateActionPlanSentToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateActionPlanSentToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 317
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table41.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table41.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table41.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table41.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table41.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table41.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table41.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table41.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 318
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table41, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table42.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-29T09:00:00Z"});
#line 328
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table42, "When ");
#line hidden
#line 331
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateActionPlanAcknowledged")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateActionPlanAcknowledged()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateActionPlanAcknowledged", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 334
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table43.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table43.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table43.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table43.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table43.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table43.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table43.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table43.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 335
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table43, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table44.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-29T09:00:00Z"});
#line 345
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table44, "When ");
#line hidden
#line 348
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid ActionPlanDeliveryMethod")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidActionPlanDeliveryMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid ActionPlanDeliveryMethod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 351
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table45.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table45.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table45.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table45.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table45.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table45.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table45.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table45.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 352
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table45, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table46.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-29T09:00:00Z"});
#line 362
 testRunner.When("I patch the following ActionPlan V3:", ((string)(null)), table46, "When ");
#line hidden
#line 365
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
