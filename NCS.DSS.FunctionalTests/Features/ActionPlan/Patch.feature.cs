// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.ActionPlan
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ActionPlanPatchV1")]
    public partial class ActionPlanPatchV1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ActionPlan", "ActionPlanPatchV1", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table18.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table18, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table19.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 8
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table20.AddRow(new string[] {
                        "Channel",
                        "2"});
            table20.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table20.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 12
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table20, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch CustomerCharterShownToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchCustomerCharterShownToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch CustomerCharterShownToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table21.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table21.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table21.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table21.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table21.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table21.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table21.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table21.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 21
 testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table21, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table22.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "false"});
#line 31
 testRunner.When("I patch the following ActionPlan:", ((string)(null)), table22, "When ");
#line hidden
#line 34
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table23.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table23.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "false"});
                table23.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table23.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table23.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table23.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table23.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table23.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 35
 testRunner.And("the response body should contain:", ((string)(null)), table23, "And ");
#line hidden
#line 45
 testRunner.Given("I wait for 5 Seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
 testRunner.Then("there should be a record in the dss-actionplans table with ActionPlanId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch ActionPlanDeliveryMethod")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchActionPlanDeliveryMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch ActionPlanDeliveryMethod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table24.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table24.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table24.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table24.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table24.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table24.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table24.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table24.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 50
 testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table24, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table25.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "2"});
#line 60
 testRunner.When("I patch the following ActionPlan:", ((string)(null)), table25, "When ");
#line hidden
#line 63
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table26.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table26.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table26.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table26.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table26.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "2"});
                table26.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table26.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table26.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 64
 testRunner.And("the response body should contain:", ((string)(null)), table26, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch PriorityCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchPriorityCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch PriorityCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table27.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table27.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table27.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table27.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table27.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table27.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table27.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table27.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 77
 testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table27, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table28.AddRow(new string[] {
                            "PriorityCustomer",
                            "2"});
#line 87
 testRunner.When("I patch the following ActionPlan:", ((string)(null)), table28, "When ");
#line hidden
#line 90
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table29.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table29.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table29.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table29.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table29.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table29.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table29.AddRow(new string[] {
                            "PriorityCustomer",
                            "2"});
                table29.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 91
 testRunner.And("the response body should contain:", ((string)(null)), table29, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch CurrentSituation")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchCurrentSituation()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch CurrentSituation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table30.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table30.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table30.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table30.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table30.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table30.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table30.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table30.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 104
 testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table30, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table31.AddRow(new string[] {
                            "CurrentSituation",
                            "updated text here"});
#line 114
 testRunner.When("I patch the following ActionPlan:", ((string)(null)), table31, "When ");
#line hidden
#line 117
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table32.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table32.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table32.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table32.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table32.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table32.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table32.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table32.AddRow(new string[] {
                            "CurrentSituation",
                            "updated text here"});
#line 118
 testRunner.And("the response body should contain:", ((string)(null)), table32, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid DateActionPlanCreated")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchWithInvalidDateActionPlanCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid DateActionPlanCreated", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table33.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table33.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table33.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table33.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table33.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table33.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table33.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table33.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 131
 testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table33, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table34.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "20166-07-30T09:00:00Z"});
#line 141
 testRunner.When("I patch the following ActionPlan:", ((string)(null)), table34, "When ");
#line hidden
#line 144
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid CustomerCharterShownToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchWithInvalidCustomerCharterShownToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid CustomerCharterShownToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 147
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table35.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table35.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table35.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table35.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table35.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table35.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table35.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table35.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 148
 testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table35, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table36.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "1"});
#line 158
 testRunner.When("I patch the following ActionPlan:", ((string)(null)), table36, "When ");
#line hidden
#line 161
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid DateAndTimeCharterShown")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchWithInvalidDateAndTimeCharterShown()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid DateAndTimeCharterShown", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 164
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table37.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table37.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table37.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table37.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table37.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table37.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table37.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table37.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 165
 testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table37, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table38.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "20181-07-30T09:00:00Z"});
#line 175
 testRunner.When("I patch the following ActionPlan:", ((string)(null)), table38, "When ");
#line hidden
#line 178
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with invalid DateActionPlanSentToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchWithInvalidDateActionPlanSentToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with invalid DateActionPlanSentToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 181
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table39.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table39.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table39.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table39.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table39.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table39.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table39.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table39.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 182
 testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table39, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table40.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "20181-07-30T09:00:00Z"});
#line 192
 testRunner.When("I patch the following ActionPlan:", ((string)(null)), table40, "When ");
#line hidden
#line 195
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
