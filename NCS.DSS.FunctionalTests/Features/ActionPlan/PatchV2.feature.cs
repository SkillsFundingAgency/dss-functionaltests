// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.ActionPlan
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ActionPlanPatchV2")]
    public partial class ActionPlanPatchV2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PatchV2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ActionPlan", "ActionPlanPatchV2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table41.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table41.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table41, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table42.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table42.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 8
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table42, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table43.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table43.AddRow(new string[] {
                        "Channel",
                        "2"});
            table43.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table43.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 12
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table44.AddRow(new string[] {
                        "DateandTimeOfSession",
                        "2018-06-21T14:45:00Z"});
            table44.AddRow(new string[] {
                        "VenuePostCode",
                        "NN1 2NN"});
#line 18
 testRunner.And("I post a session with the following details:", ((string)(null)), table44, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid CustomerCharterShownToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchValidCustomerCharterShownToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid CustomerCharterShownToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table45.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table45.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "false"});
                table45.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table45.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table45.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table45.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table45.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 25
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table45, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table46.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
#line 34
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table46, "When ");
#line hidden
#line 37
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table47.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table47.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table47.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table47.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table47.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table47.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table47.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 38
 testRunner.And("the response body should contain:", ((string)(null)), table47, "And ");
#line hidden
#line 47
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid DateActionPlanCreated")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidDateActionPlanCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid DateActionPlanCreated", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table48.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-29T09:00:00Z"});
                table48.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table48.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table48.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table48.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table48.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table48.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table48.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 82
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table48, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table49.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
#line 92
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table49, "When ");
#line hidden
#line 95
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table50.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table50.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table50.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table50.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table50.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table50.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table50.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table50.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 96
 testRunner.And("the response body should contain:", ((string)(null)), table50, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid DateActionPlanSentToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidDateActionPlanSentToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid DateActionPlanSentToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table51.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table51.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table51.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table51.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table51.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table51.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table51.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table51.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 109
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table51, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table52.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-31T09:00:00Z"});
#line 119
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table52, "When ");
#line hidden
#line 122
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table53.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table53.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table53.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table53.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-31T09:00:00Z"});
                table53.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table53.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table53.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table53.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 123
 testRunner.And("the response body should contain:", ((string)(null)), table53, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid DateActionPlanAcknowledged")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidDateActionPlanAcknowledged()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid DateActionPlanAcknowledged", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table54.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table54.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table54.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table54.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table54.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table54.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table54.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table54.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 136
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table54, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table55.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-31T09:00:00Z"});
#line 146
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table55, "When ");
#line hidden
#line 149
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table56.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table56.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table56.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table56.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table56.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table56.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-31T09:00:00Z"});
                table56.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table56.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 150
 testRunner.And("the response body should contain:", ((string)(null)), table56, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid ActionPlanDeliveryMethod")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidActionPlanDeliveryMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid ActionPlanDeliveryMethod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 162
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table57.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table57.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table57.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table57.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table57.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table57.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table57.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table57.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 163
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table57, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table58.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
#line 173
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table58, "When ");
#line hidden
#line 176
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table59.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table59.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table59.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table59.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table59.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table59.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table59.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table59.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 177
 testRunner.And("the response body should contain:", ((string)(null)), table59, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid PriorityCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidPriorityCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid PriorityCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table60.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table60.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table60.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table60.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table60.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table60.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table60.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table60.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 190
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table60, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table61.AddRow(new string[] {
                            "PriorityCustomer",
                            "2"});
#line 200
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table61, "When ");
#line hidden
#line 203
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table62.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table62.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table62.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table62.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table62.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table62.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table62.AddRow(new string[] {
                            "PriorityCustomer",
                            "2"});
                table62.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 204
 testRunner.And("the response body should contain:", ((string)(null)), table62, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid CurrentSituation")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidCurrentSituation()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid CurrentSituation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 216
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table63.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table63.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table63.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table63.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table63.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table63.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table63.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table63.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 217
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table63, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table64.AddRow(new string[] {
                            "CurrentSituation",
                            "still looking"});
#line 227
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table64, "When ");
#line hidden
#line 230
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table65.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table65.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table65.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table65.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table65.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table65.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table65.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table65.AddRow(new string[] {
                            "CurrentSituation",
                            "still looking"});
#line 231
 testRunner.And("the response body should contain:", ((string)(null)), table65, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with SubcontractorId")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PatchWithSubcontractorId()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with SubcontractorId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 244
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table66.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table66.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table66.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table66.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table66.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table66.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table66.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table66.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 245
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table66, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table67.AddRow(new string[] {
                            "CurrentSituation",
                            "still looking"});
#line 255
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table67, "When ");
#line hidden
#line 258
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table68.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table68.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table68.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table68.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table68.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table68.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table68.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table68.AddRow(new string[] {
                            "CurrentSituation",
                            "still looking"});
#line 259
 testRunner.And("the response body should contain:", ((string)(null)), table68, "And ");
#line hidden
#line 269
 testRunner.And("the response body should contain the SubContractorId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateActionPlanCreated")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateActionPlanCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateActionPlanCreated", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 272
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table69.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-29T09:00:00Z"});
                table69.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table69.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table69.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table69.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table69.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table69.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table69.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 273
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table69, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table70.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-31T09:00:00Z"});
#line 283
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table70, "When ");
#line hidden
#line 286
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid CustomerCharterShownToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidCustomerCharterShownToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid CustomerCharterShownToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 289
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table71.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table71.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table71.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table71.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table71.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table71.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table71.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 290
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table71, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table72.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "1"});
#line 299
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table72, "When ");
#line hidden
#line 302
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateAndTimeCharterShown")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateAndTimeCharterShown()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateAndTimeCharterShown", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 307
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table73.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table73.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table73.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table73.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table73.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table73.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table73.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 308
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table73, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table74.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-29T09:00:00Z"});
#line 317
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table74, "When ");
#line hidden
#line 320
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateActionPlanSentToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateActionPlanSentToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateActionPlanSentToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 323
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table75.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table75.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table75.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table75.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table75.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table75.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table75.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table75.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 324
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table75, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table76.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-29T09:00:00Z"});
#line 334
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table76, "When ");
#line hidden
#line 337
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateActionPlanAcknowledged")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateActionPlanAcknowledged()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateActionPlanAcknowledged", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 340
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table77.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table77.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table77.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table77.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table77.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table77.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table77.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table77.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 341
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table77, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table78.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-29T09:00:00Z"});
#line 351
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table78, "When ");
#line hidden
#line 354
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid ActionPlanDeliveryMethod")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidActionPlanDeliveryMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid ActionPlanDeliveryMethod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 357
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table79.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table79.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table79.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table79.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table79.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table79.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table79.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table79.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 358
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table79, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table80.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-29T09:00:00Z"});
#line 368
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table80, "When ");
#line hidden
#line 371
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid PriorityCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidPriorityCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid PriorityCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 374
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table81.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table81.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table81.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table81.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table81.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table81.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table81.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table81.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 375
 testRunner.Given("I post an ActionPlan with the following details V2:", ((string)(null)), table81, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table82.AddRow(new string[] {
                            "PriorityCustomer",
                            "7"});
#line 385
 testRunner.When("I patch the following ActionPlan V2:", ((string)(null)), table82, "When ");
#line hidden
#line 388
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
