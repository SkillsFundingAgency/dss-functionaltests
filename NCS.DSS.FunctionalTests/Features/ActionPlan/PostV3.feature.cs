// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.ActionPlan
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ActionPlanPostV3")]
    public partial class ActionPlanPostV3Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostV3.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ActionPlan", "ActionPlanPostV3", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table158.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table158.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 4
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table158, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table159.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table159.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 8
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table159, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table160.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table160.AddRow(new string[] {
                        "Channel",
                        "2"});
            table160.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table160.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 12
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table160, "And ");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table161.AddRow(new string[] {
                        "DateandTimeOfSession",
                        "2018-06-21T14:45:00Z"});
            table161.AddRow(new string[] {
                        "VenuePostCode",
                        "NN1 2NN"});
#line 18
 testRunner.And("I post a session with the following details:", ((string)(null)), table161, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid ActionPlan with all fields")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PostValidActionPlanWithAllFields()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid ActionPlan with all fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table162.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table162.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table162.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table162.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table162.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table162.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table162.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table162.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 25
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table162, "Given ");
#line hidden
#line 35
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table163.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table163.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table163.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table163.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table163.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table163.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table163.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 37
 testRunner.And("the response body should contain:", ((string)(null)), table163, "And ");
#line hidden
#line 47
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid ActionPlan with all fields and SubContractorId")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PostValidActionPlanWithAllFieldsAndSubContractorId()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid ActionPlan with all fields and SubContractorId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table164.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table164.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table164.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table164.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table164.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table164.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table164.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table164.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 53
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table164, "Given ");
#line hidden
#line 63
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table165.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table165.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table165.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table165.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table165.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table165.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table165.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 65
 testRunner.And("the response body should contain:", ((string)(null)), table165, "And ");
#line hidden
#line 74
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid ActionPlan with only mandatory fields")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PostValidActionPlanWithOnlyMandatoryFields()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid ActionPlan with only mandatory fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table166.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table166.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table166.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
#line 80
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table166, "Given ");
#line hidden
#line 85
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table167.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table167.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table167.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            ""});
                table167.AddRow(new string[] {
                            "CurrentSituation",
                            ""});
#line 86
 testRunner.And("the response body should contain:", ((string)(null)), table167, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Valid ActionPlan with only mandatory fields and SubcontractorId")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PostValidActionPlanWithOnlyMandatoryFieldsAndSubcontractorId()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans",
                    "subcontractorId"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Valid ActionPlan with only mandatory fields and SubcontractorId", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table168.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table168.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table168.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
#line 96
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table168, "Given ");
#line hidden
#line 101
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table169.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table169.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table169.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            ""});
                table169.AddRow(new string[] {
                            "CurrentSituation",
                            ""});
#line 102
 testRunner.And("the response body should contain:", ((string)(null)), table169, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Changed feed for Post ActionPlan")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void ChangedFeedForPostActionPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Changed feed for Post ActionPlan", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table170.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table170.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table170.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table170.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table170.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table170.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table170.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table170.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 113
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table170, "Given ");
#line hidden
#line 123
 testRunner.Then("there should be a 201 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ActionPlan with missing DateActionPlanCreated")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PostActionPlanWithMissingDateActionPlanCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ActionPlan with missing DateActionPlanCreated", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table171.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table171.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table171.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table171.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table171.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table171.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table171.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 129
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table171, "Given ");
#line hidden
#line 138
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ActionPlan with invalid DateActionPlanCreated")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PostActionPlanWithInvalidDateActionPlanCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ActionPlan with invalid DateActionPlanCreated", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table172.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2058-07-30T09:00:00Z"});
                table172.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table172.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table172.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table172.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table172.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table172.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table172.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 142
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table172, "Given ");
#line hidden
#line 152
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ActionPlan with DateActionPlanCreated earlier than Session.DateandTimeOfSess" +
            "ion")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PostActionPlanWithDateActionPlanCreatedEarlierThanSession_DateandTimeOfSession()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ActionPlan with DateActionPlanCreated earlier than Session.DateandTimeOfSess" +
                    "ion", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 155
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table173.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2017-07-30T09:00:00Z"});
                table173.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table173.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table173.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table173.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table173.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table173.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table173.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 156
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table173, "Given ");
#line hidden
#line 166
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ActionPlan with DateAndTimeCharterShown earlier than DateActionPlanCreated")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        public virtual void PostActionPlanWithDateAndTimeCharterShownEarlierThanDateActionPlanCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans",
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ActionPlan with DateAndTimeCharterShown earlier than DateActionPlanCreated", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 169
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table174.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table174.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table174.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-29T09:00:00Z"});
                table174.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table174.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table174.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table174.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table174.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 170
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table174, "Given ");
#line hidden
#line 180
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ActionPlan with DateActionPlanSentToCustomer earlier than DateActionPlanCrea" +
            "ted")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PostActionPlanWithDateActionPlanSentToCustomerEarlierThanDateActionPlanCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ActionPlan with DateActionPlanSentToCustomer earlier than DateActionPlanCrea" +
                    "ted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 183
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table175.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table175.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table175.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table175.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-29T09:00:00Z"});
                table175.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table175.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table175.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table175.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 184
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table175, "Given ");
#line hidden
#line 194
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ActionPlan with DateActionPlanAcknowledged earlier than DateActionPlanCreate" +
            "d")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PostActionPlanWithDateActionPlanAcknowledgedEarlierThanDateActionPlanCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ActionPlan with DateActionPlanAcknowledged earlier than DateActionPlanCreate" +
                    "d", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 197
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table176.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table176.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "true"});
                table176.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table176.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table176.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table176.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-29T09:00:00Z"});
                table176.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table176.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 198
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table176, "Given ");
#line hidden
#line 208
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ActionPlan with missing CustomerCharterShownToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PostActionPlanWithMissingCustomerCharterShownToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ActionPlan with missing CustomerCharterShownToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 211
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table177.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2018-07-30T09:00:00Z"});
                table177.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table177.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table177.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table177.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table177.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table177.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 212
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table177, "Given ");
#line hidden
#line 221
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post ActionPlan with invalid CustomerCharterShownToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PostActionPlanWithInvalidCustomerCharterShownToCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "actionplans"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ActionPlan with invalid CustomerCharterShownToCustomer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 224
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table178.AddRow(new string[] {
                            "DateActionPlanCreated",
                            "2058-07-30T09:00:00Z"});
                table178.AddRow(new string[] {
                            "CustomerCharterShownToCustomer",
                            "3"});
                table178.AddRow(new string[] {
                            "DateAndTimeCharterShown",
                            "2018-07-30T09:00:00Z"});
                table178.AddRow(new string[] {
                            "DateActionPlanSentToCustomer",
                            "2018-07-30T09:00:00Z"});
                table178.AddRow(new string[] {
                            "ActionPlanDeliveryMethod",
                            "1"});
                table178.AddRow(new string[] {
                            "DateActionPlanAcknowledged",
                            "2018-07-30T09:00:00Z"});
                table178.AddRow(new string[] {
                            "PriorityCustomer",
                            "1"});
                table178.AddRow(new string[] {
                            "CurrentSituation",
                            "looking for work"});
#line 225
 testRunner.Given("I post an ActionPlan with the following details V3:", ((string)(null)), table178, "Given ");
#line hidden
#line 235
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
