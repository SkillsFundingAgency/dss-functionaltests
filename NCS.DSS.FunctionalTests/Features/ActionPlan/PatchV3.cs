// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.ActionPlan
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PatchV3")]
    [NUnit.Framework.CategoryAttribute("postV3")]
    [NUnit.Framework.CategoryAttribute("patchV3")]
    public partial class PatchV3Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PatchV3.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PatchV3", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV3",
                        "patchV3"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
 #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table1.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 8
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table2.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 12
 testRunner.Given("I post a Customer with the following details:", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "DateandTimeOfInteraction",
                        "2018-06-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "Channel",
                        "2"});
            table3.AddRow(new string[] {
                        "InteractionType",
                        "2"});
            table3.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-06-22T16:52:10Z"});
#line 16
 testRunner.And("I post an Interaction with the following details:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "DateandTimeOfSession",
                        "2018-06-21T14:45:00Z"});
            table4.AddRow(new string[] {
                        "VenuePostCode",
                        "NN1 2NN"});
#line 22
 testRunner.And("I post a session with the following details:", ((string)(null)), table4, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid CustomerCharterShownToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchValidCustomerCharterShownToCustomer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid CustomerCharterShownToCustomer", null, new string[] {
                        "actionplans",
                        "smoke"});
#line 31
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table5.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "false"});
            table5.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table5.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table5.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table5.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table5.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 32
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
#line 41
  testRunner.When("I patch the following:", ((string)(null)), table6, "When ");
#line 44
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table7.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table7.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table7.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table7.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table7.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table7.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 45
  testRunner.And("the response body should contain:", ((string)(null)), table7, "And ");
#line 54
  testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
  testRunner.And("there should be a record in the ActionPlans ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
  testRunner.And("there should be a record in the ActionPlans-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid DateAndTimeCharterShown")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidDateAndTimeCharterShown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid DateAndTimeCharterShown", null, new string[] {
                        "actionplans"});
#line 59
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table8.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table8.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table8.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table8.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table8.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table8.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 60
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
#line 69
  testRunner.When("I patch the following via a different touchpoint", ((string)(null)), table9, "When ");
#line 72
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table10.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table10.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table10.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table10.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table10.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table10.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table10.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 73
  testRunner.And("the response body should contain:", ((string)(null)), table10, "And ");
#line 83
  testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
  testRunner.And("the response body should have different LastUpdatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
  testRunner.And("there should be a record in the ActionPlans ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
  testRunner.And("there should be a record in the ActionPlans-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid DateActionPlanCreated")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidDateActionPlanCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid DateActionPlanCreated", null, new string[] {
                        "actionplans"});
#line 89
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-29T09:00:00Z"});
            table11.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table11.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table11.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table11.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table11.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table11.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table11.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 90
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
#line 100
  testRunner.When("I patch the following:", ((string)(null)), table12, "When ");
#line 103
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table13.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table13.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table13.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table13.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table13.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table13.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table13.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 104
  testRunner.And("the response body should contain:", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid DateActionPlanSentToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidDateActionPlanSentToCustomer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid DateActionPlanSentToCustomer", null, new string[] {
                        "actionplans"});
#line 116
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table14.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table14.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table14.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table14.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table14.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table14.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table14.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 117
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-31T09:00:00Z"});
#line 127
  testRunner.When("I patch the following:", ((string)(null)), table15, "When ");
#line 130
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table16.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table16.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table16.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-31T09:00:00Z"});
            table16.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table16.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table16.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table16.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 131
  testRunner.And("the response body should contain:", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid DateActionPlanAcknowledged")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidDateActionPlanAcknowledged()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid DateActionPlanAcknowledged", null, new string[] {
                        "actionplans"});
#line 143
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table17.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table17.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table17.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table17.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table17.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table17.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table17.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 144
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table17, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-31T09:00:00Z"});
#line 154
  testRunner.When("I patch the following:", ((string)(null)), table18, "When ");
#line 157
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table19.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table19.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table19.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table19.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table19.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-31T09:00:00Z"});
            table19.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table19.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 158
  testRunner.And("the response body should contain:", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid ActionPlanDeliveryMethod")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidActionPlanDeliveryMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid ActionPlanDeliveryMethod", null, new string[] {
                        "actionplans"});
#line 170
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table20.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table20.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table20.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table20.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table20.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table20.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table20.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 171
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
#line 181
  testRunner.When("I patch the following:", ((string)(null)), table21, "When ");
#line 184
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table22.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table22.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table22.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table22.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table22.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table22.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table22.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 185
  testRunner.And("the response body should contain:", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid PriorityCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidPriorityCustomer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid PriorityCustomer", null, new string[] {
                        "actionplans"});
#line 197
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table23.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table23.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table23.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table23.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table23.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table23.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table23.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 198
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table23, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "PriorityCustomer",
                        "2"});
#line 208
  testRunner.When("I patch the following:", ((string)(null)), table24, "When ");
#line 211
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table25.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table25.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table25.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table25.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table25.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table25.AddRow(new string[] {
                        "PriorityCustomer",
                        "2"});
            table25.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 212
  testRunner.And("the response body should contain:", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Valid CurrentSituation")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchValidCurrentSituation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Valid CurrentSituation", null, new string[] {
                        "actionplans"});
#line 224
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table26.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table26.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table26.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table26.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table26.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table26.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table26.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 225
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table26, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table27.AddRow(new string[] {
                        "CurrentSituation",
                        "still looking"});
#line 235
  testRunner.When("I patch the following:", ((string)(null)), table27, "When ");
#line 238
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table28.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table28.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table28.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table28.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table28.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table28.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table28.AddRow(new string[] {
                        "CurrentSituation",
                        "still looking"});
#line 239
  testRunner.And("the response body should contain:", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch with SubcontractorId")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        [NUnit.Framework.CategoryAttribute("subcontractorId")]
        public virtual void PatchWithSubcontractorId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch with SubcontractorId", null, new string[] {
                        "actionplans",
                        "subcontractorId"});
#line 252
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table29.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table29.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table29.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table29.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table29.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table29.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table29.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table29.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 253
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table29, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table30.AddRow(new string[] {
                        "CurrentSituation",
                        "still looking"});
#line 263
  testRunner.When("I patch the following:", ((string)(null)), table30, "When ");
#line 266
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table31.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table31.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table31.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table31.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table31.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table31.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table31.AddRow(new string[] {
                        "CurrentSituation",
                        "still looking"});
#line 267
  testRunner.And("the response body should contain:", ((string)(null)), table31, "And ");
#line 277
  testRunner.And("the response body should contain the SubContractorId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateActionPlanCreated")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateActionPlanCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateActionPlanCreated", null, new string[] {
                        "actionplans"});
#line 280
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table32.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-29T09:00:00Z"});
            table32.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table32.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table32.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table32.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table32.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table32.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table32.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 281
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table32, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table33.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-31T09:00:00Z"});
#line 291
  testRunner.When("I patch the following:", ((string)(null)), table33, "When ");
#line 294
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid CustomerCharterShownToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidCustomerCharterShownToCustomer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid CustomerCharterShownToCustomer", null, new string[] {
                        "actionplans"});
#line 297
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table34.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table34.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table34.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table34.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table34.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table34.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table34.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 298
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table34, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table35.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "1"});
#line 307
  testRunner.When("I patch the following:", ((string)(null)), table35, "When ");
#line 310
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateAndTimeCharterShown")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateAndTimeCharterShown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateAndTimeCharterShown", null, new string[] {
                        "actionplans"});
#line 315
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table36.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table36.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table36.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table36.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table36.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table36.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table36.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 316
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table36, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table37.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-29T09:00:00Z"});
#line 325
  testRunner.When("I patch the following:", ((string)(null)), table37, "When ");
#line 328
  testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateActionPlanSentToCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateActionPlanSentToCustomer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateActionPlanSentToCustomer", null, new string[] {
                        "actionplans"});
#line 331
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table38.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table38.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table38.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table38.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table38.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table38.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table38.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table38.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 332
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table38, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table39.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-29T09:00:00Z"});
#line 342
  testRunner.When("I patch the following:", ((string)(null)), table39, "When ");
#line 345
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid DateActionPlanAcknowledged")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidDateActionPlanAcknowledged()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid DateActionPlanAcknowledged", null, new string[] {
                        "actionplans"});
#line 349
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table40.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table40.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table40.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table40.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table40.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table40.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table40.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table40.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 350
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table40, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table41.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-29T09:00:00Z"});
#line 360
  testRunner.When("I patch the following:", ((string)(null)), table41, "When ");
#line 363
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid ActionPlanDeliveryMethod")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidActionPlanDeliveryMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid ActionPlanDeliveryMethod", null, new string[] {
                        "actionplans"});
#line 366
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table42.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table42.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table42.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table42.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table42.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table42.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table42.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table42.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 367
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table42, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table43.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-29T09:00:00Z"});
#line 377
  testRunner.When("I patch the following:", ((string)(null)), table43, "When ");
#line 380
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch invalid PriorityCustomer")]
        [NUnit.Framework.CategoryAttribute("actionplans")]
        public virtual void PatchInvalidPriorityCustomer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch invalid PriorityCustomer", null, new string[] {
                        "actionplans"});
#line 384
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table44.AddRow(new string[] {
                        "DateActionPlanCreated",
                        "2018-07-30T09:00:00Z"});
            table44.AddRow(new string[] {
                        "CustomerCharterShownToCustomer",
                        "true"});
            table44.AddRow(new string[] {
                        "DateAndTimeCharterShown",
                        "2018-07-30T09:00:00Z"});
            table44.AddRow(new string[] {
                        "DateActionPlanSentToCustomer",
                        "2018-07-30T09:00:00Z"});
            table44.AddRow(new string[] {
                        "ActionPlanDeliveryMethod",
                        "1"});
            table44.AddRow(new string[] {
                        "DateActionPlanAcknowledged",
                        "2018-07-30T09:00:00Z"});
            table44.AddRow(new string[] {
                        "PriorityCustomer",
                        "1"});
            table44.AddRow(new string[] {
                        "CurrentSituation",
                        "looking for work"});
#line 385
  testRunner.Given("I post an ActionPlan with the following details:", ((string)(null)), table44, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table45.AddRow(new string[] {
                        "PriorityCustomer",
                        "7"});
#line 395
  testRunner.When("I patch the following:", ((string)(null)), table45, "When ");
#line 398
  testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

