// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.FunctionalTests.Features.Diversity
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DiversityV2_Patch")]
    [NUnit.Framework.CategoryAttribute("postV2")]
    [NUnit.Framework.CategoryAttribute("patchV2")]
    public partial class DiversityV2_PatchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DiversityV2_Patch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DiversityV2_Patch", null, ProgrammingLanguage.CSharp, new string[] {
                        "postV2",
                        "patchV2"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AdviserName",
                        "BillyAdviser"});
            table1.AddRow(new string[] {
                        "AdviserContactNumber",
                        "98798678967967"});
#line 5
 testRunner.Given("I post an adviser with the following details:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "GivenName",
                        "Bob"});
            table2.AddRow(new string[] {
                        "FamilyName",
                        "Customer"});
#line 9
 testRunner.And("I post a Customer with the following details:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with all values")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void PatchDiversityWithAllValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with all values", null, new string[] {
                        "diversitydetails",
                        "smoke"});
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table3.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table3.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table3.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table3.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table3.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table3.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table3.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 27
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table4.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table4.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table4.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table4.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table4.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table4.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table4.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
            table4.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-08-25T11:21:00Z"});
#line 37
 testRunner.When("I patch the following:", ((string)(null)), table4, "When ");
#line 48
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table5.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table5.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table5.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table5.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table5.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table5.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table5.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
            table5.AddRow(new string[] {
                        "LastModifiedDate",
                        "2018-08-25T11:21:00Z"});
#line 49
 testRunner.And("the response body should contain:", ((string)(null)), table5, "And ");
#line 60
 testRunner.And("the \"diversitydetails\" cosmos document should include CreatedBy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("the response body should not contain the \"CreatedBy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And("there should be a record in the diversitydetails ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("there should be a record in the diversitydetails-history ChangeFeed table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "True", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "False", null)]
        public virtual void PatchDiversityWithValidValuesForConsentToCollectLLDDHealth(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for ConsentToCollectLLDDHealth", null, @__tags);
#line 71
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table6.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table6.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table6.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table6.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table6.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table6.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table6.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 73
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table6, "Given ");
#line 83
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "car", null)]
        public virtual void PatchDiversityWithInvalidValuesForConsentToCollectLLDDHealth(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for ConsentToCollectLLDDHealth", null, @__tags);
#line 93
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table7.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table7.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table7.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table7.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table7.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table7.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table7.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 95
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table7, "Given ");
#line 105
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for ConsentToCollectLLDDHealth")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectLLDDHealth", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForConsentToCollectLLDDHealth(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for ConsentToCollectLLDDHealth", null, @__tags);
#line 114
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table8.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table8.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table8.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table8.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table8.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table8.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table8.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 116
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table8, "Given ");
#line 126
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table9.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table9.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table9.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table9.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table9.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table9.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table9.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 128
 testRunner.And("the response body should contain:", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with ConsentToCollectLLDDHealth where no value exists for DateAnd" +
            "TimeLLDDHealthConsentCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PatchDiversityWithConsentToCollectLLDDHealthWhereNoValueExistsForDateAndTimeLLDDHealthConsentCollected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with ConsentToCollectLLDDHealth where no value exists for DateAnd" +
                    "TimeLLDDHealthConsentCollected", null, new string[] {
                        "diversitydetails"});
#line 145
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "false"});
            table10.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table10.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table10.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table10.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        ""});
            table10.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table10.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table10.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 147
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table10, "Given ");
#line 157
 testRunner.When("I patch the element ConsentToCollectLLDDHealth with true:", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
 testRunner.And("the date field DateAndTimeLLDDHealthConsentCollected should hold a recent value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for LearningDifficultyOrDisabilityDeclaration")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "2", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "9", null)]
        public virtual void PatchDiversityWithValidValuesForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for LearningDifficultyOrDisabilityDeclaration", null, @__tags);
#line 167
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table11.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table11.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table11.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table11.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table11.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table11.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table11.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 170
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table11, "Given ");
#line 180
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 181
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table12.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table12.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
#line 182
 testRunner.And("the response body should contain:", ((string)(null)), table12, "And ");
#line 187
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration" +
            "")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "0", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "3", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "8", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "10", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "98", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "99", null)]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for LearningDifficultyOrDisabilityDeclaration" +
                    "", null, @__tags);
#line 198
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table13.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table13.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table13.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table13.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table13.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table13.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table13.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 200
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table13, "Given ");
#line 210
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 211
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 212
 testRunner.And("the error message should be \"Please supply a valid Learning Difficulty Or Disabil" +
                    "ity Declaration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for LearningDifficultyOrDisabilityDeclarat" +
            "ion")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("LearningDifficultyOrDisabilityDeclaration", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForLearningDifficultyOrDisabilityDeclaration(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for LearningDifficultyOrDisabilityDeclarat" +
                    "ion", null, @__tags);
#line 226
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table14.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table14.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table14.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table14.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table14.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table14.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table14.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 228
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table14, "Given ");
#line 238
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 239
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table15.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table15.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table15.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table15.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table15.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table15.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table15.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 240
 testRunner.And("the response body should contain:", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "4", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "5", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "6", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "7", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "8", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "9", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "10", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "11", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "12", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "13", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "14", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "15", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "16", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "17", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "93", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "94", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "95", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "96", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "97", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "98", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "99", null)]
        public virtual void PatchDiversityWithValidValuesForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for PrimaryLearningDifficultyOrDisability", null, @__tags);
#line 260
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table16.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table16.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table16.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table16.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table16.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table16.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table16.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 262
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table16, "Given ");
#line 272
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 273
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table17.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table17.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
#line 274
 testRunner.And("the response body should contain:", ((string)(null)), table17, "And ");
#line 279
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for PrimaryLearningDifficultyOrDisability", null, @__tags);
#line 308
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table18.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table18.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table18.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table18.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table18.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table18.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table18.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 310
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table18, "Given ");
#line 320
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 321
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 322
 testRunner.And("the error message should be \"Please supply a valid Primary Learning Difficulty Or" +
                    " Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for PrimaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("PrimaryLearningDifficultyOrDisability", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForPrimaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for PrimaryLearningDifficultyOrDisability", null, @__tags);
#line 339
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table19.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table19.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table19.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table19.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table19.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table19.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table19.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table19.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 341
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table19, "Given ");
#line 351
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 352
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table20.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table20.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table20.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table20.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table20.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table20.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table20.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table20.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 353
 testRunner.And("the response body should contain:", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for SecondaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "4", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "5", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "6", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "7", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "8", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "9", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "10", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "11", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "12", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "13", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "14", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "15", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "16", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "17", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "93", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "94", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "95", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "96", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "97", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "98", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "99", null)]
        public virtual void PatchDiversityWithValidValuesForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for SecondaryLearningDifficultyOrDisability", null, @__tags);
#line 373
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table21.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table21.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table21.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table21.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table21.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table21.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table21.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table21.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 375
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table21, "Given ");
#line 385
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 386
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 387
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for SecondaryLearningDifficultyOrDisability")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "1", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "2", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "3", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "18", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "20", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "90", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "92", null)]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for SecondaryLearningDifficultyOrDisability", null, @__tags);
#line 416
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table22.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table22.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table22.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table22.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table22.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table22.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table22.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table22.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 418
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table22, "Given ");
#line 428
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 429
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 430
 testRunner.And("the error message should be \"Please supply a valid Secondary Learning Difficulty " +
                    "Or Disability\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for SecondaryLearningDifficultyOrDisabilit" +
            "y")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("SecondaryLearningDifficultyOrDisability", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForSecondaryLearningDifficultyOrDisability(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for SecondaryLearningDifficultyOrDisabilit" +
                    "y", null, @__tags);
#line 447
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table23.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table23.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table23.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table23.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table23.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table23.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table23.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table23.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 449
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table23, "Given ");
#line 459
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 460
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table24.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table24.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table24.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table24.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table24.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table24.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table24.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table24.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 461
 testRunner.And("the response body should contain:", ((string)(null)), table24, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for DateAndTimeLLDDHealthConsentCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "now", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "today", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "2018-08-25T11:21:00Z", null)]
        public virtual void PatchDiversityWithValidValuesForDateAndTimeLLDDHealthConsentCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for DateAndTimeLLDDHealthConsentCollected", null, @__tags);
#line 481
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table25.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table25.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table25.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table25.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table25.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table25.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table25.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table25.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 483
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table25, "Given ");
#line 493
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 494
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 495
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 496
 testRunner.And("the response body value for DateAndTimeLLDDHealthConsentCollected should match th" +
                    "e last request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for DateAndTimeLDDHealthConsentCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeLLDDHealthConsentCollected", "today +1Day", null)]
        public virtual void PatchDiversityWithInvalidValuesForDateAndTimeLDDHealthConsentCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for DateAndTimeLDDHealthConsentCollected", null, @__tags);
#line 507
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table26.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table26.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table26.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table26.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table26.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table26.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table26.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table26.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 509
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table26, "Given ");
#line 519
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 520
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 521
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 522
 testRunner.And("the error message should be \"Date And Time LLDD Health Consent Collected must be " +
                    "less the current date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "True", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "False", null)]
        public virtual void PatchDiversityWithValidValuesForConsentToCollectEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for ConsentToCollectEthnicity", null, @__tags);
#line 538
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table27.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table27.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table27.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table27.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table27.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table27.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table27.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table27.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 540
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table27, "Given ");
#line 550
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 551
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 552
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "abc", null)]
        public virtual void PatchDiversityWithInvalidValuesForConsentToCollectEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for ConsentToCollectEthnicity", null, @__tags);
#line 561
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table28.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table28.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table28.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table28.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table28.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table28.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table28.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 563
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table28, "Given ");
#line 573
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 574
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for ConsentToCollectEthnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForConsentToCollectEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for ConsentToCollectEthnicity", null, @__tags);
#line 583
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table29.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table29.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table29.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table29.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table29.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table29.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table29.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table29.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 585
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table29, "Given ");
#line 595
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 596
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table30.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table30.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table30.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table30.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table30.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table30.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table30.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table30.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 597
 testRunner.And("the response body should contain:", ((string)(null)), table30, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with ConsentToCollectEthnicity where no value exists for DateAndT" +
            "imeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        public virtual void PatchDiversityWithConsentToCollectEthnicityWhereNoValueExistsForDateAndTimeEthnicityCollected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with ConsentToCollectEthnicity where no value exists for DateAndT" +
                    "imeEthnicityCollected", null, new string[] {
                        "diversitydetails"});
#line 613
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "false"});
            table31.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table31.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table31.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table31.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        ""});
            table31.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "false"});
            table31.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table31.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        ""});
#line 615
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table31, "Given ");
#line 625
 testRunner.When("I patch the element ConsentToCollectEthnicity with true:", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 626
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 627
 testRunner.And("the date field DateAndTimeEthnicityCollected should hold a recent value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "31", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "32", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "33", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "34", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "35", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "36", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "37", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "38", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "39", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "40", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "41", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "42", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "43", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "44", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "45", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "46", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "47", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "98", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "99", null)]
        public virtual void PatchDiversityWithValidValuesForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for Ethnicity", null, @__tags);
#line 635
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table32.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table32.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table32.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table32.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table32.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table32.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table32.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table32.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 637
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table32, "Given ");
#line 647
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 648
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 649
 testRunner.And(string.Format("the response body should have {0} with value {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "30", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "48", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "50", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "90", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "97", null)]
        [NUnit.Framework.TestCaseAttribute("Ethnicity", "100", null)]
        public virtual void PatchDiversityWithInvalidValuesForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for Ethnicity", null, @__tags);
#line 674
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table33.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table33.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table33.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table33.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table33.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table33.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table33.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table33.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 676
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table33, "Given ");
#line 686
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 687
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 688
 testRunner.And("the error message should be \"Please supply a valid Ethnicity\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for Ethnicity")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("ConsentToCollectEthnicity", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForEthnicity(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for Ethnicity", null, @__tags);
#line 701
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table34.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table34.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table34.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table34.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table34.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table34.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table34.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table34.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 703
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table34, "Given ");
#line 713
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 714
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table35.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table35.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table35.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table35.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table35.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table35.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table35.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table35.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 715
 testRunner.And("the response body should contain:", ((string)(null)), table35, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with valid values for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "now", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "today", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "2018-08-25T11:21:00Z", null)]
        public virtual void PatchDiversityWithValidValuesForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with valid values for DateAndTimeEthnicityCollected", null, @__tags);
#line 735
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table36.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table36.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table36.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table36.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table36.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table36.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table36.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table36.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 737
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table36, "Given ");
#line 747
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 748
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 749
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with invalid values for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "now +1Hour", null)]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "today +1Day", null)]
        public virtual void PatchDiversityWithInvalidValuesForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with invalid values for DateAndTimeEthnicityCollected", null, @__tags);
#line 762
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table37.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table37.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table37.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table37.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table37.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table37.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table37.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table37.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 764
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table37, "Given ");
#line 774
 testRunner.Given(string.Format("I want to send {0} with value {1} in the following request", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 775
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 776
 testRunner.Then("there should be a 422 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 777
 testRunner.And("the error message should be \"Date And Time Ethnicity Collected must be less the c" +
                    "urrent date/time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch Diversity with no value supplied for DateAndTimeEthnicityCollected")]
        [NUnit.Framework.CategoryAttribute("diversitydetails")]
        [NUnit.Framework.TestCaseAttribute("DateAndTimeEthnicityCollected", "", null)]
        public virtual void PatchDiversityWithNoValueSuppliedForDateAndTimeEthnicityCollected(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "diversitydetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch Diversity with no value supplied for DateAndTimeEthnicityCollected", null, @__tags);
#line 785
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table38.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table38.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table38.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table38.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table38.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table38.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table38.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table38.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 787
 testRunner.Given("I post a Diversity Details record with the following details:", ((string)(null)), table38, "Given ");
#line 797
 testRunner.When(string.Format("I patch the element {0} with {1}:", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 798
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table39.AddRow(new string[] {
                        "ConsentToCollectLLDDHealth",
                        "true"});
            table39.AddRow(new string[] {
                        "LearningDifficultyOrDisabilityDeclaration",
                        "1"});
            table39.AddRow(new string[] {
                        "PrimaryLearningDifficultyOrDisability",
                        "4"});
            table39.AddRow(new string[] {
                        "SecondaryLearningDifficultyOrDisability",
                        "5"});
            table39.AddRow(new string[] {
                        "DateAndTimeLLDDHealthConsentCollected",
                        "2018-06-25T11:21:00Z"});
            table39.AddRow(new string[] {
                        "ConsentToCollectEthnicity",
                        "true"});
            table39.AddRow(new string[] {
                        "Ethnicity",
                        "32"});
            table39.AddRow(new string[] {
                        "DateAndTimeEthnicityCollected",
                        "2018-06-25T11:22:00Z"});
#line 799
 testRunner.And("the response body should contain:", ((string)(null)), table39, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Patch diversity for a terminated customer")]
        public virtual void PatchDiversityForATerminatedCustomer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Patch diversity for a terminated customer", null, ((string[])(null)));
#line 842
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

